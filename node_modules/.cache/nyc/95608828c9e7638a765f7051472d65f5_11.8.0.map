{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/graph/graphGoalsToSlack.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/graph/graphGoalsToSlack.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { configurationValue } from \"@atomist/automation-client/configuration\";\nimport * as slack from \"@atomist/slack-messages/SlackMessages\";\nimport axios from \"axios\";\nimport * as https from \"https\";\nimport * as _ from \"lodash\";\nimport { GoalsSetListener } from \"../../../listener/GoalsSetListener\";\nimport { Goal, GoalWithPrecondition } from \"../Goal\";\nimport { Goals } from \"../Goals\";\nimport { splitContext } from \"../support/github/gitHubContext\";\n\n/**\n * Display a graph of the goals that have just been set to Slack\n * @param {GoalsSetListenerInvocation} gsi\n * @return {Promise<any>}\n * @constructor\n */\nexport const GraphGoalsToSlack: GoalsSetListener = async gsi => {\n    const graphvizServiceUrl = configurationValue<string>(\"sdm.graphviz.url\", null);\n    if (!graphvizServiceUrl) {\n        return;\n    }\n    if (!gsi.goalSet) {\n        return;\n    }\n\n    try {\n        const graphDefinition = goalsToDot(gsi.goalSet);\n        logger.debug(\"ShowGraph: generated .dot: \" + graphDefinition);\n\n        const generateGraphUrl = graphvizServiceUrl + \"/dot/png\";\n        const generateGraphResponse = await askForGraph(generateGraphUrl, graphDefinition);\n\n        const graphImageRelativePath = generateGraphResponse.goalGraphUrl;\n        if (!graphImageRelativePath) {\n            logger.info(\"ShowGraph: No image path returned from graphvizService\");\n            return;\n        }\n\n        const showGraphMessage: slack.SlackMessage = {\n            attachments: [{\n                fallback: \"dependency goal graph goes here\",\n                text: \"Graph of planned goal set: \" + gsi.goalSet.name,\n                image_url: graphvizServiceUrl + \"/\" + graphImageRelativePath,\n            }],\n        };\n        return gsi.addressChannels(showGraphMessage);\n    } catch (err) {\n        // do not fail anything. The graphing service has an SLA of \"good luck\"\n        logger.warn(\"ShowGraph: Unable to generate a cool graph of the goalSet: \" + err.message);\n        logger.warn(\"ShowGraph: URL: \" + graphvizServiceUrl);\n        logger.warn(\"ShowGraph: stack trace: \" + err.stack);\n    }\n\n};\n\nasync function askForGraph(generateGraphUrl: string, graphDefinition: string) {\n    const agent = new https.Agent({\n        rejectUnauthorized: false,\n    });\n    const generateGraphResponse = await axios.post(generateGraphUrl,\n        graphDefinition,\n        {headers: {\"Content-Type\": \"text/plain\"}, httpsAgent: agent});\n    logger.debug(\"ShowGraph: got from %s: %j\", generateGraphUrl, generateGraphResponse);\n\n    return generateGraphResponse.data;\n}\n\nexport function goalsToDot(goals: Goals): string {\n    const nodeAttributes = goals.goals.map(g =>\n        `${validDotName(g)} [label=\"${g.name}\"]`);\n\n    const edges: string[][] = goals.goals.map(g => {\n        const precursors = (g as GoalWithPrecondition).dependsOn || [];\n        return precursors.map(p => `${validDotName(p)} -> ${validDotName(g)}`);\n    });\n\n    const edgeAttributes = _.flatten(edges);\n\n    return `digraph ${validDotIdentifier(goals.name)} {\n    fontname=\"Arial\";\n    splines=\"polyline\";\n    rankdir=\"LR\";\n    edge [arrowhead=\"vee\"];\n    node [shape=box, fontname=\"Arial\", style=\"rounded\"];\n\n    ${nodeAttributes.join(\"\\n    \")}\n\n    ${edgeAttributes.join(\"\\n    \")}\n}\n`;\n}\n\nfunction validDotName(g: Goal) {\n    const parts = splitContext(g.context);\n    const startAtName = parts.env + \"_\" + parts.goalName;\n    return validDotIdentifier(startAtName);\n}\n\nfunction validDotIdentifier(s: string): string {\n    return s.replace(/[-\\s.]/g, \"_\");\n}\n"]}