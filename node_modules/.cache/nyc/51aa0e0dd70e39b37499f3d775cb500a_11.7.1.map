{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/project/filteredView.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/project/filteredView.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAMH,iCAAiC;AAEjC;;;;;;GAMG;AACH,sBAA6B,CAAU,EAAE,MAAiC;IACtE,wDAAwD;IACxD,MAAM,OAAO,GAAG;QACZ,GAAG,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;YAClB,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAyB,EAAE,MAAM,CAAC,CAAC;YACzE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,CAAC;aAC1D;YACD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;YACxC,OAAO,UAAS,GAAG,IAAI;gBACnB,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC;oBACtB,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;oBACxC,2CAA2C;oBAC3C,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC;QACN,CAAC;KACJ,CAAC;IACF,OAAO,IAAI,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AACjC,CAAC;AAnBD,oCAmBC;AAED;;;GAGG;AACH;IAEI,YAA6B,OAAgB,EACf,MAAiC;QADlC,YAAO,GAAP,OAAO,CAAS;QACf,WAAM,GAAN,MAAM,CAA2B;IAC/D,CAAC;IAEM,OAAO,CAAC,IAAY;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5B,SAAS,CAAC;IAClB,CAAC;IAEM,QAAQ,CAAC,IAAY;QACxB,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACtC;QACD,MAAM,IAAI,KAAK,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,YAAsB,EAAE,IAAQ;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;QACrE,mBAAmB,CAAC,UAAU,GAAG,UAAS,CAAC,EAAE,QAAQ,EAAE,IAAI;YACvD,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;YACD,IAAI,EAAE,CAAC;QACX,CAAC,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC;aACjD,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACnC,CAAC;CAEJ","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileStream, Project } from \"@atomist/automation-client/project/Project\";\n\nimport { File } from \"@atomist/automation-client/project/File\";\nimport { AbstractProject } from \"@atomist/automation-client/project/support/AbstractProject\";\nimport * as stream from \"stream\";\n\n/**\n * Create a filtered view of the given project.\n * Changes to the filtered view will affect the source project.\n * @param {LocalProject} p\n * @param filter function to filter file paths\n * @return {Promise<LocalProject>}\n */\nexport function filteredView(p: Project, filter: (path: string) => boolean): Project {\n    // Use an ES6 proxy to bring back memories of Spring AOP\n    const handler = {\n        get: (target, prop) => {\n            const decorator = new FilteredProject(target as AbstractProject, filter);\n            if (prop.endsWith(\"Sync\")) {\n                throw new Error(\"Don't use sync methods: had \" + prop);\n            }\n            const origMethod = target[prop];\n            const decoratedMethod = decorator[prop];\n            return function(...args) {\n                return !!decoratedMethod ?\n                    decoratedMethod.apply(decorator, args) :\n                    // tslint:disable-next-line:no-invalid-this\n                    origMethod.apply(this, args);\n            };\n        },\n    };\n    return new Proxy(p, handler);\n}\n\n/**\n * This relies on the implementation of AbstractProject,\n * where overriding streamFilesRaw does move of what we need\n */\nclass FilteredProject implements Partial<Project> {\n\n    constructor(private readonly project: Project,\n                private readonly  filter: (path: string) => boolean) {\n    }\n\n    public getFile(path: string): Promise<File | undefined> {\n        return this.filter(path) ?\n            this.project.getFile(path) :\n            undefined;\n    }\n\n    public findFile(path: string): Promise<File> {\n        if (this.filter(path)) {\n            return this.project.findFile(path);\n        }\n        throw new Error(`No file at ${path}`);\n    }\n\n    /**\n     * This method is used by most of the others, such as totalFileCount\n     * @param {string[]} globPatterns\n     * @param {{}} opts\n     * @return {FileStream}\n     */\n    public streamFilesRaw(globPatterns: string[], opts: {}): FileStream {\n        const filter = this.filter;\n        const onlyIncludedFilters = new stream.Transform({objectMode: true});\n        onlyIncludedFilters._transform = function(f, encoding, done) {\n            if (filter(f.path)) {\n                this.push(f);\n            }\n            done();\n        };\n        return this.project.streamFilesRaw(globPatterns, opts)\n            .pipe(onlyIncludedFilters);\n    }\n\n}\n"]}