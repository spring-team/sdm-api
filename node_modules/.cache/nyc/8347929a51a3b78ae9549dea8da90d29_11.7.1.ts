"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_b3j0fc8kq=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/cloudFoundryLogParser.ts",hash="a60c5c47f4bdcb8a5509e972edcf17c1f80f6f11",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/cloudFoundryLogParser.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:23},end:{line:18,column:68}},"2":{start:{line:19,column:23},end:{line:19,column:68}},"3":{start:{line:25,column:14},end:{line:25,column:64}},"4":{start:{line:26,column:4},end:{line:31,column:5}},"5":{start:{line:27,column:8},end:{line:29,column:9}},"6":{start:{line:28,column:12},end:{line:28,column:42}},"7":{start:{line:30,column:8},end:{line:30,column:26}},"8":{start:{line:32,column:4},end:{line:32,column:21}},"9":{start:{line:34,column:0},end:{line:34,column:74}},"10":{start:{line:36,column:15},end:{line:38,column:2}},"11":{start:{line:40,column:13},end:{line:42,column:2}}},fnMap:{"0":{name:"parseCloudFoundryLogForEndpoint",decl:{start:{line:24,column:9},end:{line:24,column:40}},loc:{start:{line:24,column:48},end:{line:33,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:25,column:14},end:{line:25,column:64}},type:"binary-expr",locations:[{start:{line:25,column:14},end:{line:25,column:38}},{start:{line:25,column:42},end:{line:25,column:64}}],line:25},"1":{loc:{start:{line:26,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:26,column:4},end:{line:31,column:5}},{start:{line:26,column:4},end:{line:31,column:5}}],line:26},"2":{loc:{start:{line:27,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:27,column:8},end:{line:29,column:9}},{start:{line:27,column:8},end:{line:29,column:9}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_b3j0fc8kq.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const Microgrammar_1=(cov_b3j0fc8kq.s[1]++,require("@atomist/microgrammar/Microgrammar"));const PatternMatch_1=(cov_b3j0fc8kq.s[2]++,require("@atomist/microgrammar/PatternMatch"));/**
 * Use a microgrammar to parse the Cloud Foundry log to extract the endpoint
 * url if found. Look for urls: or routes: style exposure in log.
 */function parseCloudFoundryLogForEndpoint(cfLog){cov_b3j0fc8kq.f[0]++;const r=(cov_b3j0fc8kq.s[3]++,(cov_b3j0fc8kq.b[0][0]++,routes.firstMatch(cfLog))||(cov_b3j0fc8kq.b[0][1]++,urls.firstMatch(cfLog)));cov_b3j0fc8kq.s[4]++;if(PatternMatch_1.isPatternMatch(r)){cov_b3j0fc8kq.b[1][0]++;cov_b3j0fc8kq.s[5]++;if(!r.endpoint.startsWith("http://")){cov_b3j0fc8kq.b[2][0]++;cov_b3j0fc8kq.s[6]++;return"http://"+r.endpoint;}else{cov_b3j0fc8kq.b[2][1]++;}cov_b3j0fc8kq.s[7]++;return r.endpoint;}else{cov_b3j0fc8kq.b[1][1]++;}cov_b3j0fc8kq.s[8]++;return undefined;}cov_b3j0fc8kq.s[9]++;exports.parseCloudFoundryLogForEndpoint=parseCloudFoundryLogForEndpoint;// The cf cli changed from returning urls to routes in a recent version
const routes=(cov_b3j0fc8kq.s[10]++,Microgrammar_1.Microgrammar.fromString("routes:${endpoint}",{endpoint:/[http:\/\/]?[a-zA-Z0-9\-.]+/}));// Old style urls value
const urls=(cov_b3j0fc8kq.s[11]++,Microgrammar_1.Microgrammar.fromString("urls:${endpoint}",{endpoint:/[http:\/\/]?[a-zA-Z0-9\-.]+/}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9kZXBsb3kvcGNmL2Nsb3VkRm91bmRyeUxvZ1BhcnNlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9kZXBsb3kvcGNmL2Nsb3VkRm91bmRyeUxvZ1BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBRUgscUVBQWtFO0FBQ2xFLHFFQUFvRTtBQUVwRTs7O0dBR0c7QUFDSCx5Q0FBZ0QsS0FBYTtJQUN6RCxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsSUFBSSw2QkFBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ25CLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNuQyxPQUFPLFNBQVMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQztBQVRELDBFQVNDO0FBRUQsdUVBQXVFO0FBQ3ZFLE1BQU0sTUFBTSxHQUFHLDJCQUFZLENBQUMsVUFBVSxDQUNsQyxvQkFBb0IsRUFDcEI7SUFDSSxRQUFRLEVBQUUsNkJBQTZCO0NBQzFDLENBQ0osQ0FBQztBQUVGLHVCQUF1QjtBQUN2QixNQUFNLElBQUksR0FBRywyQkFBWSxDQUFDLFVBQVUsQ0FDaEMsa0JBQWtCLEVBQ2xCO0lBQ0ksUUFBUSxFQUFFLDZCQUE2QjtDQUMxQyxDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggQXRvbWlzdCwgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBNaWNyb2dyYW1tYXIgfSBmcm9tIFwiQGF0b21pc3QvbWljcm9ncmFtbWFyL01pY3JvZ3JhbW1hclwiO1xuaW1wb3J0IHsgaXNQYXR0ZXJuTWF0Y2ggfSBmcm9tIFwiQGF0b21pc3QvbWljcm9ncmFtbWFyL1BhdHRlcm5NYXRjaFwiO1xuXG4vKipcbiAqIFVzZSBhIG1pY3JvZ3JhbW1hciB0byBwYXJzZSB0aGUgQ2xvdWQgRm91bmRyeSBsb2cgdG8gZXh0cmFjdCB0aGUgZW5kcG9pbnRcbiAqIHVybCBpZiBmb3VuZC4gTG9vayBmb3IgdXJsczogb3Igcm91dGVzOiBzdHlsZSBleHBvc3VyZSBpbiBsb2cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNsb3VkRm91bmRyeUxvZ0ZvckVuZHBvaW50KGNmTG9nOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHIgPSByb3V0ZXMuZmlyc3RNYXRjaChjZkxvZykgfHwgdXJscy5maXJzdE1hdGNoKGNmTG9nKTtcbiAgICBpZiAoaXNQYXR0ZXJuTWF0Y2gocikpIHtcbiAgICAgICAgaWYgKCFyLmVuZHBvaW50LnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJodHRwOi8vXCIgKyByLmVuZHBvaW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByLmVuZHBvaW50O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vLyBUaGUgY2YgY2xpIGNoYW5nZWQgZnJvbSByZXR1cm5pbmcgdXJscyB0byByb3V0ZXMgaW4gYSByZWNlbnQgdmVyc2lvblxuY29uc3Qgcm91dGVzID0gTWljcm9ncmFtbWFyLmZyb21TdHJpbmc8e2VuZHBvaW50OiBzdHJpbmd9PihcbiAgICBcInJvdXRlczoke2VuZHBvaW50fVwiLFxuICAgIHtcbiAgICAgICAgZW5kcG9pbnQ6IC9baHR0cDpcXC9cXC9dP1thLXpBLVowLTlcXC0uXSsvLFxuICAgIH0sXG4pO1xuXG4vLyBPbGQgc3R5bGUgdXJscyB2YWx1ZVxuY29uc3QgdXJscyA9IE1pY3JvZ3JhbW1hci5mcm9tU3RyaW5nPHtlbmRwb2ludDogc3RyaW5nfT4oXG4gICAgXCJ1cmxzOiR7ZW5kcG9pbnR9XCIsXG4gICAge1xuICAgICAgICBlbmRwb2ludDogL1todHRwOlxcL1xcL10/W2EtekEtWjAtOVxcLS5dKy8sXG4gICAgfSxcbik7XG4iXX0=