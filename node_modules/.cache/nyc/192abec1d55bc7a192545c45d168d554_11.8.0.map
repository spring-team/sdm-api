{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/lifecycleHelpers.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/lifecycleHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as slack from \"@atomist/slack-messages/SlackMessages\";\nimport * as _ from \"lodash\";\n\n// This file copied from atomist/lifecycle-automation\n\n/**\n * Safely truncate the first line of a commit message to 50 characters\n * or less.  Only count printable characters, i.e., not link URLs or\n * markup.\n */\nexport function truncateCommitMessage(message: string, repo: any): string {\n    const title = message.split(\"\\n\")[0];\n    const escapedTitle = slack.escape(title);\n    const linkedTitle = linkIssues(escapedTitle, repo);\n\n    if (linkedTitle.length <= 50) {\n        return linkedTitle;\n    }\n\n    const splitRegExp = /(&(?:[gl]t|amp);|<.*?\\||>)/;\n    const titleParts = linkedTitle.split(splitRegExp);\n    let truncatedTitle = \"\";\n    let addNext = 1;\n    let i;\n    for (i = 0; i < titleParts.length; i++) {\n        let newTitle = truncatedTitle;\n        if (i % 2 === 0) {\n            newTitle += titleParts[i];\n        } else if (/^&(?:[gl]t|amp);$/.test(titleParts[i])) {\n            newTitle += \"&\";\n        } else if (/^<.*\\|$/.test(titleParts[i])) {\n            addNext = 2;\n            continue;\n        } else if (titleParts[i] === \">\") {\n            addNext = 1;\n            continue;\n        }\n        if (newTitle.length > 50) {\n            const l = 50 - newTitle.length;\n            titleParts[i] = titleParts[i].slice(0, l) + \"...\";\n            break;\n        }\n        truncatedTitle = newTitle;\n    }\n    return titleParts.slice(0, i + addNext).join(\"\");\n}\n\n/**\n * Generate GitHub repository \"slug\", i.e., owner/repo.\n *\n * @param repo repository with .owner and .name\n * @return owner/name string\n */\nexport function repoSlug(repo: RepoInfo): string {\n    return `${repo.owner}/${repo.name}`;\n}\n\nexport function htmlUrl(repo: RepoInfo): string {\n    if (repo.org && repo.org.provider && repo.org.provider.url) {\n        let providerUrl = repo.org.provider.url;\n        if (providerUrl.slice(-1) === \"/\") {\n            providerUrl = providerUrl.slice(0, -1);\n        }\n        return providerUrl;\n    } else {\n        return \"https://github.com\";\n    }\n}\n\nexport const DefaultGitHubApiUrl = \"https://api.github.com/\";\n\nexport function apiUrl(repo: any): string {\n    if (repo.org && repo.org.provider && repo.org.provider.url) {\n        let providerUrl = repo.org.provider.apiUrl;\n        if (providerUrl.slice(-1) === \"/\") {\n            providerUrl = providerUrl.slice(0, -1);\n        }\n        return providerUrl;\n    } else {\n        return DefaultGitHubApiUrl;\n    }\n}\n\nexport function userUrl(repo: any, login: string): string {\n    return `${htmlUrl(repo)}/${login}`;\n}\n\nexport interface RepoInfo {\n    owner: string;\n    name: string;\n    org?: {\n        provider: { url?: string },\n    };\n}\n\nexport function avatarUrl(repo: any, login: string): string {\n    if (repo.org != null && repo.org.provider != null && repo.org.provider.url != null) {\n        return `${htmlUrl(repo)}/avatars/${login}`;\n    } else {\n        return `https://avatars.githubusercontent.com/${login}`;\n    }\n}\n\nexport function commitUrl(repo: RepoInfo, commit: any): string {\n    return `${htmlUrl(repo)}/${repoSlug(repo)}/commit/${commit.sha}`;\n}\n\n/**\n * If the URL is of an image, return a Slack message attachment that\n * will render that image.  Otherwise return null.\n *\n * @param url full URL\n * @return Slack message attachment for image or null\n */\nfunction urlToImageAttachment(url: string): slack.Attachment {\n    const imageRegExp = /[^\\/]+\\.(?:png|jpe?g|gif|bmp)$/i;\n    const imageMatch = imageRegExp.exec(url);\n    if (imageMatch) {\n        const image = imageMatch[0];\n        return {\n            text: image,\n            image_url: url,\n            fallback: image,\n        };\n    } else {\n        return null;\n    }\n}\n\n/**\n * Find image URLs in a message body, returning an array of Slack\n * message attachments, one for each image.  It expects the message to\n * be in Slack message markup.\n *\n * @param body message body\n * @return array of Slack message Attachments with the `image_url` set\n *         to the URL of the image and the `text` and `fallback` set\n *         to the image name.\n */\nexport function extractImageUrls(body: string): slack.Attachment[] {\n    const slackLinkRegExp = /<(https?:\\/\\/.*?)(?:\\|.*?)?>/g;\n    // inspired by https://stackoverflow.com/a/6927878/5464956\n    const urlRegExp = /\\bhttps?:\\/\\/[^\\s<>\\[\\]]+[^\\s`!()\\[\\]{};:'\".,<>?Â«Â»ââââ]/gi;\n    const attachments: slack.Attachment[] = [];\n    const bodyParts = body.split(slackLinkRegExp);\n    for (let i = 0; i < bodyParts.length; i++) {\n        if (i % 2 === 0) {\n            let match: RegExpExecArray;\n            // tslint:disable-next-line:no-conditional-assignment\n            while (match = urlRegExp.exec(bodyParts[i])) {\n                const url = match[0];\n                const attachment = urlToImageAttachment(url);\n                if (attachment) {\n                    attachments.push(attachment);\n                }\n            }\n        } else {\n            const url = bodyParts[i];\n            const attachment = urlToImageAttachment(url);\n            if (attachment) {\n                attachments.push(attachment);\n            }\n        }\n    }\n    const uniqueAttachments: slack.Attachment[] = [];\n    attachments.forEach(a => {\n        if (!uniqueAttachments.some(ua => ua.image_url === a.image_url)) {\n            uniqueAttachments.push(a);\n        }\n    });\n    return uniqueAttachments;\n}\n\n/**\n * Find issue mentions in body and replace them with links.\n *\n * @param body message to modify\n * @param repo repository information\n * @return string with issue mentions replaced with links\n */\nexport function linkIssues(body: string, repo: any): string {\n    if (!body || body.length === 0) {\n        return body;\n    }\n\n    const splitter = /(\\[.+?\\](?:\\[.*?\\]|\\(.+?\\)|:\\s*http.*)|^```.*\\n[\\S\\s]*?^```\\s*\\n|<.+?>)/m;\n    const bodyParts = body.split(splitter);\n    const baseUrl = htmlUrl(repo);\n\n    for (let j = 0; j < bodyParts.length; j += 2) {\n        let newPart = bodyParts[j];\n        const allIssueMentions = getIssueMentions(newPart);\n        allIssueMentions.forEach(i => {\n            const iMatchPrefix = (i.indexOf(\"#\") === 0) ? `^|\\\\W` : repoIssueMatchPrefix;\n            const iRegExp = new RegExp(`(${iMatchPrefix})${i}(?!\\\\w)`, \"g\");\n            const iSlug = (i.indexOf(\"#\") === 0) ? `${repo.owner}/${repo.name}${i}` : i;\n            const iUrlPath = iSlug.replace(\"#\", \"/issues/\");\n            const iLink = slack.url(`${baseUrl}/${iUrlPath}`, i);\n            newPart = newPart.replace(iRegExp, `\\$1${iLink}`);\n        });\n        bodyParts[j] = newPart;\n    }\n\n    return bodyParts.join(\"\");\n}\n\nconst gitHubUserMatch = \"[a-zA-Z\\\\d]+(?:-[a-zA-Z\\\\d]+)*\";\n\n/**\n * Regular expression to find issue mentions.  There are capture\n * groups for the issue repository owner, repository name, and issue\n * number.  The capture groups for repository owner and name are\n * optional and therefore may be null, although if one is set, the\n * other should be as well.\n *\n * The rules for preceding characters is different for current repo\n * matches, e.g., \"#43\", and other repo matches, e.g., \"some/repo#44\".\n * Current repo matches allow anything but word characters to precede\n * them.  Other repo matches only allow a few other characters to\n * preceed them.\n */\nconst repoIssueMatchPrefix = \"^|[[\\\\s:({]\";\n// tslint:disable-next-line:max-line-length\nconst issueMentionMatch = `(?:^|(?:${repoIssueMatchPrefix})(${gitHubUserMatch})\\/(${gitHubUserMatch})|\\\\W)#([1-9]\\\\d*)(?!\\\\w)`;\nconst issueMentionRegExp = new RegExp(issueMentionMatch, \"g\");\n\n/**\n * Find all issue mentions and return an array of unique issue\n * mentions as \"#3\" and \"owner/repo#5\".\n *\n * @param msg string that may contain mentions\n * @return unique list of issue mentions as #N or O/R#N\n */\nexport function getIssueMentions(msg: string = \"\"): string[] {\n    const allMentions: string[] = [];\n    let matches: string[];\n    // tslint:disable-next-line:no-conditional-assignment\n    while (matches = issueMentionRegExp.exec(msg)) {\n        const owner = matches[1];\n        const repo = matches[2];\n        const issue = matches[3];\n        const slug = (owner && repo) ? `${owner}/${repo}` : \"\";\n        allMentions.push(`${slug}#${issue}`);\n    }\n\n    return _.uniq(allMentions);\n}\n"]}