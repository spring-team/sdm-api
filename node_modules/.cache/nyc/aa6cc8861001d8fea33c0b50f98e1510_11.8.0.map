{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/RolarProgressLogTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/RolarProgressLogTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as assert from \"power-assert\";\nimport {RolarProgressLog} from \"../../../src/common/log/RolarProgressLog\";\n\ndescribe(\"RolarProgressLog\", () => {\n\n    function* fakeTimestampGenerator() {\n        let index = 0;\n        while (true) {\n            yield new Date(index++);\n        }\n    }\n\n    it(\"should be available if returning http 200\", async () => {\n        const axiosInstance = axios.create();\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator(), { retries: 0 },\n            axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onHead(\"http://fakehost/api/logs\").replyOnce(200);\n\n        assert.equal(await log.isAvailable(), true);\n    });\n\n    it(\"should not be available if returning http 404\", async () => {\n        const axiosInstance = axios.create();\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator(), { retries: 0 },\n            axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onHead(\"http://fakehost/api/logs\").replyOnce(404);\n\n        assert.equal(await log.isAvailable(), false);\n    });\n\n    it(\"should write logs to memory\", async () => {\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator());\n\n        log.write(\"I'm a lumberjack and I'm OK\");\n        log.write(\"I sleep all night and I work all day\");\n\n        assert.deepEqual((log as any).localLogs, [\n            {\n                level: \"info\",\n                message: \"I'm a lumberjack and I'm OK\",\n                timestamp: \"01/01/1970 00:00:00.000\",\n            },\n            {\n                level: \"info\",\n                message: \"I sleep all night and I work all day\",\n                timestamp: \"01/01/1970 00:00:00.001\",\n            },\n        ]);\n    });\n\n    it(\"should flush logs\", async () => {\n        const axiosInstance = axios.create();\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator(), { retries: 0 },\n            axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onPost(\"http://fakehost/api/logs/test\")\n            .replyOnce(config => {\n            const expectedRequest = [\n                {\n                    level: \"info\",\n                    message: \"He's a lumberjack and he's OK\",\n                    timestamp: \"01/01/1970 00:00:00.000\",\n                },\n                {\n                    level: \"info\",\n                    message: \"He sleeps all night and he works all day\",\n                    timestamp: \"01/01/1970 00:00:00.001\",\n                },\n            ];\n            const actualRequest = JSON.parse(config.data).content;\n            assert.deepEqual(actualRequest, expectedRequest);\n            return [200];\n        });\n\n        log.write(\"He's a lumberjack and he's OK\");\n        log.write(\"He sleeps all night and he works all day\");\n        await log.flush();\n\n        assert.deepEqual((log as any).localLogs, []);\n    });\n\n    it(\"should not clear logs if flush fails\", async () => {\n        const axiosInstance = axios.create();\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator(), { retries: 0 },\n            axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onPost(\"http://fakehost/api/logs/test\")\n            .replyOnce(404);\n\n        log.write(\"I cut down trees, I eat my lunch\");\n        log.write(\"I go to the lavatory\");\n        await log.flush();\n\n        assert.deepEqual((log as any).localLogs, [\n            {\n                level: \"info\",\n                message: \"I cut down trees, I eat my lunch\",\n                timestamp: \"01/01/1970 00:00:00.000\",\n            },\n            {\n                level: \"info\",\n                message: \"I go to the lavatory\",\n                timestamp: \"01/01/1970 00:00:00.001\",\n            },\n        ]);\n    });\n\n    it(\"should close logs\", async () => {\n        const axiosInstance = axios.create();\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"info\", fakeTimestampGenerator(), { retries: 0 },\n            axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onPost(\"http://fakehost/api/logs/test?closed=true\")\n            .replyOnce(config => {\n                const expectedRequest = [\n                    {\n                        level: \"info\",\n                        message: \"On Wednesdays I go shopping and have buttered scones for tea\",\n                        timestamp: \"01/01/1970 00:00:00.000\",\n                    },\n                ];\n                const actualRequest = JSON.parse(config.data).content;\n                assert.deepEqual(actualRequest, expectedRequest);\n                return [200];\n            });\n\n        log.write(\"On Wednesdays I go shopping and have buttered scones for tea\");\n        await log.close();\n\n        assert.deepEqual((log as any).localLogs, []);\n    });\n\n    it(\"should flush logs automatically\", async () => {\n        const axiosInstance = axios.create();\n        const smallBufferLog = new RolarProgressLog(\"http://fakehost\", [\"test\"], 50, \"info\", fakeTimestampGenerator(),\n            { retries: 0 }, axiosInstance);\n        const mockAxios = new MockAdapter(axiosInstance);\n        mockAxios.onPost(\"http://fakehost/api/logs/test\")\n            .replyOnce(config => {\n                const expectedRequest = [\n                    {\n                        level: \"info\",\n                        message: \"He cuts down trees, he eats his lunch\",\n                        timestamp: \"01/01/1970 00:00:00.000\",\n                    },\n                    {\n                        level: \"info\",\n                        message: \"He goes to the lavatory\",\n                        timestamp: \"01/01/1970 00:00:00.001\",\n                    },\n                ];\n                const actualRequest = JSON.parse(config.data).content;\n                assert.deepEqual(actualRequest, expectedRequest);\n                return [200];\n            });\n\n        smallBufferLog.write(\"He cuts down trees, he eats his lunch\");\n        smallBufferLog.write(\"He goes to the lavatory\");\n        smallBufferLog.write(\"On Wednesdays he goes shopping and has buttered scones for tea\");\n\n        assert.deepEqual((smallBufferLog as any).localLogs, []);\n    });\n\n    it(\"should provide a link to the log\", async () => {\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\", \"it\"], 10000, \"info\", fakeTimestampGenerator());\n\n        assert.equal(log.url, \"http://fakehost/logs/test/it\");\n    });\n\n    it(\"should log as debug\", async () => {\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"debug\", fakeTimestampGenerator());\n\n        log.write(\"I'm a lumberjack and I'm OK\");\n        log.write(\"I sleep all night and I work all day\");\n\n        assert.deepEqual((log as any).localLogs, [\n            {\n                level: \"debug\",\n                message: \"I'm a lumberjack and I'm OK\",\n                timestamp: \"01/01/1970 00:00:00.000\",\n            },\n            {\n                level: \"debug\",\n                message: \"I sleep all night and I work all day\",\n                timestamp: \"01/01/1970 00:00:00.001\",\n            },\n        ]);\n    });\n\n    it(\"should log without timestamp\", async () => {\n        const log = new RolarProgressLog(\"http://fakehost\", [\"test\"], 10000, \"\", null);\n\n        log.write(\"I'm a lumberjack and I'm OK\");\n        log.write(\"I sleep all night and I work all day\");\n\n        assert.deepEqual((log as any).localLogs, [\n            {\n                level: \"\",\n                message: \"I'm a lumberjack and I'm OK\",\n                timestamp: \"\",\n            },\n            {\n                level: \"\",\n                message: \"I sleep all night and I work all day\",\n                timestamp: \"\",\n            },\n        ]);\n    });\n\n});\n"]}