{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/projectPredicateUtilsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/projectPredicateUtilsTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\n\nimport * as assert from \"power-assert\";\nimport {\n    allPredicatesSatisfied,\n    anyPredicateSatisfied, notPredicate,\n} from \"../../../../src/common/listener/support/pushtest/projectPredicateUtils\";\nimport { FalseProjectPredicate, TrueProjectPredicate } from \"./pushTestUtilsTest\";\n\nconst id = new GitHubRepoRef(\"atomist\", \"github-sdm\");\n\ndescribe(\"projectPredicatesUtilsTest\", () => {\n\n    describe(\"not\", () => {\n\n        it(\"should handle one true\", async () => {\n            const r = await notPredicate(TrueProjectPredicate)({id} as any as Project);\n            assert(!r);\n        });\n\n        it(\"should handle one false\", async () => {\n            const r = await notPredicate(FalseProjectPredicate)({id} as any as Project);\n            assert(r);\n        });\n\n    });\n\n    describe(\"allPredicatesSatisfied\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await allPredicatesSatisfied(TrueProjectPredicate)({id} as any as Project);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await allPredicatesSatisfied(TrueProjectPredicate, TrueProjectPredicate)({id} as any as Project);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await allPredicatesSatisfied(TrueProjectPredicate, FalseProjectPredicate)({id} as any as Project);\n                assert(!r);\n            });\n        });\n\n    describe(\"anyPredicateSatisfied\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await anyPredicateSatisfied(TrueProjectPredicate)({id} as any as Project);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await anyPredicateSatisfied(TrueProjectPredicate, TrueProjectPredicate)({id} as any as Project);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await anyPredicateSatisfied(TrueProjectPredicate, FalseProjectPredicate)({id} as any as Project);\n                assert(r);\n            });\n\n            it(\"should handle two false\", async () => {\n                const r = await anyPredicateSatisfied(FalseProjectPredicate, FalseProjectPredicate)({id} as any as Project);\n                assert(!r);\n            });\n\n    });\n\n});\n"]}