{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/softwareDeliveryMachineTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/softwareDeliveryMachineTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,6DAAoE;AACpE,yFAAsF;AACtF,oFAA6E;AAC7E,gGAAqF;AACrF,2EAAiF;AAEjF,yFAA8E;AAC9E,uCAAuC;AAIvC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAElC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAElC,EAAE,CAAC,mBAAmB,EAAE,GAAS,EAAE;YAC/B,MAAM,GAAG,GAAG,IAAI,iDAAuB,CAAC,SAAS,EAC7C,8DAAkC,EAClC,2BAAiB,CAAC,yBAAO,CAAC;iBACrB,OAAO,CAAC,YAAY,CAAC;iBACrB,QAAQ,CAAC,qBAAO,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,6BAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAoB,CAAC,cAAc,CAAmB,CAAC;YAC5H,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;YAC7C,MAAM,EAAE,GAAqB,GAAS,EAAE,gDAAC,OAAA,SAAS,CAAA,GAAA,CAAC;YACnD,MAAM,GAAG,GAAG,IAAI,iDAAuB,CAAC,SAAS,EAC7C,8DAAkC,EAClC,2BAAiB,CAAC,yBAAO,CAAC;iBACrB,OAAO,CAAC,YAAY,CAAC;iBACrB,QAAQ,CAAC,qBAAO,CAAC,CAAC,CAAC;YAC5B,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;YAC7B,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,6BAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAoB,CAAC,cAAc,CAAmB,CAAC;YAC5H,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAA,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { whenPushSatisfies } from \"../../src/blueprint/dsl/goalDsl\";\nimport { SoftwareDeliveryMachine } from \"../../src/blueprint/SoftwareDeliveryMachine\";\nimport { NoGoals } from \"../../src/common/delivery/goals/common/commonGoals\";\nimport { AnyPush } from \"../../src/common/listener/support/pushtest/commonPushTests\";\nimport { fakeSoftwareDeliveryMachineOptions } from \"./sdmGoalImplementationTest\";\n\nimport { toFactory } from \"@atomist/automation-client/util/constructionUtils\";\nimport * as assert from \"power-assert\";\nimport { GoalsSetListener } from \"../../src/common/listener/GoalsSetListener\";\nimport { SetGoalsOnPush } from \"../../src/handlers/events/delivery/goals/SetGoalsOnPush\";\n\ndescribe(\"SDM handler creation\", () => {\n\n    describe(\"emits event handlers\", () => {\n\n        it(\"emits goal setter\", async () => {\n            const sdm = new SoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .itMeans(\"do nothing\")\n                    .setGoals(NoGoals));\n            assert(sdm.eventHandlers.length > 0);\n            const sgop = sdm.eventHandlers.map(h => toFactory(h)()).find(h => !!(h as SetGoalsOnPush).goalsListeners) as SetGoalsOnPush;\n            assert(sgop.goalsListeners.length >= 0);\n        });\n\n        it(\"emits goal setter with listener\", async () => {\n            const gl: GoalsSetListener = async () => undefined;\n            const sdm = new SoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .itMeans(\"do nothing\")\n                    .setGoals(NoGoals));\n            sdm.addGoalsSetListeners(gl);\n            assert(sdm.eventHandlers.length > 0);\n            const sgop = sdm.eventHandlers.map(h => toFactory(h)()).find(h => !!(h as SetGoalsOnPush).goalsListeners) as SetGoalsOnPush;\n            assert(sgop.goalsListeners.length >= 1);\n        });\n\n    });\n});\n"]}