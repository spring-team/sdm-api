{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/autofix/AutofixRegistration.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/autofix/AutofixRegistration.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,4FAAkH;AAelH;;;;;;;GAOG;AACH,mCAA0C,GAMzC;IACG,MAAM,WAAW,GAAG,wBAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzC,OAAO;QACH,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,QAAQ,EAAE,GAAG,CAAC,QAAQ;QACtB,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,MAAM,EAAE,CAAM,GAAG,EAAC,EAAE;YAChB,0BAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7E,OAAO,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAA;KACJ,CAAC;AACN,CAAC;AAjBD,8DAiBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { AnyProjectEditor, EditResult, toEditor } from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { PushTest } from \"../../../listener/PushTest\";\nimport { PushReactionRegistration, SelectiveCodeActionOptions } from \"../PushReactionRegistration\";\n\nexport interface AutofixRegistrationOptions extends SelectiveCodeActionOptions {\n\n    ignoreFailure: boolean;\n}\n\nexport interface AutofixRegistration extends PushReactionRegistration<EditResult> {\n\n    options?: AutofixRegistrationOptions;\n\n}\n\n/**\n * Create an autofix from an existing editor. An editor for autofix\n * should not rely on parameters being passed in. An existing editor can be wrapped\n * to use predefined parameters.\n * Any use of MessageClient.respond in an editor used in an autofix will be redirected to\n * linked channels as autofixes are normally invoked in an EventHandler and EventHandlers\n * do not support respond. Be sure to set parameters if they are required by your editor.\n */\nexport function editorAutofixRegistration(use: {\n    name: string,\n    editor: AnyProjectEditor,\n    pushTest?: PushTest,\n    options?: AutofixRegistrationOptions,\n    parameters?: any,\n}): AutofixRegistration {\n    const editorToUse = toEditor(use.editor);\n    return {\n        name: use.name,\n        pushTest: use.pushTest,\n        options: use.options,\n        action: async cri => {\n            logger.debug(\"About to edit using autofix editor %s\", use.editor.toString());\n            return editorToUse(cri.project, cri.context, use.parameters);\n        },\n    };\n}\n"]}