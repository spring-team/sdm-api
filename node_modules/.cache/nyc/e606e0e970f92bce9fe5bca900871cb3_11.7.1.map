{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/maven/effectivePomExtractor.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/maven/effectivePomExtractor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,mFAA+E;AAE/E,+BAAiC;AACjC,iCAAiC;AAEjC,MAAM,OAAO,GAAG,mBAAmB,CAAC;AAEpC;;;;;GAKG;AACH,6BAA0C,CAAe;;QACrD,IAAI;YACA,MAAM,wBAAU,CAAC,mCAAmC,OAAO,EAAE,EAAE,EAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC;YACjF,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACpC,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,MAAM,gBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;YACxD,OAAO,MAAM,CAAC;SACjB;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,GAAG,CAAC;SACb;IACL,CAAC;CAAA;AAXD,kDAWC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { runCommand } from \"@atomist/automation-client/action/cli/commandLine\";\nimport { LocalProject } from \"@atomist/automation-client/project/local/LocalProject\";\nimport { promisify } from \"util\";\nimport * as xml2js from \"xml2js\";\n\nconst XmlFile = \"effective-pom.xml\";\n\n/**\n * Parse the effective POM generated by mvn help:effective-pom and return\n * the raw XML structure, in JavaScript\n * @param {LocalProject} p\n * @return {Promise<any>}\n */\nexport async function extractEffectivePom(p: LocalProject): Promise<any> {\n    try {\n        await runCommand(`mvn help:effective-pom -Doutput=${XmlFile}`, {cwd: p.baseDir});\n        const f = await p.findFile(XmlFile);\n        const xml = await f.getContent();\n        const parser = new xml2js.Parser();\n        const parsed = await promisify(parser.parseString)(xml);\n        return parsed;\n    } catch (err) {\n        throw err;\n    }\n}\n"]}