{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/RespondOnGoalCompletion.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/RespondOnGoalCompletion.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAGH,+FAAmF;AAEnF,kEASoC;AACpC,sEAAwE;AACxE,qGAA0H;AAE1H,8EAA8E;AAG9E,0DAA+D;AAE/D;;GAEG;AAEH,IAAa,uBAAuB,GAApC;IAKI,YAA6B,kBAAuC,EACvC,uBAAiD;QADjD,uBAAkB,GAAlB,kBAAkB,CAAqB;QACvC,4BAAuB,GAAvB,uBAAuB,CAA0B;IAC9E,CAAC;IAEY,MAAM,CAAC,KAAqD,EACrD,OAAuB;;YACvC,MAAM,OAAO,GAAY,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAY,CAAC;YAE1D,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE,EAAE,+BAA+B;gBAC7F,0BAAM,CAAC,KAAK,CAAC,qDAAqD,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;gBACpF,OAAO,OAAO,CAAC,OAAO,CAAC,2BAAO,CAAC,CAAC;aACnC;YAED,MAAM,MAAM,GAAG,MAAM,0CAAqB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,QAAQ,GAAc,gEAA0B,CAClD,MAAM,wCAAmB,CAAC,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAc,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAE5F,IAAI,CAAC,kBAA0B,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;YAE1D,MAAM,GAAG,GAAqC;gBAC1C,EAAE;gBACF,OAAO;gBACP,WAAW,EAAE,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC;gBACzE,eAAe,EAAE,oCAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;gBACvD,QAAQ;gBACR,aAAa,EAAE,OAAO;aACzB,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjE,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAnCG;IADC,yBAAK,CAAC,OAAO,CAAC;;sDACM;AAHZ,uBAAuB;IADnC,gCAAY,CAAC,2CAA2C,EAAE,sBAAY,CAAC,uBAAuB,CAAC,CAAC;;GACpF,uBAAuB,CAsCnC;AAtCY,0DAAuB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\nimport { sumSdmGoalEventsByOverride } from \"./RequestDownstreamGoalsOnGoalSuccess\";\n\nimport {\n    EventFired,\n    EventHandler,\n    HandleEvent,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Success,\n    Value,\n} from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { fetchCommitForSdmGoal, fetchGoalsForCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { GoalCompletionListener, GoalCompletionListenerInvocation } from \"../../../../common/listener/GoalsSetListener\";\nimport { addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { SdmGoal } from \"../../../../ingesters/sdmGoalIngester\";\nimport { OnAnyCompletedSdmGoal } from \"../../../../typings/types\";\nimport { repoRefFromPush } from \"../../../../util/git/repoRef\";\n\n/**\n * Respond to a failure or success status by running listeners\n */\n@EventHandler(\"Run a listener on goal failure or success\", subscription(\"OnAnyCompletedSdmGoal\"))\nexport class RespondOnGoalCompletion implements HandleEvent<OnAnyCompletedSdmGoal.Subscription> {\n\n    @Value(\"token\")\n    public token: string;\n\n    constructor(private readonly credentialsFactory: CredentialsResolver,\n                private readonly goalCompletionListeners: GoalCompletionListener[]) {\n    }\n\n    public async handle(event: EventFired<OnAnyCompletedSdmGoal.Subscription>,\n                        context: HandlerContext): Promise<HandlerResult> {\n        const sdmGoal: SdmGoal = event.data.SdmGoal[0] as SdmGoal;\n\n        if (sdmGoal.state !== \"failure\" && sdmGoal.state !== \"success\") { // atomisthq/automation-api#395\n            logger.debug(`********* completion reported when the state was=[${sdmGoal.state}]`);\n            return Promise.resolve(Success);\n        }\n\n        const commit = await fetchCommitForSdmGoal(context, sdmGoal);\n        const push = commit.pushes[0];\n        const id = repoRefFromPush(push);\n        const allGoals: SdmGoal[] = sumSdmGoalEventsByOverride(\n            await fetchGoalsForCommit(context, id, sdmGoal.repo.providerId) as SdmGoal[], [sdmGoal]);\n\n        (this.credentialsFactory as any).githubToken = this.token;\n\n        const gsi: GoalCompletionListenerInvocation = {\n            id,\n            context,\n            credentials: this.credentialsFactory.eventHandlerCredentials(context, id),\n            addressChannels: addressChannelsFor(push.repo, context),\n            allGoals,\n            completedGoal: sdmGoal,\n        };\n\n        await Promise.all(this.goalCompletionListeners.map(l => l(gsi)));\n        return Success;\n    }\n}\n"]}