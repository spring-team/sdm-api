{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnFirstPushToRepo.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnFirstPushToRepo.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAAmI;AACnI,sEAAwE;AACxE,sGAAmG;AACnG,4BAA4B;AAE5B,2EAAyF;AAEzF,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,iBAAiB,GAA9B;IAGI,YAA6B,OAAuB,EACvB,kBAAuC;QADvC,YAAO,GAAP,OAAO,CAAgB;QACvB,uBAAkB,GAAlB,kBAAkB,CAAqB;IACpE,CAAC;IAEY,MAAM,CAAC,KAAwD,EACxD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEhC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;gBACf,0BAAM,CAAC,KAAK,CAAC,6BAA6B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC5D,OAAO,2BAAO,CAAC;aAClB;YAED,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACzC,0BAAM,CAAC,KAAK,CAAC,2CAA2C,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC1E,OAAO,2BAAO,CAAC;aAClB;YAED,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,0CAA0C,CAAC,CAAC;YAC3E,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;YAC/D,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,IAAI,eAAgC,CAAC;YACrC,IAAI,CAAC,UAAU,EAAE;gBACb,0BAAM,CAAC,IAAI,CAAC,mEAAmE,EAAE,EAAE,CAAC,CAAC;gBACrF,eAAe,GAAG,mCAAiB,CAAC;aACvC;iBAAM;gBACH,eAAe,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;aAC5E;YAED,MAAM,OAAO,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACnE,MAAM,UAAU,GAA2B;gBACvC,EAAE;gBACF,OAAO;gBACP,eAAe;gBACf,WAAW;gBACX,OAAO;gBACP,IAAI;aACP,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO;iBAC3B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAC3B,CAAC;YACF,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAhDY,iBAAiB;IAD7B,gCAAY,CAAC,kBAAkB,EAAE,sBAAY,CAAC,mBAAmB,CAAC,CAAC;;GACvD,iBAAiB,CAgD7B;AAhDY,8CAAiB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport * as _ from \"lodash\";\nimport { PushListener, PushListenerInvocation } from \"../../../common/listener/PushListener\";\nimport {AddressChannels, AddressNoChannels} from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A new repo has been created, and it has some code in it.\n */\n@EventHandler(\"On repo creation\", subscription(\"OnFirstPushToRepo\"))\nexport class OnFirstPushToRepo\n    implements HandleEvent<schema.OnFirstPushToRepo.Subscription> {\n\n    constructor(private readonly actions: PushListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<schema.OnFirstPushToRepo.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const push = event.data.Push[0];\n\n        if (!!push.before) {\n            logger.debug(`Done: Not a new commit on ${push.repo.name}`);\n            return Success;\n        }\n\n        if (push.branch !== push.repo.defaultBranch) {\n            logger.debug(`Done: Not push to the default branch on ${push.repo.name}`);\n            return Success;\n        }\n\n        const screenName = _.get(push, \"after.committer.person.chatId.screenName\");\n        const id = toRemoteRepoRef(push.repo, { sha: push.after.sha });\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        let addressChannels: AddressChannels;\n        if (!screenName) {\n            logger.warn(\"Warning: Cannot get screen name of committer for first push on %j\", id);\n            addressChannels = AddressNoChannels;\n        } else {\n            addressChannels = m => context.messageClient.addressUsers(m, screenName);\n        }\n\n        const project = await GitCommandGitProject.cloned(credentials, id);\n        const invocation: PushListenerInvocation = {\n            id,\n            context,\n            addressChannels,\n            credentials,\n            project,\n            push,\n        };\n        await Promise.all(params.actions\n            .map(l => l(invocation)),\n        );\n        return Success;\n    }\n}\n"]}