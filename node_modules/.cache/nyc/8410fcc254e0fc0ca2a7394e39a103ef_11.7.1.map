{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/predicateUtils.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/predicateUtils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD;;GAEG;AACH,aAAuB,CAAsB;IACzC,OAAO;QACH,IAAI,EAAE,QAAQ,CAAC,CAAC,IAAI,GAAG;QACvB,OAAO,EAAE,CAAM,EAAE,EAAC,EAAE,gDAAC,OAAA,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA,GAAA;KAC9C,CAAC;AACN,CAAC;AALD,kBAKC;AAED;;;;;GAKG;AACH,sBAAgC,GAAG,UAAsC;IACrE,OAAO;QACH,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QAC9C,OAAO,EAAE,CAAM,GAAG,EAAC,EAAE;YACjB,MAAM,UAAU,GAAc,MAAM,OAAO,CAAC,GAAG,CAC3C,UAAU,CAAC,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;gBACtB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACrC,0BAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,SAAS,MAAM,EAAE,CAAC,CAAC;gBAC9D,OAAO,MAAM,CAAC;YAClB,CAAC,CAAA,CAAC,CACL,CAAC;YACF,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAA;KACJ,CAAC;AACN,CAAC;AAdD,oCAcC;AAED;;;;;GAKG;AACH,sBAAgC,GAAG,UAAsC;IACrE,OAAO;QACH,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QAC9C,OAAO,EAAE,CAAM,GAAG,EAAC,EAAE;YACjB,MAAM,UAAU,GAAc,MAAM,OAAO,CAAC,GAAG,CAC3C,UAAU,CAAC,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;gBACtB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACrC,0BAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,SAAS,MAAM,EAAE,CAAC,CAAC;gBAC9D,OAAO,MAAM,CAAC;YAClB,CAAC,CAAA,CAAC,CACL,CAAC;YACF,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CAAA;KACJ,CAAC;AAEN,CAAC;AAfD,oCAeC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { PredicateMapping } from \"../Mapping\";\n\n/**\n * Return the opposite of this predicate mapping\n */\nexport function not<F>(t: PredicateMapping<F>): PredicateMapping<F> {\n    return {\n        name: `not (${t.name})`,\n        mapping: async pi => !(await t.mapping(pi)),\n    };\n}\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * AND: Return true if all are satisfied\n * @param {PredicateMapping} predicates\n * @return {PredicateMapping}\n */\nexport function allSatisfied<F>(...predicates: Array<PredicateMapping<F>>): PredicateMapping<F> {\n    return {\n        name: predicates.map(g => g.name).join(\" && \"),\n        mapping: async pci => {\n            const allResults: boolean[] = await Promise.all(\n                predicates.map(async pt => {\n                    const result = await pt.mapping(pci);\n                    logger.debug(`Result of PushTest '${pt.name}' was ${result}`);\n                    return result;\n                }),\n            );\n            return !allResults.includes(false);\n        },\n    };\n}\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * OR: Return true if any is satisfied\n * @param {PredicateMapping} predicates\n * @return {PredicateMapping}\n */\nexport function anySatisfied<F>(...predicates: Array<PredicateMapping<F>>): PredicateMapping<F> {\n    return {\n        name: predicates.map(g => g.name).join(\" || \"),\n        mapping: async pci => {\n            const allResults: boolean[] = await Promise.all(\n                predicates.map(async pt => {\n                    const result = await pt.mapping(pci);\n                    logger.debug(`Result of PushTest '${pt.name}' was ${result}`);\n                    return result;\n                }),\n            );\n            return allResults.includes(true);\n        },\n    };\n\n}\n"]}