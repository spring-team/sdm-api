{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/fingerprint/node/packageLockFingerprinterTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/fingerprint/node/packageLockFingerprinterTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fingerprint } from \"@atomist/automation-client/project/fingerprint/Fingerprint\";\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport * as assert from \"power-assert\";\nimport { PushImpactListenerInvocation } from \"../../../../../../src\";\nimport { PackageLockFingerprinter } from \"../../../../../../src/common/delivery/code/fingerprint/node/PackageLockFingerprinter\";\n\ndescribe(\"package-lock.json\", () => {\n\n    const fingerprinter = new PackageLockFingerprinter();\n\n    it(\"should produce no fingerprint when no package-lock.json\", async () => {\n        const project = InMemoryProject.of();\n        const cri = {project} as any as PushImpactListenerInvocation;\n        const fp = await fingerprinter.action(cri);\n        assert.equal((fp as any[]).length, 0);\n    });\n\n    it(\"should produce fingerprint when package-lock.json found\", async () => {\n        const project = InMemoryProject.of(new InMemoryFile(\"package-lock.json\", valid1()));\n        const cri = {project} as any as PushImpactListenerInvocation;\n        const fp = await fingerprinter.action(cri) as Fingerprint;\n        assert.equal(fp.abbreviation, \"deps\");\n        assert(!!fp.sha);\n    });\n\n    it(\"should not detect change unless dependencies change\", async () => {\n        const project1 = InMemoryProject.of(new InMemoryFile(\"package-lock.json\", valid1({ lockfileVersion: 1})));\n        const cri1 = {project: project1} as any as PushImpactListenerInvocation;\n        const fp1 = await fingerprinter.action(cri1) as Fingerprint;\n\n        const project2 = InMemoryProject.of(new InMemoryFile(\"package-lock.json\", valid1({lockfileVersion: 2})));\n        const cri2 = {project: project2} as any as PushImpactListenerInvocation;\n        const fp2 = await fingerprinter.action(cri2) as Fingerprint;\n        assert.equal(fp1.sha, fp2.sha);\n    });\n\n    it(\"should detect change when dependencies change\", async () => {\n        const project1 = InMemoryProject.of(new InMemoryFile(\"package-lock.json\", valid1({antlrVersion: \"0.2.0\"})));\n        const cri1 = {project: project1} as any as PushImpactListenerInvocation;\n        const fp1 = await fingerprinter.action(cri1) as Fingerprint;\n\n        const project2 = InMemoryProject.of(new InMemoryFile(\"package-lock.json\", valid1({antlrVersion: \"0.2.1\"})));\n        const cri2 = {project: project2} as any as PushImpactListenerInvocation;\n        const fp2 = await fingerprinter.action(cri2) as Fingerprint;\n        assert.notEqual(fp1.sha, fp2.sha);\n    });\n\n});\n\n// tslint:disable\n\nfunction valid1(params: Partial<{lockfileVersion: number, antlrVersion: string}> = {}) {\n    const paramsToUse = {\n        lockfileVersion: 1,\n        antlrVersion: \"0.2.0\",\n        ...params,\n    };\n    return JSON.stringify({\n        \"name\": \"@atomist/sdm\",\n        \"version\": \"0.0.1\",\n        lockfileVersion: paramsToUse.lockfileVersion,\n        \"requires\": true,\n        \"dependencies\": {\n            \"@atomist/antlr\": {\n                \"version\": paramsToUse.antlrVersion,\n                \"resolved\": \"https://registry.npmjs.org/@atomist/antlr/-/antlr-0.2.0.tgz\",\n                \"integrity\": \"sha512-UM76Knaans8ZYn/4aKWx/EVnLqsjsFqnDuaObC08A0o7sr+m7xeBt3LyWfB2jTfIjXFztKG02DA9sHtGspAI/Q==\",\n                \"requires\": {\n                    \"@atomist/automation-client\": \"0.6.6\",\n                    \"antlr4ts\": \"0.4.1-alpha.0\",\n                    \"lodash\": \"4.17.5\"\n                }\n            }\n        }\n    }, null, 2);\n}\n"]}