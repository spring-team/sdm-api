{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/spi/log/logFactory.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/spi/log/logFactory.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,6BAKe;AACf,8FAAyF;AAGzF,oBAA2B,YAAqB,EAAE,gBAAyB;IACvE,IAAI,oBAAoB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,6BAAyB,CAAC,QAAQ,CAAC,CAAC;IAC/F,IAAI,YAAY,EAAE;QACd,0BAAM,CAAC,IAAI,CAAC,wBAAwB,GAAG,YAAY,CAAC,CAAC;QACrD,oBAAoB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;YAClD,OAAO,6BAAyB,CAC5B,IAAI,yDAA2B,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,EACjF,QAAQ,CACX,CAAC;QACN,CAAC,CAAC;KACL;IACD,OAAO,CAAO,OAAO,EAAE,OAAO,EAAE,EAAE;QAC9B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,MAAM,oBAAoB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,sBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;QACzG,OAAO,IAAI,yBAAqB,CAAC,IAAI,EAAE,MAAM,8BAA0B,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,aAAa,CAAC,CAAC;IAC9G,CAAC,CAAA,CAAC;AACN,CAAC;AAhBD,gCAgBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport {\n    createEphemeralProgressLog,\n    firstAvailableProgressLog,\n    LoggingProgressLog,\n    WriteToAllProgressLog,\n} from \"../..\";\nimport {DashboardDisplayProgressLog} from \"../../common/log/DashboardDisplayProgressLog\";\nimport { ProgressLogFactory } from \"./ProgressLog\";\n\nexport function logFactory(rolarBaseUrl?: string, dashboardBaseUrl?: string): ProgressLogFactory {\n    let persistentLogFactory = (context, sdmGoal, fallback) => firstAvailableProgressLog(fallback);\n    if (rolarBaseUrl) {\n        logger.info(\"Logging with Rolar at \" + rolarBaseUrl);\n        persistentLogFactory = (context, sdmGoal, fallback) => {\n            return firstAvailableProgressLog(\n                new DashboardDisplayProgressLog(dashboardBaseUrl, rolarBaseUrl, context, sdmGoal),\n                fallback,\n            );\n        };\n    }\n    return async (context, sdmGoal) => {\n        const name = sdmGoal.name;\n        const persistentLog = await persistentLogFactory(context, sdmGoal, new LoggingProgressLog(name, \"info\"));\n        return new WriteToAllProgressLog(name, await createEphemeralProgressLog(context, sdmGoal), persistentLog);\n    };\n}\n"]}