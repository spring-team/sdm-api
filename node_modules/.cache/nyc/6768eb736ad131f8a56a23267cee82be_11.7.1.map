{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/pushRulesTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/pushRulesTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\n\nimport * as assert from \"power-assert\";\nimport { PushTest, pushTest } from \"../../../../src/common/listener/PushTest\";\nimport { PushRules } from \"../../../../src/common/listener/support/PushRules\";\nimport { FalsePushTest, TruePushTest } from \"./pushTestUtilsTest\";\n\nexport const UndefinedPushTest: PushTest = pushTest(\"true\", async () => undefined);\nexport const NullPushTest: PushTest = pushTest(\"true\", async () => null);\n\ndescribe(\"PushRules\", () => {\n\n    it(\"should be undefined none\", async () => {\n        const pr = new PushRules<string>(\"t1\", []);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n    it(\"should match true\", async () => {\n        const pr = new PushRules(\"t2\", [TruePushTest]);\n        assert(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any));\n    });\n\n    it(\"should be undefined on false\", async () => {\n        const pr = new PushRules(\"t3\", [FalsePushTest]);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n    it(\"should not match undefined\", async () => {\n        const pr = new PushRules(\"t4\", [UndefinedPushTest]);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n    it(\"should match undefined and true\", async () => {\n        const pr = new PushRules(\"t5\", [UndefinedPushTest, TruePushTest]);\n        assert(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any));\n    });\n\n    it(\"should return undefined on null\", async () => {\n        const pr = new PushRules(\"t6\", [NullPushTest]);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n    it(\"should return undefined on null and true\", async () => {\n        const pr = new PushRules(\"t7\", [NullPushTest, TruePushTest]);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n    it(\"should return defined on true and null\", async () => {\n        const pr = new PushRules(\"t8\", [TruePushTest, NullPushTest]);\n        assert(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any));\n    });\n\n    it(\"should return undefined on false and null and true\", async () => {\n        const pr = new PushRules(\"t9\", [FalsePushTest, NullPushTest, TruePushTest]);\n        assert.equal(await pr.mapping({id: new GitHubRepoRef(\"a\", \"b\")} as any), undefined);\n    });\n\n});\n"]}