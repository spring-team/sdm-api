{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/pomParser.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/pomParser.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,+BAAiC;AACjC,iCAAiC;AAIpB,QAAA,sBAAsB,GAAsB,CAAM,CAAC,EAAC,EAAE;IAC/D,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,IAAI,CAAC,GAAG,EAAE;QACN,OAAO,SAAS,CAAC;KACpB;IACD,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,UAAU,EAAE,CAAC;IACvC,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,OAAO,CAAC,CAAC;IAC5C,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AAC5D,CAAC,CAAA,CAAC;AAEF;;;;GAIG;AACH,wBAA+B,GAAW;IACtC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACnC,OAAO,gBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;SACpC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;QAClB,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE;YAClB,OAAO;gBACH,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;aACrC,CAAC;SACL;aAAM;YACH,OAAO,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;SAC3C;IACL,CAAC,CAAC,CAAC;AACX,CAAC;AAdD,wCAcC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promisify } from \"util\";\nimport * as xml2js from \"xml2js\";\nimport { ProjectIdentifier } from \"../projectIdentifier\";\nimport { VersionedArtifact } from \"./VersionedArtifact\";\n\nexport const MavenProjectIdentifier: ProjectIdentifier = async p => {\n    const pom = await p.getFile(\"pom.xml\");\n    if (!pom) {\n        return undefined;\n    }\n    const content = await pom.getContent();\n    const ident = await identification(content);\n    return { name: ident.artifact, version: ident.version };\n};\n\n/**\n * Return version info from the POM using xml2j XML parser\n * @param {string} pom\n * @return {Promise<VersionedArtifact>}\n */\nexport function identification(pom: string): Promise<VersionedArtifact> {\n    const parser = new xml2js.Parser();\n    return promisify(parser.parseString)(pom)\n        .then((parsed: any) => {\n            if (!!parsed.project) {\n                return {\n                    group: parsed.project.groupId[0],\n                    artifact: parsed.project.artifactId[0],\n                    version: parsed.project.version[0],\n                };\n            } else {\n                return Promise.reject(\"Pom is invalid\");\n            }\n        });\n}\n"]}