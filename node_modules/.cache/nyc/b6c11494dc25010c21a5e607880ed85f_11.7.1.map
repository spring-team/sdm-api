{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/checkstyle/checkstyleReportExtractor.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/checkstyle/checkstyleReportExtractor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,+BAAiC;AACjC,iCAAiC;AAMjC,iBAA8B,MAAc;;QACxC,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAC7D;QACD,IAAI,MAAM,KAAK,EAAE,EAAE;YACf,QAAQ;YACR,OAAO;gBACH,KAAK,EAAE,EAAE;aACZ,CAAC;SACL;QACD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,gBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,EAAE;YACT,0BAAM,CAAC,IAAI,CAAC,YAAY,MAAM,GAAG,CAAC,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QACD,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC;QAC9B,OAAO;YACH,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;SAClC,CAAC;IACN,CAAC;CAAA;AApBD,0BAoBC;AAED,oBAAoB,CAAM;IACtB,OAAO;QACH,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI;QACd,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KAChC,CAAC;AACN,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { promisify } from \"util\";\nimport * as xml2js from \"xml2js\";\nimport {\n    CheckstyleReport,\n    FileReport,\n} from \"./CheckstyleReport\";\n\nexport async function extract(report: string): Promise<CheckstyleReport> {\n    if (report === undefined || report === null) {\n        throw new Error(\"checkstyle report is null or undefined\");\n    }\n    if (report === \"\") {\n        // great\n        return {\n            files: [],\n        };\n    }\n    const parser = new xml2js.Parser();\n    const output = await promisify(parser.parseString)(report);\n    if (!output) {\n        logger.warn(`Report: <${report}>`);\n        throw new Error(\"Unable to parse checkstyle report.\");\n    }\n    const raw = output.checkstyle;\n    return {\n        files: raw.file.map(fileToFile),\n    };\n}\n\nfunction fileToFile(f: any): FileReport {\n    return {\n        name: f.$.name,\n        errors: f.error.map(e => e.$),\n    };\n}\n"]}