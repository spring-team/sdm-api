{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/RolarProgressLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/RolarProgressLog.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as _ from \"lodash\";\n\nimport axios from \"axios\";\nimport {ProgressLog} from \"../../spi/log/ProgressLog\";\n\nimport {HandlerContext, logger} from \"@atomist/automation-client\";\nimport { doWithRetry } from \"@atomist/automation-client/util/retry\";\n\nimport {AxiosInstance} from \"axios\";\nimport os = require(\"os\");\nimport {WrapOptions} from \"retry\";\nimport {SdmGoal} from \"../../ingesters/sdmGoalIngester\";\n\nfunction* timestampGenerator() {\n    while (true) {\n        yield new Date();\n    }\n}\n\n/**\n * Post log to Atomist Rolar service for it to persist\n */\nexport class RolarProgressLog implements ProgressLog {\n\n    private localLogs: LogData[] = [];\n\n    constructor(private readonly rolarBaseUrl: string,\n                private readonly logPath: string[],\n                private readonly bufferSizeLimit: number = 10000,\n                private readonly logLevel: string = \"info\",\n                private readonly timestamper: Iterator<Date> = timestampGenerator(),\n                private readonly retryOptions: WrapOptions = {},\n                private readonly axiosInstance: AxiosInstance = axios) {\n    }\n\n    get name() {\n        return this.logPath.join(\"/\");\n    }\n\n    get url() {\n        return `${this.rolarBaseUrl}/logs/${this.name}`;\n    }\n\n    public async isAvailable() {\n        const url = `${this.rolarBaseUrl}/api/logs`;\n        try {\n            await doWithRetry(() => this.axiosInstance.head(url),\n                `check if Rolar service is available`,\n                this.retryOptions);\n            return true;\n        } catch (e) {\n            logger.warn(`Rolar logger is NOT available at ${url}: ${e}`);\n            return false;\n        }\n    }\n\n    public write(what: string) {\n        const line = what;\n        this.localLogs.push({\n            level: this.logLevel,\n            message: line,\n            timestamp: this.constructUtcTimestamp(),\n        } as LogData);\n        const bufferSize = this.localLogs.reduce((acc, logData) => acc + logData.message.length, 0);\n        if (bufferSize > this.bufferSizeLimit) {\n            // tslint:disable-next-line:no-floating-promises\n            this.flush();\n        }\n    }\n\n    public flush(): Promise<any> {\n        return this.postLogs(false);\n    }\n\n    public close(): Promise<any> {\n        return this.postLogs(true);\n    }\n\n    private async postLogs(isClosed: boolean): Promise<any> {\n        const closedRequestParam = isClosed ? \"?closed=true\" : \"\";\n        const url = `${this.rolarBaseUrl}/api/logs/${this.logPath.join(\"/\")}${closedRequestParam}`;\n        const postingLogs = this.localLogs;\n        this.localLogs = [];\n        const result = await doWithRetry(() => this.axiosInstance.post(url, {\n                host: os.hostname(),\n                content: postingLogs,\n            }, {\n                headers: {\"Content-Type\": \"application/json\"},\n            }),\n            `post log to Rolar`,\n            this.retryOptions).catch(e => {\n                this.localLogs = postingLogs.concat(this.localLogs);\n                logger.error(e);\n            },\n        );\n        return result;\n    }\n\n    private constructUtcTimestamp(): string {\n        if (!this.timestamper) { return \"\"; }\n        const now: Date = this.timestamper.next().value;\n        const date = [now.getUTCMonth() + 1, now.getUTCDate(), now.getUTCFullYear()]\n            .map(t => _.padStart(t.toString(), 2, \"0\"));\n        const time = [now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()]\n            .map(t => _.padStart(t.toString(), 2, \"0\"));\n        return `${date.join(\"/\")} ${time.join(\":\")}.${_.padStart(now.getUTCMilliseconds().toString(), 3, \"0\")}`;\n    }\n}\n\ninterface LogData {\n    level: string;\n    message: string;\n    timestamp: string;\n}\n\nexport function constructLogPath(context: HandlerContext, sdmGoal: SdmGoal): string[] {\n    return [\n        context.teamId,\n        sdmGoal.repo.owner,\n        sdmGoal.repo.name,\n        sdmGoal.sha,\n        sdmGoal.environment,\n        sdmGoal.name,\n        sdmGoal.goalSetId,\n        context.correlationId,\n    ];\n}\n"]}