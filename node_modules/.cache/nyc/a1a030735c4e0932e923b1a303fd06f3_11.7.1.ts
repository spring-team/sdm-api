"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_1jub9bjely=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/wellKnownGoals.ts",hash="1f83de94d6b1831d45115186c479f25c2907fb44",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/wellKnownGoals.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:22},end:{line:18,column:76}},"2":{start:{line:19,column:15},end:{line:19,column:55}},"3":{start:{line:20,column:24},end:{line:20,column:88}},"4":{start:{line:24,column:0},end:{line:30,column:3}},"5":{start:{line:36,column:0},end:{line:41,column:3}},"6":{start:{line:47,column:0},end:{line:54,column:3}},"7":{start:{line:59,column:0},end:{line:66,column:3}},"8":{start:{line:71,column:0},end:{line:77,column:3}},"9":{start:{line:82,column:0},end:{line:90,column:3}},"10":{start:{line:91,column:0},end:{line:100,column:24}},"11":{start:{line:103,column:0},end:{line:109,column:22}},"12":{start:{line:110,column:0},end:{line:115,column:3}},"13":{start:{line:120,column:0},end:{line:127,column:40}},"14":{start:{line:128,column:0},end:{line:135,column:32}},"15":{start:{line:136,column:0},end:{line:142,column:54}},"16":{start:{line:147,column:0},end:{line:153,column:37}},"17":{start:{line:154,column:0},end:{line:159,column:45}},"18":{start:{line:160,column:0},end:{line:165,column:3}},"19":{start:{line:166,column:0},end:{line:166,column:69}},"20":{start:{line:167,column:0},end:{line:167,column:69}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1jub9bjely.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const commonGoals_1=(cov_1jub9bjely.s[1]++,require("../common/delivery/goals/common/commonGoals"));const Goal_1=(cov_1jub9bjely.s[2]++,require("../common/delivery/goals/Goal"));const gitHubContext_1=(cov_1jub9bjely.s[3]++,require("../common/delivery/goals/support/github/gitHubContext"));/**
 * Goals referenced in SoftwareDeliveryMachine
 */cov_1jub9bjely.s[4]++;exports.NoGoal=new Goal_1.Goal({uniqueName:"Nevermind",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-immaterial",displayName:"immaterial",completedDescription:"No material changes"});/**
 * Goal that performs fingerprinting. Typically invoked
 * early in a delivery flow.
 * @type {Goal}
 */cov_1jub9bjely.s[5]++;exports.FingerprintGoal=new Goal_1.Goal({uniqueName:"Fingerprint",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"0.1-fingerprint",completedDescription:"Fingerprinted"});/**
 * Goal that performs autofixes: For example, linting
 * and adding license headers.
 * @type {Goal}
 */cov_1jub9bjely.s[6]++;exports.AutofixGoal=new Goal_1.Goal({uniqueName:"Autofix",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"0.2-autofix",workingDescription:"Running autofixes...",completedDescription:"Autofixed",failedDescription:"Fixes made: Don't proceed"});/**
 * Goal to run code reviews
 * @type {Goal}
 */cov_1jub9bjely.s[7]++;exports.ReviewGoal=new Goal_1.Goal({uniqueName:"Review",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-review",workingDescription:"Running code reviews...",completedDescription:"Code review passed",waitingForApprovalDescription:"Manual approval needed"});/**
 * Goal that runs PushReactionRegistrations
 * @type {Goal}
 */cov_1jub9bjely.s[8]++;exports.PushReactionGoal=new Goal_1.Goal({uniqueName:"CodeReaction",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1.5-react",workingDescription:"Running code reactions...",completedDescription:"Code reactions passed"});/**
 * Just build, without any checks
 * @type {Goal}
 */cov_1jub9bjely.s[9]++;exports.JustBuildGoal=new Goal_1.Goal({uniqueName:"JustBuild",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2-just-build ",displayName:"build",workingDescription:"Building...",completedDescription:"Build successful",failedDescription:"Build failed"});cov_1jub9bjely.s[10]++;exports.BuildGoal=new Goal_1.GoalWithPrecondition({uniqueName:"Build",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2-build",displayName:"build",workingDescription:"Building...",completedDescription:"Build successful",failedDescription:"Build failed",isolated:true},exports.AutofixGoal);// This one is actually satisfied in an ImageLinked event,
// which happens to be a result of the build.
cov_1jub9bjely.s[11]++;exports.ArtifactGoal=new Goal_1.GoalWithPrecondition({uniqueName:"Artifact",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2.5-artifact",displayName:"store artifact",completedDescription:"Stored artifact"},exports.BuildGoal);cov_1jub9bjely.s[12]++;exports.LocalDeploymentGoal=new Goal_1.Goal({uniqueName:"DeployHere",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-deploy-locally",completedDescription:"Deployed locally"});// this one won't be set up to trigger on its precondition;
// rather, the deploy goal also sets this one, currently.
// Setting the precondition lets FailDownstream know that this
// one is never gonna succeed if the deploy failed.
cov_1jub9bjely.s[13]++;exports.StagingEndpointGoal=new Goal_1.GoalWithPrecondition({uniqueName:"FindTestEndpoint",environment:gitHubContext_1.StagingEnvironment,orderedName:"4-endpoint",displayName:"locate service endpoint in Test",completedDescription:"Here is the service endpoint in Test",failedDescription:"Couldn't locate service endpoint in Test"},commonGoals_1.StagingDeploymentGoal);cov_1jub9bjely.s[14]++;exports.StagingVerifiedGoal=new Goal_1.GoalWithPrecondition({uniqueName:"VerifyTest",environment:gitHubContext_1.StagingEnvironment,orderedName:"5-verifyEndpoint",displayName:"verify Test deployment",completedDescription:"Verified endpoint in Test",waitingForApprovalDescription:"Test endpoint verified! Approve for production deploy."},exports.StagingEndpointGoal);cov_1jub9bjely.s[15]++;exports.ProductionDeploymentGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DeployToProduction",environment:gitHubContext_1.ProductionEnvironment,orderedName:"3-prod-deploy",displayName:"deploy to Prod",completedDescription:"Deployed to Prod"},exports.ArtifactGoal,exports.StagingVerifiedGoal);// this one won't be set up to trigger on its precondition;
// rather, the deploy goal also sets this one, currently.
// Setting the precondition lets FailDownstream know that this
// one is never gonna succeed if the deploy failed.
cov_1jub9bjely.s[16]++;exports.ProductionEndpointGoal=new Goal_1.GoalWithPrecondition({uniqueName:"FindProductionEndpoint",environment:gitHubContext_1.ProductionEnvironment,orderedName:"4-endpoint",displayName:"locate service endpoint in Prod",completedDescription:"Here is the service endpoint in Prod"},exports.ProductionDeploymentGoal);cov_1jub9bjely.s[17]++;exports.DeleteAfterUndeploysGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DeleteRepositoryAfterUndeployed",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"8-delete-repo",completedDescription:"Repository deleted"},commonGoals_1.ProductionUndeploymentGoal);cov_1jub9bjely.s[18]++;exports.DeleteRepositoryGoal=new Goal_1.Goal({uniqueName:"DeleteRepository",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"8-delete-repo",completedDescription:"Offered to delete repository"});cov_1jub9bjely.s[19]++;exports.StagingEndpointContext=exports.StagingEndpointGoal.context;cov_1jub9bjely.s[20]++;exports.StagingVerifiedContext=exports.StagingVerifiedGoal.context;//# sourceMappingURL=data:application/json;charset=utf-8;base64,