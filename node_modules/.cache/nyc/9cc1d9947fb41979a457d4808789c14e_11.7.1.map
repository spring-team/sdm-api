{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/executePushReactionsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/executePushReactionsTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA2F;AAC3F,4FAAyF;AACzF,2FAAwF;AACxF,gFAAwE;AAExE,uCAAuC;AACvC,oGAAiG;AACjG,4GAA+H;AAE/H,uFAAoF;AAEpF,eAAe,WAAqC,EAAE,YAAqB;IACvE,OAAO;QACH,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,gCAAY;QACtB,MAAM,EAAE,CAAM,GAAG,EAAC,EAAE;YAChB,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtB,IAAI,YAAY,EAAE;gBACd,OAAO,+CAAoB,CAAC,SAAS,CAAC;aACzC;QACL,CAAC,CAAA;KACJ,CAAC;AACN,CAAC;AAED,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAElC,EAAE,CAAC,iBAAiB,EAAE,GAAS,EAAE;QAC7B,MAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,iCAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,MAAM,WAAW,GAA6B,EAAE,CAAC;QACjD,MAAM,EAAE,GAAG,2CAAoB,CAAC,IAAI,yCAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACxF,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,6CAAqB,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;QACnD,MAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,iCAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,MAAM,WAAW,GAA6B,EAAE,CAAC;QACjD,MAAM,EAAE,GAAG,2CAAoB,CAAC,IAAI,yCAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACzF,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,6CAAqB,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAA,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport { fakeRunWithLogContext } from \"../../../../src/util/test/fakeRunWithLogContext\";\nimport { TruePushTest } from \"../../listener/support/pushTestUtilsTest\";\n\nimport * as assert from \"power-assert\";\nimport { executePushReactions } from \"../../../../src/common/delivery/code/executePushReactions\";\nimport { PushReactionRegistration, PushReactionResponse } from \"../../../../src/common/delivery/code/PushReactionRegistration\";\nimport { PushListenerInvocation } from \"../../../../src/common/listener/PushListener\";\nimport { SingleProjectLoader } from \"../../../../src/util/test/SingleProjectLoader\";\n\nfunction react(invocations: PushListenerInvocation[], stopTheWorld: boolean): PushReactionRegistration {\n    return {\n        name: \"hatred\",\n        pushTest: TruePushTest,\n        action: async cri => {\n            invocations.push(cri);\n            if (stopTheWorld) {\n                return PushReactionResponse.failGoals;\n            }\n        },\n    };\n}\n\ndescribe(\"executePushReactions\", () => {\n\n    it(\"stops the world\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id);\n        const invocations: PushListenerInvocation[] = [];\n        const ge = executePushReactions(new SingleProjectLoader(p), [react(invocations, true)]);\n        const r = await ge(fakeRunWithLogContext(id));\n        assert.equal(invocations.length, 1);\n        assert(!r.requireApproval);\n        assert.equal(r.code, 1);\n    });\n\n    it(\"is invoked but doesn't stop the world\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id);\n        const invocations: PushListenerInvocation[] = [];\n        const ge = executePushReactions(new SingleProjectLoader(p), [react(invocations, false)]);\n        const r = await ge(fakeRunWithLogContext(id));\n        assert.equal(invocations.length, 1);\n        assert.equal(r.code, 0);\n        assert(!r.requireApproval);\n        assert.equal(r.code, 0);\n    });\n\n});\n"]}