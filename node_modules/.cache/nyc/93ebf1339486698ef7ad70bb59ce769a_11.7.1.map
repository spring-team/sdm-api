{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/repo/CachingProjectLoader.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/repo/CachingProjectLoader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH,kEAAoD;AACpD,sGAAmG;AAEnG,yBAAyB;AACzB,+BAAiC;AACjC,uDAA0D;AAC1D,uDAAoD;AAGpD;;GAEG;AACH;IAII,YAAY,aAAqB,EAAE;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,mBAAQ,CAAa,UAAU,CAAC,CAAC;IACtD,CAAC;IAEY,aAAa,CAAI,MAAgC,EAAE,MAA4B;;YACxF,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAClB,0BAAM,CAAC,IAAI,CAAC,sEAAsE,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC/F,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3E,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;aACpB;YAED,0BAAM,CAAC,KAAK,CAAC,oEAAoE,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YAC9F,MAAM,GAAG,GAAG,yBAAc,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,IAAI,CAAC,CAAC,OAAO,EAAE;gBACX,yDAAyD;gBACzD,IAAI;oBACA,MAAM,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAC/C;gBAAC,WAAM;oBACJ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtB,0BAAM,CAAC,IAAI,CAAC,8CAA8C,EAAE,GAAG,CAAC,CAAC;oBACjE,OAAO,GAAG,SAAS,CAAC;iBACvB;aACJ;YAED,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3E,0BAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC9C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aAChC;YAED,0BAAM,CAAC,IAAI,CAAC,+DAA+D,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/F,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;KAAA;CAEJ;AAvCD,oDAuCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProjectLoader, ProjectLoadingParameters, WithLoadedProject } from \"./ProjectLoader\";\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport * as fs from \"fs\";\nimport { promisify } from \"util\";\nimport { cacheKeyForSha } from \"../../util/misc/cacheKey\";\nimport { LruCache } from \"../../util/misc/LruCache\";\nimport { SimpleCache } from \"../../util/misc/SimpleCache\";\n\n/**\n * Simple caching implementation of ProjectLoader\n */\nexport class CachingProjectLoader implements ProjectLoader {\n\n    private readonly cache: SimpleCache<GitProject>;\n\n    constructor(maxEntries: number = 20) {\n        this.cache = new LruCache<GitProject>(maxEntries);\n    }\n\n    public async doWithProject<T>(params: ProjectLoadingParameters, action: WithLoadedProject<T>): Promise<T> {\n        if (!params.readOnly) {\n            logger.warn(\"CachingProjectLoader: Forcing fresh clone for non readonly use of %j\", params.id);\n            const p = await GitCommandGitProject.cloned(params.credentials, params.id);\n            return action(p);\n        }\n\n        logger.debug(\"CachingProjectLoader: Hoping to reuse clone for readonly use of %j\", params.id);\n        const key = cacheKeyForSha(params.id);\n        let project = this.cache.get(key);\n        if (!!project) {\n            // Validate it, as the directory may have been cleaned up\n            try {\n                await promisify(fs.access)(project.baseDir);\n            } catch {\n                this.cache.evict(key);\n                logger.warn(\"CachingProjectLoader: Invalid cache entry %s\", key);\n                project = undefined;\n            }\n        }\n\n        if (!project) {\n            project = await GitCommandGitProject.cloned(params.credentials, params.id);\n            logger.info(\"Caching project %j\", project.id);\n            this.cache.put(key, project);\n        }\n\n        logger.info(\"CachingProjectLoader: About to invoke action. Cache stats: %j\", this.cache.stats);\n        return action(project);\n    }\n\n}\n"]}