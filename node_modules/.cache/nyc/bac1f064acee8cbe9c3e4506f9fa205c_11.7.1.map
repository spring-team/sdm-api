{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/git/repoRef.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/git/repoRef.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as _ from \"lodash\";\nimport { BitBucketServerRepoRef } from \"../../common/command/BitBucketServerRepoRef\";\nimport { SdmGoal } from \"../../ingesters/sdmGoalIngester\";\nimport { CoreRepoFieldsAndChannels, OnPushToAnyBranch, ProviderType, ScmProvider, StatusForExecuteGoal } from \"../../typings/types\";\n\n/**\n * Obtain a RemoteRepoRef from the given push, correctly\n * resolving provider.\n * @param {OnPushToAnyBranch.Push} push\n * @return {any}\n */\nexport function repoRefFromPush(push: OnPushToAnyBranch.Push): RemoteRepoRef {\n    const providerType = push.repo.org.provider.providerType;\n    switch (providerType) {\n        case ProviderType.github_com:\n        case ProviderType.ghe:\n            return GitHubRepoRef.from({\n                owner: push.repo.owner,\n                repo: push.repo.name,\n                sha: push.after.sha,\n                rawApiBase: push.repo.org.provider.apiUrl,\n                branch: push.branch,\n            });\n        case ProviderType.bitbucket :\n            const providerUrl = push.repo.org.provider.url;\n            return toBitBucketServerRepoRef({\n                providerUrl,\n                owner: push.repo.owner,\n                name: push.repo.name,\n                sha: push.after.sha,\n                branch: push.branch,\n            });\n        case ProviderType.bitbucket_cloud :\n            throw new Error(\"BitBucket Cloud not yet supported\");\n        default:\n            throw new Error(`Provider ${providerType} not currently supported in SDM`);\n    }\n}\n\nexport function toBitBucketServerRepoRef(params: {\n    providerUrl: string,\n    owner: string,\n    name: string,\n    sha: string,\n    branch?: string,\n}): BitBucketServerRepoRef {\n    const url = params.providerUrl;\n    const id = new BitBucketServerRepoRef(\n        url,\n        params.owner,\n        params.name,\n        true,\n        params.sha,\n    );\n    id.branch = params.branch;\n    // id.cloneUrl = (creds: BasicAuthCredentials) =>\n    //     `http://${encodeURIComponent(creds.username)}:${encodeURIComponent(creds.password)}@${id.remoteBase}${id.pathComponent}.git`;\n    return id;\n}\n\nexport function providerIdFromPush(push: OnPushToAnyBranch.Push) {\n    return push.repo.org.provider.providerId;\n}\n\nexport function providerIdFromStatus(status: StatusForExecuteGoal.Fragment) {\n    return status.commit.repo.org.provider.providerId;\n}\n\nexport function repoRefFromStatus(status: StatusForExecuteGoal.Fragment): GitHubRepoRef {\n    return GitHubRepoRef.from({\n        owner: status.commit.repo.owner,\n        repo: status.commit.repo.name,\n        sha: status.commit.sha,\n        rawApiBase: status.commit.repo.org.provider.apiUrl,\n        branch: _.get(status, \"commit.pushes[0].branch\"),\n    });\n}\n\nexport function repoRefFromSdmGoal(sdmGoal: SdmGoal, provider: ScmProvider.ScmProvider): RemoteRepoRef {\n    switch (provider.providerType) {\n        case ProviderType.github_com:\n        case ProviderType.ghe:\n            return GitHubRepoRef.from({\n                owner: sdmGoal.repo.owner,\n                repo: sdmGoal.repo.name,\n                sha: sdmGoal.sha,\n                branch: sdmGoal.branch,\n                rawApiBase: provider.apiUrl,\n            });\n        case ProviderType.bitbucket :\n            const providerUrl = provider.url;\n            return toBitBucketServerRepoRef({\n                providerUrl,\n                owner: sdmGoal.repo.owner,\n                name: sdmGoal.repo.name,\n                sha: sdmGoal.sha,\n                branch: sdmGoal.branch,\n            });\n        default:\n            throw new Error(`Provider ${provider.providerType} not currently supported in SDM`);\n    }\n}\n\n/**\n * Convert GraphQL return to our remote repo ref, instantiating\n * the correct type based on provider\n * @param {CoreRepoFieldsAndChannels.Fragment} repo\n * @param opts options - sha or branch\n * @return {RemoteRepoRef}\n */\nexport function toRemoteRepoRef(repo: CoreRepoFieldsAndChannels.Fragment, opts: { sha?: string, branch?: string } = {}): RemoteRepoRef {\n    const providerType = _.get(repo, \"org.provider.providerType\");\n    const apiUrl = _.get(repo, \"org.provider.apiUrl\");\n\n    logger.info(\"toRemoteRepoRef with GraphQL-sourced repo: %j\", repo);\n    switch (providerType) {\n        case undefined:\n        case null:\n        case ProviderType.github_com:\n        case ProviderType.ghe:\n            return GitHubRepoRef.from({\n                owner: repo.owner,\n                repo: repo.name,\n                sha: opts.sha,\n                branch: opts.branch,\n                rawApiBase: apiUrl,\n            });\n        case ProviderType.bitbucket :\n            return toBitBucketServerRepoRef({\n                owner: repo.owner,\n                name: repo.name,\n                sha: opts.sha,\n                branch: opts.branch,\n                providerUrl: apiUrl,\n            });\n        default:\n            throw new Error(`Provider ${repo.org.provider.providerType} not currently supported in SDM`);\n    }\n}\n"]}