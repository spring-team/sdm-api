{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/pushTestUtils.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/pushTestUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { LruCache } from \"../../../../util/misc/LruCache\";\nimport { PushListenerInvocation } from \"../../PushListener\";\nimport { isPushMapping } from \"../../PushMapping\";\nimport { ProjectPredicate, PushTest, pushTest } from \"../../PushTest\";\n\n/**\n * Return the opposite of this push test\n * @param {PushTest} t\n * @return {PushTest}\n */\nexport function not(t: PushTest): PushTest {\n    return pushTest(`not (${t.name})`, async pi => !(await t.valueForPush(pi)));\n}\n\nexport type PushTestOrProjectPredicate = PushTest | ProjectPredicate;\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * AND: Return true if all are satisfied\n * @param {PushTest} pushTests\n * @return {PushTest}\n */\nexport function allSatisfied(...pushTests: PushTestOrProjectPredicate[]): PushTest {\n    return pushTest(pushTests.map(g => g.name).join(\" && \"),\n        async pci => {\n            const allResults: boolean[] = await Promise.all(\n                pushTests.map(async pt => {\n                    const result = isPushMapping(pt) ? await pt.valueForPush(pci) : await pt(pci.project);\n                    logger.debug(`Result of PushTest '${pt.name}' was ${result}`);\n                    return result;\n                }),\n            );\n            return !allResults.includes(false);\n        });\n}\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * OR: Return true if any is satisfied\n * @param {PushTest} pushTests\n * @return {PushTest}\n */\nexport function anySatisfied(...pushTests: PushTestOrProjectPredicate[]): PushTest {\n    return pushTest(pushTests.map(g => g.name).join(\" || \"),\n        async pci => {\n            const allResults: boolean[] = await Promise.all(\n                pushTests.map(async pt => {\n                    const result = isPushMapping(pt) ? await pt.valueForPush(pci) : await pt(pci.project);\n                    logger.debug(`Result of PushTest '${pt.name}' was ${result}`);\n                    return result;\n                }),\n            );\n            return allResults.includes(true);\n        });\n}\n\nconst pushTestResultMemory = new LruCache<boolean>(1000);\n\n/**\n * Cache the PushTest results for this push\n * @param {PushTest} pt\n * @return {PushTest}\n */\nexport function memoize(pt: PushTest): PushTest {\n    return {\n        name: pt.name,\n        valueForPush: async pti => {\n            const key = ptCacheKey(pt, pti);\n            let result = pushTestResultMemory.get(key);\n            if (result === undefined) {\n                result = await pt.valueForPush(pti);\n                logger.info(`Evaluated push test [%s] to ${result}: cache stats=%j`, pt.name, pushTestResultMemory.stats);\n                pushTestResultMemory.put(key, result);\n            }\n            return result;\n        },\n    };\n}\n\nfunction ptCacheKey(pt: PushTest, pti: PushListenerInvocation): string {\n    return pti.push.id + \"_\" + pt.name;\n}\n"]}