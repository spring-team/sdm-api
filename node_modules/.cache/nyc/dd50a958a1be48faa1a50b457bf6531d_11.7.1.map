{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/firstAvailableProgressLogTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/firstAvailableProgressLogTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,uCAAuC;AACvC,sCAAkD;AAClD,iGAA8F;AAE9F,MAAM,yBAAyB,GAAG,IAAI,wBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAC3E,yBAAyB,CAAC,WAAW,GAAG,GAAS,EAAE,gDAAC,OAAA,KAAK,CAAA,GAAA,CAAC;AAE1D,MAAM,oBAAoB,GAAG,IAAI,wBAAkB,CAAC,WAAW,CAAC,CAAC;AAEjE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAE5B,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;QAC7C,IAAI;YACA,MAAM,qDAAyB,CAAC,yBAAyB,CAAC,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;SAChD;QAAC,WAAM;YACJ,KAAK;SACR;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAS,EAAE;QAC/C,MAAM,KAAK,GAAG,MAAM,qDAAyB,CAAC,oBAAoB,CAAC,CAAC;QACpE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAS,EAAE;QACnE,MAAM,KAAK,GAAG,MAAM,qDAAyB,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAC;QAC/F,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,gFAAgF,EAAE,GAAS,EAAE;QAC5F,MAAM,KAAK,GAAG,MAAM,qDAAyB,CAAC,yBAAyB,EAAE,oBAAoB,EAAE,IAAI,wBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;QACpI,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAS,EAAE;QAC3E,MAAM,SAAS,GAAG,IAAI,wBAAkB,CAAC,SAAS,CAAC,CAAC;QACpD,SAAS,CAAC,WAAW,GAAG,GAAS,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC,CAAA,CAAC;QACF,MAAM,KAAK,GAAG,MAAM,qDAAyB,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from \"power-assert\";\nimport { LoggingProgressLog } from \"../../../src\";\nimport { firstAvailableProgressLog } from \"../../../src/common/log/firstAvailableProgressLog\";\n\nconst NeverAvailableProgressLog = new LoggingProgressLog(\"neverAvailable\");\nNeverAvailableProgressLog.isAvailable = async () => false;\n\nconst AvailableProgressLog = new LoggingProgressLog(\"available\");\n\ndescribe(\"firstAvailable\", () => {\n\n    it(\"should fail with none available\", async () => {\n        try {\n            await firstAvailableProgressLog(NeverAvailableProgressLog);\n            assert.fail(\"Should've thrown an exception\");\n        } catch {\n            // Ok\n        }\n    });\n\n    it(\"should succeed with one available\", async () => {\n        const faLog = await firstAvailableProgressLog(AvailableProgressLog);\n        assert.equal(faLog, AvailableProgressLog);\n    });\n\n    it(\"should succeed with one unavailable and one available\", async () => {\n        const faLog = await firstAvailableProgressLog(NeverAvailableProgressLog, AvailableProgressLog);\n        assert.equal(faLog, AvailableProgressLog);\n    });\n\n    it(\"should succeed with one unavailable and two available, picking first available\", async () => {\n        const faLog = await firstAvailableProgressLog(NeverAvailableProgressLog, AvailableProgressLog, new LoggingProgressLog(\"dontUseMe\"));\n        assert.equal(faLog, AvailableProgressLog);\n    });\n\n    it(\"should not ask availability after finding an available logger\", async () => {\n        const dontAskMe = new LoggingProgressLog(\"dontAsk\");\n        dontAskMe.isAvailable = async () => {\n            throw new Error(\"I said DON'T ASK\");\n        };\n        const faLog = await firstAvailableProgressLog(AvailableProgressLog, dontAskMe);\n        assert.equal(faLog, AvailableProgressLog);\n    });\n\n});\n"]}