{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/project/filteredViewTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/project/filteredViewTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA2F;AAC3F,sGAAmG;AAEnG,yEAAsE;AAEtE,4EAAwE;AACxE,uFAAqF;AACrF,uCAAuC;AAEvC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAE1B,EAAE,CAAC,6BAA6B,EAAE,GAAS,EAAE;QACzC,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAC,EAAE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACpH,MAAM,QAAQ,GAAG,2BAAY,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAElB,EAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;QACxC,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAC,EAAE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACpH,MAAM,QAAQ,GAAG,2BAAY,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,EAAE,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAElB,EAAE,CAAC,iBAAiB,EAAE,GAAS,EAAE;QAC7B,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAC,EAAE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACpH,MAAM,QAAQ,GAAG,2BAAY,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAC7D,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;QACjD,MAAM,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAElB,EAAE,CAAC,mBAAmB,EAAE,GAAS,EAAE;QAC/B,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAC,EAAE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACpH,MAAM,QAAQ,GAAG,2BAAY,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAC7D,MAAM,CAAC,GAAG,MAAM,4BAAa,CAAC,QAAQ,EAAE,oBAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/D,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IACrC,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAEtB,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\n\nimport { filteredView } from \"../../../src/util/project/filteredView\";\n\nimport { AllFiles } from \"@atomist/automation-client/project/fileGlobs\";\nimport { saveFromFiles } from \"@atomist/automation-client/project/util/projectUtils\";\nimport * as assert from \"power-assert\";\n\ndescribe(\"filteredView\", () => {\n\n    it(\"should suppress sync method\", async () => {\n        const p = await GitCommandGitProject.cloned({ token: null}, new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        const filtered = filteredView(p, path => path === \"pom.xml\");\n        assert.throws(() => filtered.addFileSync(\"x\", \"y\"));\n    }).timeout(10000);\n\n    it(\"should not filter anything\", async () => {\n        const p = await GitCommandGitProject.cloned({ token: null}, new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        const filtered = filteredView(p, path => true);\n        assert.equal(await p.totalFileCount(), await filtered.totalFileCount());\n    }).timeout(10000);\n\n    it(\"should copy one\", async () => {\n        const p = await GitCommandGitProject.cloned({ token: null}, new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        const filtered = filteredView(p, path => path === \"pom.xml\");\n        assert.equal(1, await filtered.totalFileCount());\n        await filtered.findFile(\"pom.xml\");\n    }).timeout(10000);\n\n    it(\"should find files\", async () => {\n        const p = await GitCommandGitProject.cloned({ token: null}, new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        const filtered = filteredView(p, path => path === \"pom.xml\");\n        const r = await saveFromFiles(filtered, AllFiles, f => f.path);\n        assert.deepEqual(r, [\"pom.xml\"]);\n    }).timeout(10000);\n\n});\n"]}