{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/AbstractRemoteRepoRef.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/AbstractRemoteRepoRef.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAGH,4GAA2G;AAC3G,0HAA2I;AAI3I;;;;;GAKG;AACH;IAaI;;;;;;;;;OASG;IACH,YAAsC,YAA0B,EAC1C,SAAiB,EACD,KAAa,EACb,IAAY,EACZ,MAAc,QAAQ,EACtB,IAAa;QALb,iBAAY,GAAZ,YAAY,CAAc;QAE1B,UAAK,GAAL,KAAK,CAAQ;QACb,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAAmB;QACtB,SAAI,GAAJ,IAAI,CAAS;QAC/C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,mCAAmC,SAAS,GAAG,CAAC,CAAC;SACpE;QACD,uBAAuB;QACvB,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;QACpE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,GAAG;QACH,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IACzE,CAAC;IAEM,QAAQ,CAAC,KAAkC;QAC9C,IAAI,6CAAsB,CAAC,KAAK,CAAC,EAAE;YAC/B,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG;gBAC/F,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,MAAM,CAAC;SACtD;QACD,IAAI,CAAC,gDAAkB,CAAC,KAAK,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QACD,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,kBAAkB,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,MAAM,CAAC;IACrG,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC;CAUJ;AAlED,sDAkEC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionResult } from \"@atomist/automation-client/action/ActionResult\";\nimport { isBasicAuthCredentials } from \"@atomist/automation-client/operations/common/BasicAuthCredentials\";\nimport { isTokenCredentials, ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { ProviderType, RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { Configurable } from \"@atomist/automation-client/project/git/Configurable\";\n\n/**\n * Superclass for RemoteRepoRef implementations.\n * Handles parsing remote base\n *\n * This should ultimately move down to automation-client-ts and replace AbstractRepoRef.\n */\nexport abstract class AbstractRemoteRepoRef implements RemoteRepoRef {\n\n    public branch?: string;\n\n    public readonly scheme: \"http://\" | \"https://\";\n\n    public readonly apiBase: string;\n\n    /**\n     * Remote url not including scheme or trailing /\n     */\n    public readonly remoteBase: string;\n\n    /**\n     * Construct a new RemoteRepoRef\n     * @param {ProviderType} providerType\n     * @param {string} rawRemote remote url. Should start with a scheme.\n     * May have a trailing slash, which will be stripped\n     * @param {string} owner\n     * @param {string} repo\n     * @param {string} sha\n     * @param {string} path\n     */\n    protected constructor(public readonly providerType: ProviderType,\n                          rawRemote: string,\n                          public readonly owner: string,\n                          public readonly repo: string,\n                          public readonly sha: string = \"master\",\n                          public readonly path?: string) {\n        if (!rawRemote.startsWith(\"http\")) {\n            throw new Error(`Scheme required in remoteBase: '${rawRemote}'`);\n        }\n        // Strip any trailing /\n        const remote = rawRemote.replace(/\\/$/, \"\");\n        this.scheme = remote.startsWith(\"http://\") ? \"http://\" : \"https://\";\n        this.apiBase = remote.substr(this.scheme.length);\n        this.remoteBase = remote.substr(this.scheme.length);\n    }\n\n    get url() {\n        return `${this.scheme}${this.remoteBase}/${this.owner}/${this.repo}`;\n    }\n\n    public cloneUrl(creds: ProjectOperationCredentials) {\n        if (isBasicAuthCredentials(creds)) {\n            return `${this.scheme}${encodeURIComponent(creds.username)}:${encodeURIComponent(creds.password)}@` +\n                `${this.remoteBase}/${this.pathComponent}.git`;\n        }\n        if (!isTokenCredentials(creds)) {\n            throw new Error(\"Only token or basic auth supported\");\n        }\n        return `${this.scheme}${creds.token}:x-oauth-basic@${this.remoteBase}/${this.pathComponent}.git`;\n    }\n\n    get pathComponent(): string {\n        return this.owner + \"/\" + this.repo;\n    }\n\n    public abstract createRemote(creds: ProjectOperationCredentials, description: string, visibility): Promise<ActionResult<this>>;\n\n    public abstract setUserConfig(credentials: ProjectOperationCredentials, project: Configurable): Promise<ActionResult<any>>;\n\n    public abstract raisePullRequest(creds: ProjectOperationCredentials,\n                                     title: string, body: string, head: string, base: string): Promise<ActionResult<this>>;\n\n    public abstract deleteRemote(creds: ProjectOperationCredentials): Promise<ActionResult<this>>;\n}\n"]}