{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/SkipDownstreamGoalsOnGoalFailure.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/SkipDownstreamGoalsOnGoalFailure.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EventFired,\n    EventHandler,\n    HandleEvent,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Success,\n} from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { updateGoal } from \"../../../../common/delivery/goals/storeGoals\";\nimport { fetchGoalsForCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { goalKeyEquals, SdmGoal, SdmGoalKey } from \"../../../../ingesters/sdmGoalIngester\";\nimport { OnAnyFailedSdmGoal } from \"../../../../typings/types\";\nimport { repoRefFromSdmGoal } from \"../../../../util/git/repoRef\";\nimport { fetchScmProvider, sumSdmGoalEventsByOverride } from \"./RequestDownstreamGoalsOnGoalSuccess\";\n\n/**\n * Respond to a failure status by failing downstream goals\n */\n@EventHandler(\"Fail downstream goals on a goal failure\", subscription(\"OnAnyFailedSdmGoal\"))\nexport class SkipDownstreamGoalsOnGoalFailure implements HandleEvent<OnAnyFailedSdmGoal.Subscription> {\n\n    // #98: GitHub Status->SdmGoal: We still have to respond to failure on status,\n    // until we change all the failure updates to happen on SdmGoal.\n    // but we can update the SdmGoals, and let that propagate to the statuses.\n    // we can count on all of the statuses we need to update to exist as SdmGoals.\n    // however, we can't count on the SdmGoal to have the latest state, so check the Status for that.\n    public async handle(event: EventFired<OnAnyFailedSdmGoal.Subscription>,\n                        context: HandlerContext): Promise<HandlerResult> {\n\n        const failedGoal = event.data.SdmGoal[0] as SdmGoal;\n\n        if (failedGoal.state !== \"failure\") { // atomisthq/automation-api#395\n            logger.debug(`Nevermind: failure reported when the state was=[${failedGoal.state}]`);\n            return Promise.resolve(Success);\n        }\n\n        const id = repoRefFromSdmGoal(failedGoal, await fetchScmProvider(context, failedGoal.repo.providerId));\n        const goals: SdmGoal[] = sumSdmGoalEventsByOverride(await fetchGoalsForCommit(context, id, failedGoal.repo.providerId) as SdmGoal[],\n            [failedGoal]);\n\n        const goalsToSkip = goals.filter(g => isDependentOn(failedGoal, g, mapKeyToGoal(goals)))\n            .filter(g => g.state === \"planned\");\n\n        await Promise.all(goalsToSkip.map(g => updateGoal(context, g, {\n            state: \"skipped\",\n            description: `Skipped ${g.name} because ${failedGoal.name} failed`,\n        })));\n\n        return Success;\n    }\n}\n\nfunction mapKeyToGoal<T extends SdmGoalKey>(goals: T[]): (SdmGoalKey) => T {\n    return (keyToFind: SdmGoalKey) => {\n        const found = goals.find(g => goalKeyEquals(keyToFind, g));\n        return found;\n    };\n}\n\nfunction isDependentOn(failedGoal: SdmGoalKey, goal: SdmGoal, preconditionToGoal: (g: SdmGoalKey) => SdmGoal): boolean {\n    if (!goal) {\n        // TODO we think this is caused by automation-api#396\n        logger.warn(\"Internal error: Trying to work out if %j is dependent on null or undefined goal\", failedGoal);\n        return false;\n    }\n    if (!goal.preConditions || goal.preConditions.length === 0) {\n        return false; // no preconditions? not dependent\n    }\n    if (mapKeyToGoal(goal.preConditions)(failedGoal)) {\n        return true; // the failed goal is one of my preconditions? dependent\n    }\n    // otherwise, recurse on my preconditions\n    return !!goal.preConditions\n        .map(precondition => isDependentOn(failedGoal, preconditionToGoal(precondition), preconditionToGoal))\n        .find(a => a); // if one is true, return true\n}\n"]}