{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/repo/publishTags.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/repo/publishTags.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAOH,sGAAmG;AACnG,iEAAoE;AACpE,iDAAoD;AACpD,uEAAoE;AAGpE;;;;;;;GAOG;AACH,qBAAkC,MAAc,EACd,EAAiB,EACjB,WAAwC,EACxC,eAAgC,EAChC,GAAmB;;QACjD,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAS,MAAM,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,wCAAwC;YACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,iBAAU,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;YAEhE,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,gBAAgB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3F,MAAM,GAAG,GAA+B;gBACpC,OAAO,EAAE;oBACL,KAAK,EAAE,EAAE,CAAC,KAAK;oBACf,IAAI,EAAE,EAAE,CAAC,IAAI;oBACb,GAAG,EAAE,QAAQ;oBACb,SAAS,EAAE,KAAK;oBAChB,WAAW;oBACX,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;iBACnB;aACJ,CAAC;YACF,OAAO,mBAAW,CAAC,GAAG,EAAE,CAAC,iCAAe,CAAC,IAAI,EAAE,GAAG,EAAE,SAAS,CAAC,EAC1D,cAAc,EAAE;gBACZ,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,EAAE;aACd,CAAC,CAAC;SACV;IACL,CAAC;CAAA;AA7BD,kCA6BC;AAED,gBAAgB,IAAc;IAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { EditorOrReviewerParameters } from \"@atomist/automation-client/operations/common/params/BaseEditorOrReviewerParameters\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { Tagger, Tags } from \"@atomist/automation-client/operations/tagger/Tagger\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport { doWithRetry } from \"@atomist/automation-client/util/retry\";\nimport { listTopics } from \"../../util/github/ghub\";\nimport { GitHubTagRouter } from \"../../util/github/gitHubTagRouter\";\nimport { AddressChannels } from \"../slack/addressChannels\";\n\n/**\n * Run a tagger and publish tags for this repo\n * @param {Tagger} tagger\n * @param {GitHubRepoRef} id\n * @param {ProjectOperationCredentials} credentials\n * @param {AddressChannels} addressChannels\n * @param {HandlerContext} ctx\n */\nexport async function publishTags(tagger: Tagger,\n                                  id: GitHubRepoRef,\n                                  credentials: ProjectOperationCredentials,\n                                  addressChannels: AddressChannels,\n                                  ctx: HandlerContext): Promise<any> {\n    const p = await GitCommandGitProject.cloned(credentials, id);\n    const tags: Tags = await tagger(p, ctx, undefined);\n    if (tags.tags.length > 0) {\n        // Add existing tags so they're not lost\n        tags.tags = tags.tags.concat(await listTopics(credentials, id));\n\n        await addressChannels(`Tagging \\`${id.owner}/${id.repo}\\` with tags ${format(tags.tags)}`);\n        const edp: EditorOrReviewerParameters = {\n            targets: {\n                owner: id.owner,\n                repo: id.repo,\n                sha: \"master\",\n                usesRegex: false,\n                credentials,\n                repoRef: id,\n                test: () => true,\n            },\n        };\n        return doWithRetry(() => GitHubTagRouter(tags, edp, undefined),\n            \"Publish tags\", {\n                randomize: true,\n                retries: 30,\n            });\n    }\n}\n\nfunction format(tags: string[]) {\n    return tags.map(t => \"`\" + t + \"`\").join(\", \");\n}\n"]}