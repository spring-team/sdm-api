{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/slack/reportFailureInterpretationTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/slack/reportFailureInterpretationTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { SlackMessage } from \"@atomist/slack-messages\";\nimport * as assert from \"power-assert\";\nimport { AddressChannels } from \"../../../src/common/slack/addressChannels\";\n\nimport { InterpretedLog } from \"../../../src/spi/log/InterpretedLog\";\nimport { reportFailureInterpretationToLinkedChannels } from \"../../../src/util/slack/reportFailureInterpretationToLinkedChannels\";\n\ndescribe(\"Reporting failure interpretation\", () => {\n\n    class AddressChannelsSpy {\n        public messagesSent: SlackMessage[] = [];\n        get sentFullLog() {\n            return !!this.messagesSent.find(m => (m as any).fileType === \"text\");\n        }\n    }\n\n    function fakeAddressChannels(): [AddressChannels, AddressChannelsSpy] {\n        const spy = new AddressChannelsSpy();\n        const ac = async (msg, opts) => {\n            spy.messagesSent.push(msg);\n        };\n        return [ac, spy];\n    }\n\n    it(\"Reports the full log if requested\", async () => {\n\n        const [ac, spy] = fakeAddressChannels();\n\n        const interpretedLog: InterpretedLog = {\n            relevantPart: \"busted\",\n            message: \"Hi\",\n            includeFullLog: true,\n        };\n        const fullLog = {log: \"you are so busted\"};\n        await reportFailureInterpretationToLinkedChannels(\"stepName\",\n            interpretedLog, fullLog, {sha: \"abc\"} as RemoteRepoRef, ac);\n\n        assert(spy.sentFullLog);\n    });\n\n    it(\"Does not send the full log if specifically unrequested\", async () => {\n\n        const [ac, spy] = fakeAddressChannels();\n\n        const interpretedLog: InterpretedLog = {\n            relevantPart: \"busted\",\n            message: \"Hi\",\n            includeFullLog: false,\n        };\n        const fullLog = {url: \"here\", log: \"you are so busted\"};\n        await reportFailureInterpretationToLinkedChannels(\"stepName\",\n            interpretedLog, fullLog, {sha: \"abc\"} as RemoteRepoRef, ac);\n\n        assert(!spy.sentFullLog);\n    });\n\n    it(\"Does not report the full log if unspecified, and the log is available at a url\", async () => {\n\n        const [ac, spy] = fakeAddressChannels();\n\n        const interpretedLog: InterpretedLog = {\n            relevantPart: \"busted\",\n            message: \"Hi\",\n        };\n        const fullLog = {url: \"here\", log: \"you are so busted\"};\n        await reportFailureInterpretationToLinkedChannels(\"stepName\",\n            interpretedLog, fullLog, {sha: \"abc\"} as RemoteRepoRef, ac);\n\n        assert(!spy.sentFullLog);\n    });\n\n    it(\"Reports the full log if unspecified, but the log does not have a url\", async () => {\n\n        const [ac, spy] = fakeAddressChannels();\n\n        const interpretedLog: InterpretedLog = {\n            relevantPart: \"busted\",\n            message: \"Hi\",\n        };\n        const fullLog = {log: \"you are so busted\"};\n        await reportFailureInterpretationToLinkedChannels(\"stepName\",\n            interpretedLog, fullLog, {sha: \"abc\"} as RemoteRepoRef, ac);\n\n        assert(spy.sentFullLog);\n    });\n\n});\n"]}