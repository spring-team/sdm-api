{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/project/fileCopyTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/project/fileCopyTest.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,8FAA2F;AAC3F,4FAAyF;AACzF,uCAAuC;AACvC,iEAAoF;AAEpF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IAEtB,EAAE,CAAC,2BAA2B,EAAE,GAAS,EAAE;QACvC,MAAM,SAAS,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;QACvC,MAAM,CAAC,0BAAe,CAAC,+EAA+E,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/H,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEjB,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;QACjD,MAAM,OAAO,GAAG,IAAI,6BAAa,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;QACrE,MAAM,YAAY,GAAG,CAAE,SAAS,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;QACvC,MAAM,CAAC,wBAAa,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC5F,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEjB,EAAE,CAAC,kDAAkD,EAAE,GAAS,EAAE;QAC9D,MAAM,OAAO,GAAG,IAAI,6BAAa,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;QACrE,MAAM,YAAY,GAAG,CAAE,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;QACvE,MAAM,SAAS,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;QACvC,MAAM,CAAC,wBAAa,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC5F,MAAM,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC","sourcesContent":["import { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport * as assert from \"power-assert\";\nimport { copyFileFromUrl, copyFilesFrom } from \"../../../src/util/project/fileCopy\";\n\ndescribe(\"fileCopy\", () => {\n\n    it(\"should copy file from url\", async () => {\n        const recipient = InMemoryProject.of();\n        await (copyFileFromUrl(\"https://raw.githubusercontent.com/spring-team/spring-rest-seed/master/pom.xml\", \"pom.xml\"))(recipient);\n        assert(!!(await recipient.getFile(\"pom.xml\")));\n    }).timeout(5000);\n\n    it(\"should copy file from donor project\", async () => {\n        const donorId = new GitHubRepoRef(\"spring-team\", \"spring-rest-seed\");\n        const filesToSteal = [ \"pom.xml\"];\n        const recipient = InMemoryProject.of();\n        await (copyFilesFrom(donorId, filesToSteal, { token: process.env.GITHUB_TOKEN}))(recipient);\n        assert(!!(await recipient.getFile(filesToSteal[0])));\n    }).timeout(5000);\n\n    it(\"should copy file from donor project with mapping\", async () => {\n        const donorId = new GitHubRepoRef(\"spring-team\", \"spring-rest-seed\");\n        const filesToSteal = [ { donorPath: \"pom.xml\", recipientPath: \"foo\" }];\n        const recipient = InMemoryProject.of();\n        await (copyFilesFrom(donorId, filesToSteal, { token: process.env.GITHUB_TOKEN}))(recipient);\n        assert(!(await recipient.getFile(filesToSteal[0].donorPath)));\n        assert(!!(await recipient.getFile(filesToSteal[0].recipientPath)));\n    }).timeout(5000);\n});\n"]}