{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/editorWrappers.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/editorWrappers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport {\n    AnyProjectEditor, EditResult, ProjectEditor,\n    toEditor,\n} from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { spawn, SpawnOptions } from \"child_process\";\nimport { ProgressLog } from \"../../../spi/log/ProgressLog\";\nimport { confirmEditedness } from \"../../../util/git/confirmEditedness\";\nimport { ChildProcessResult, SpawnCommand, stringifySpawnCommand, watchSpawned } from \"../../../util/misc/spawned\";\nimport { LoggingProgressLog } from \"../../log/LoggingProgressLog\";\n\n/**\n * Decorate an editor factory to make editors it creates chatty, so they respond to\n * Slack if there's nothing to do\n * @param editorName name of the editor\n * @param {(params: PARAMS) => AnyProjectEditor} f\n * @return {(params: PARAMS) => AnyProjectEditor}\n */\nexport function chattyEditorFactory<PARAMS>(editorName: string, f: (params: PARAMS) => AnyProjectEditor): (params: PARAMS) => ProjectEditor {\n    return params => {\n        const underlyingEditor: AnyProjectEditor = f(params);\n        return chattyEditor(editorName, underlyingEditor);\n    };\n}\n\n/**\n * Wrap this editor to make it chatty, so it responds to\n * Slack if there's nothing to do\n * @param editorName name of the editor\n * @param {AnyProjectEditor} underlyingEditor\n * @return {(project: GitProject, context, parms) => Promise<any | EditResult>}\n */\nexport function chattyEditor(editorName: string, underlyingEditor: AnyProjectEditor): ProjectEditor {\n    return async (project: GitProject, context, parms) => {\n        const id = project.id as RemoteRepoRef;\n        try {\n            const tentativeEditResult = await toEditor(underlyingEditor)(project, context, parms);\n            const editResult = await confirmEditedness(tentativeEditResult);\n            logger.debug(\"chattyEditor %s: git status on %j is %j: editResult=%j\", editorName, project.id, await project.gitStatus(), editResult);\n            if (!editResult.edited) {\n                await context.messageClient.respond(`*${editorName}*: Nothing to do on \\`${id.url}\\``);\n            }\n            return editResult;\n        } catch (err) {\n            await context.messageClient.respond(`*${editorName}*: Nothing done on \\`${id.url}\\``);\n            logger.warn(\"Editor error acting on %j: %s\", project.id, err);\n            return {target: project, edited: false, success: false} as EditResult;\n        }\n    };\n}\n\n/**\n * Create a project editor wrapping spawned local commands\n * run on the project\n * @param {SpawnCommand[]} commands to execute\n * @param log progress log (optional, stream to console if not passed in)\n * @return {ProjectEditor}\n */\nexport function localCommandsEditor(commands: SpawnCommand[],\n                                    log: ProgressLog = new LoggingProgressLog(\"commands\")): ProjectEditor {\n    return async (p: GitProject) => {\n        const opts: SpawnOptions = {\n            cwd: p.baseDir,\n        };\n        let commandResult: ChildProcessResult;\n        for (const cmd of commands) {\n            logger.info(\"Executing command %s\", stringifySpawnCommand(cmd));\n            commandResult = await watchSpawned(\n                spawn(cmd.command, cmd.args, { ...opts, ...cmd.options }),\n                log,\n                {\n                    errorFinder: (code, signal) => code !== 0,\n                    stripAnsi: true,\n                });\n            if (commandResult.error) {\n                logger.warn(\"Error in command %s: %s\", stringifySpawnCommand(cmd), commandResult.error);\n                break;\n            }\n        }\n        const status = await p.gitStatus();\n        return {edited: !status.isClean, target: p, success: !commandResult.error};\n    };\n}\n"]}