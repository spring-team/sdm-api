{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/executePushReactions.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/executePushReactions.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAA6D;AAI7D,6FAA0F;AAC1F,yEAMoC;AAEpC;;;;;GAKG;AACH,8BAAqC,aAA4B,EAC5B,aAAyC;IAC1E,OAAO,CAAO,IAAuB,EAAE,EAAE;QACrC,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,OAAO,2BAAO,CAAC;SAClB;QAED,MAAM,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAC,GAAG,IAAI,CAAC;QACxC,OAAO,aAAa,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,CAAM,OAAO,EAAC,EAAE;YAC3F,MAAM,GAAG,GAAiC,MAAM,uEAAkC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAClG,MAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,qDAA0B,CAAC,CAAC;YAC3D,MAAM,qBAAqB,GAA+B,MAAM,8CAAmB,CAA2B,IAAI,EAAE,GAAG,CAAC,CAAC;YACzH,0BAAM,CAAC,IAAI,CAAC,kEAAkE,EAC1E,qBAAqB,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,EAC1D,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAC7C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAClC,MAAM,YAAY,GAAU,MAAM,OAAO,CAAC,GAAG,CAAC,qBAAqB;iBAC9D,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,MAAM,GAAG;gBACX,IAAI,EAAE,YAAY,CAAC,QAAQ,CAAC,+CAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnE,eAAe,EAAE,YAAY,CAAC,QAAQ,CAAC,+CAAoB,CAAC,wBAAwB,CAAC;aACxF,CAAC;YACF,0BAAM,CAAC,IAAI,CAAC,2CAA2C,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;YAC/E,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAA,CAAC;AACN,CAAC;AA1BD,oDA0BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, Success } from \"@atomist/automation-client\";\nimport { PushImpactListenerInvocation } from \"../../listener/PushImpactListener\";\nimport { ProjectLoader } from \"../../repo/ProjectLoader\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../goals/support/reportGoalError\";\nimport { createPushImpactListenerInvocation } from \"./createPushImpactListenerInvocation\";\nimport {\n    PushReactionRegisterable,\n    PushReactionRegistration,\n    PushReactionResponse,\n    relevantCodeActions,\n    toPushReactionRegistration,\n} from \"./PushReactionRegistration\";\n\n/**\n * Execute arbitrary code reactions against a codebase\n * @param {ProjectLoader} projectLoader\n * @param {PushReactionRegistration[]} registrations\n * @return {ExecuteGoalWithLog}\n */\nexport function executePushReactions(projectLoader: ProjectLoader,\n                                     registrations: PushReactionRegisterable[]): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext) => {\n        if (registrations.length === 0) {\n            return Success;\n        }\n\n        const {credentials, id, context} = rwlc;\n        return projectLoader.doWithProject({credentials, id, context, readOnly: true}, async project => {\n            const cri: PushImpactListenerInvocation = await createPushImpactListenerInvocation(rwlc, project);\n            const regs = registrations.map(toPushReactionRegistration);\n            const relevantCodeReactions: PushReactionRegistration[] = await relevantCodeActions<PushReactionRegistration>(regs, cri);\n            logger.info(\"Will invoke %d eligible code reactions of %d to %j: [%s] of [%s]\",\n                relevantCodeReactions.length, registrations.length, cri.id,\n                relevantCodeReactions.map(a => a.name).join(),\n                regs.map(a => a.name).join());\n            const allReactions: any[] = await Promise.all(relevantCodeReactions\n                .map(reactionReg => reactionReg.action(cri)));\n            const result = {\n                code: allReactions.includes(PushReactionResponse.failGoals) ? 1 : 0,\n                requireApproval: allReactions.includes(PushReactionResponse.requireApprovalToProceed),\n            };\n            logger.info(\"Code reaction responses are %j, result=%j\", allReactions, result);\n            return result;\n        });\n    };\n}\n"]}