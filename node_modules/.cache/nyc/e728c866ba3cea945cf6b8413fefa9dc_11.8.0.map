{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnRepoCreation.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnRepoCreation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AAExE,2EAA0E;AAE1E,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,cAAc,GAA3B;IAII,YAAY,cAAsC,EACrB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAChE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAEY,MAAM,CAAC,KAAqD,EACrD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjF,MAAM,UAAU,GAAmC;gBAC/C,eAAe,EAAE,mCAAiB;gBAClC,EAAE;gBACF,OAAO;gBACP,IAAI;gBACJ,WAAW;aACd,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjE,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAzBY,cAAc;IAD1B,gCAAY,CAAC,kBAAkB,EAAE,sBAAY,CAAC,gBAAgB,CAAC,CAAC;;GACpD,cAAc,CAyB1B;AAzBY,wCAAc","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { RepoCreationListener, RepoCreationListenerInvocation } from \"../../../common/listener/RepoCreationListener\";\nimport { AddressNoChannels } from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A new repo has been created. We don't know if it has code.\n */\n@EventHandler(\"On repo creation\", subscription(\"OnRepoCreation\"))\nexport class OnRepoCreation implements HandleEvent<schema.OnRepoCreation.Subscription> {\n\n    private readonly newRepoActions: RepoCreationListener[];\n\n    constructor(newRepoActions: RepoCreationListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n        this.newRepoActions = newRepoActions;\n    }\n\n    public async handle(event: EventFired<schema.OnRepoCreation.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const repo = event.data.Repo[0];\n        const id = toRemoteRepoRef(repo);\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n        const invocation: RepoCreationListenerInvocation = {\n            addressChannels: AddressNoChannels,\n            id,\n            context,\n            repo,\n            credentials,\n        };\n        await Promise.all(params.newRepoActions.map(a => a(invocation)));\n        return Success;\n    }\n}\n"]}