{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/support/patternMatchReviewer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/support/patternMatchReviewer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAEpD,uFAAmF;AAInF,4BAA4B;AA4B5B;;;;;;GAMG;AACH,8BAAqC,IAAY,EACZ,IAAiC,EACjC,GAAG,YAA2B;IAC/D,OAAO;QACH,IAAI;QACJ,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,MAAM,EAAE,CAAM,GAAG,EAAC,EAAE;YAChB,0BAAM,CAAC,KAAK,CAAC,6CAA6C,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAClG,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YAC5B,MAAM,MAAM,GAAkB,EAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC;YACjE,MAAM,0BAAW,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAM,CAAC,EAAC,EAAE;gBACnD,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;gBACrC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBAC3B,MAAM,GAAG,GAAG,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC;wBACjD,IAAI,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;wBACjD,OAAO,CAAC,WAAW,CAAC;oBACxB,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;wBACnB,0BAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,IAAI,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;wBACjF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;4BACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,OAAO;4BAClC,MAAM,EAAE,OAAO,CAAC,OAAO;4BACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI;4BAC/B,cAAc,EAAE;gCACZ,IAAI,EAAE,CAAC,CAAC,IAAI;gCACZ,MAAM,EAAE,SAAS;gCACjB,SAAS,EAAE,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC;6BAC1C;yBACJ,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAA,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA;KACJ,CAAC;AACN,CAAC;AAlCD,oDAkCC;AAED,wBAAwB,MAAc,EAAE,KAAa;IACjD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,OAAO,SAAS,GAAG,CAAC,CAAC;AACzB,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProjectReview, Severity } from \"@atomist/automation-client/operations/review/ReviewResult\";\nimport { doWithFiles } from \"@atomist/automation-client/project/util/projectUtils\";\nimport { PushTest } from \"../../../../listener/PushTest\";\nimport { ReviewerRegistration } from \"../ReviewerRegistration\";\n\nimport * as _ from \"lodash\";\n\n/**\n * Antipattern we'll look for. Can be defined as a regex or a string.\n */\nexport interface AntiPattern {\n    name: string;\n    antiPattern: RegExp | string;\n    comment: string;\n}\n\nexport interface PatternMatchReviewerOptions {\n\n    /**\n     * PushTest to narrow review applicability\n     */\n    pushTest?: PushTest;\n\n    /**\n     * Glob pattern for files to check\n     */\n    globPattern: string;\n\n    category?: string;\n\n    severity?: Severity;\n}\n\n/**\n * Return a ReviewerRegistration that objects to the given antipatterns and looks in the specified files\n * @param {string} name\n * @param opts targeting options\n * @param {AntiPattern} antiPatterns\n * @return {ReviewerRegistration}\n */\nexport function patternMatchReviewer(name: string,\n                                     opts: PatternMatchReviewerOptions,\n                                     ...antiPatterns: AntiPattern[]): ReviewerRegistration {\n    return {\n        name,\n        pushTest: opts.pushTest,\n        action: async cri => {\n            logger.debug(\"Running regexp review '%s' on %s against %j\", name, opts.globPattern, antiPatterns);\n            const project = cri.project;\n            const result: ProjectReview = {repoId: project.id, comments: []};\n            await doWithFiles(project, opts.globPattern, async f => {\n                const content = await f.getContent();\n                antiPatterns.forEach(problem => {\n                    const rex = typeof problem.antiPattern === \"string\" ?\n                        new RegExp(_.escapeRegExp(problem.antiPattern)) :\n                        problem.antiPattern;\n                    if (rex.test(content)) {\n                        logger.info(\"%s: Antipattern %s found in %s\", name, problem.antiPattern, f.path);\n                        result.comments.push({\n                            severity: opts.severity || \"error\",\n                            detail: problem.comment,\n                            category: opts.category || name,\n                            sourceLocation: {\n                                path: f.path,\n                                offset: undefined,\n                                lineFrom1: findLineNumber(content, rex),\n                            },\n                        });\n                    }\n                });\n            });\n            return result;\n        },\n    };\n}\n\nfunction findLineNumber(source: string, regex: RegExp): number {\n    const lines = source.split(\"\\n\");\n    const lineFrom0 = lines.findIndex(l => regex.test(l));\n    return lineFrom0 + 1;\n}\n"]}