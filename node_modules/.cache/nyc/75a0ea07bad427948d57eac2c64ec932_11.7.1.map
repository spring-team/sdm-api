{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/SdmGoalImplementationMapper.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/SdmGoalImplementationMapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IsolatedGoalLauncher } from \"../../../handlers/events/delivery/goals/launchGoal\";\nimport { SdmGoal } from \"../../../ingesters/sdmGoalIngester\";\nimport { InterpretLog } from \"../../../spi/log/InterpretedLog\";\nimport { RepoContext } from \"../../context/SdmContext\";\nimport { PushListenerInvocation } from \"../../listener/PushListener\";\nimport { PushTest } from \"../../listener/PushTest\";\nimport { Goal } from \"./Goal\";\nimport { ExecuteGoalWithLog } from \"./support/reportGoalError\";\n\nexport type GoalFulfillment = GoalImplementation | GoalSideEffect;\n\nexport interface GoalImplementation {\n    implementationName: string;\n    goal: Goal;\n    goalExecutor: ExecuteGoalWithLog;\n    pushTest: PushTest;\n    logInterpreter: InterpretLog;\n}\n\nexport function isGoalImplementation(f: GoalFulfillment): f is GoalImplementation {\n    return !!f && !!(f as GoalImplementation).implementationName && true;\n}\n\nexport interface GoalSideEffect {\n    sideEffectName: string;\n    goal: Goal;\n    pushTest: PushTest;\n}\n\nexport function isSideEffect(f: GoalFulfillment): f is GoalSideEffect {\n    return !!f && (f as GoalSideEffect).sideEffectName && true;\n}\n\n/**\n * Callback to allow changes to the goal before it gets fullfilled.\n *\n * This is useful to add goal specific information to the data field.\n */\nexport interface GoalFullfillmentCallback {\n    goal: Goal;\n    callback: (goal: SdmGoal, context: RepoContext) => Promise<SdmGoal>;\n}\n\nexport class SdmGoalImplementationMapper {\n\n    private readonly implementations: GoalImplementation[] = [];\n    private readonly sideEffects: GoalSideEffect[] = [];\n    private readonly callbacks: GoalFullfillmentCallback[] = [];\n\n    constructor(private readonly goalLauncher: IsolatedGoalLauncher) {}\n\n    public findImplementationBySdmGoal(goal: SdmGoal): GoalImplementation {\n        const matchedNames = this.implementations.filter(m =>\n            m.implementationName === goal.fulfillment.name &&\n            m.goal.context === goal.externalKey);\n        if (matchedNames.length > 1) {\n            throw new Error(\"Multiple mappings for name \" + goal.fulfillment.name);\n        }\n        if (matchedNames.length === 0) {\n            throw new Error(\"No implementation found with name \" + goal.fulfillment.name);\n        }\n        return matchedNames[0];\n    }\n\n    public addImplementation(implementation: GoalImplementation): this {\n        this.implementations.push(implementation);\n        return this;\n    }\n\n    public addSideEffect(sideEffect: GoalSideEffect): this {\n        this.sideEffects.push(sideEffect);\n        return this;\n    }\n\n    public addFullfillmentCallback(callback: GoalFullfillmentCallback): this {\n        this.callbacks.push(callback);\n        return this;\n    }\n\n    public async findFulfillmentByPush(goal: Goal, inv: PushListenerInvocation): Promise<GoalFulfillment | undefined> {\n        const implementationsForGoal = this.implementations.filter(m => m.goal.name === goal.name\n            && m.goal.environment === goal.environment);\n        for (const implementation of implementationsForGoal) {\n            if (await implementation.pushTest.valueForPush(inv)) {\n                return implementation;\n            }\n        }\n        const knownSideEffects = this.sideEffects.filter(m => m.goal.name === goal.name\n            && m.goal.environment === goal.environment);\n        for (const sideEffect of knownSideEffects) {\n            if (await sideEffect.pushTest.valueForPush(inv)) {\n                return sideEffect;\n            }\n        }\n        return undefined;\n    }\n\n    public findFullfillmentCallbackForGoal(g: SdmGoal): GoalFullfillmentCallback[] {\n        return this.callbacks.filter(c =>\n            c.goal.name === g.name &&\n            // This slice is required because environment is suffixed with /\n            (c.goal.definition.environment.slice(0, -1) === g.environment\n                || c.goal.definition.environment === g.environment));\n    }\n\n    public getIsolatedGoalLauncher(): IsolatedGoalLauncher {\n        return this.goalLauncher;\n    }\n}\n"]}