{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/slack/addressChannels.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/slack/addressChannels.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAGH,wFAI8D;AAS9D;;;GAGG;AACU,QAAA,iBAAiB,GAAoB,GAAS,EAAE,gDAAC,OAAA,SAAS,CAAA,GAAA,CAAC;AASxE;;;;;;GAMG;AACH,4BAAmC,WAAwB,EAAE,GAAmB;IAC5E,IAAI,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACzD,OAAO,mBAAmB,CAAC,GAAG,EAAE,GAAG,sBAAsB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;KAChF;SAAM;QACH,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;KAClC;AACL,CAAC;AAND,gDAMC;AAED,gCAAuC,WAAwB,EAAE,GAAoB;IACjF,OAAO,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,oCAAoB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,CAAC;AAFD,wDAEC;AAED,6BAAoC,GAAmB,EAAE,GAAG,YAA2B;IACnF,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAC1E,CAAC;AAFD,kDAEC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext } from \"@atomist/automation-client\";\nimport {\n    addressSlackChannels,\n    Destination,\n    MessageOptions,\n} from \"@atomist/automation-client/spi/message/MessageClient\";\nimport { SlackMessage } from \"@atomist/slack-messages\";\n\n/**\n * Allows us to address channels for a particular repo or any GraphQL\n * type with channels\n */\nexport type AddressChannels = (msg: string | SlackMessage, opts?: MessageOptions) => Promise<any>;\n\n/**\n * Throw away contents. Use when we know that there can be no linked channels.\n * @constructor\n */\nexport const AddressNoChannels: AddressChannels = async () => undefined;\n\n/**\n * Interface for anything, like a repo, that has associated chat channel information\n */\nexport interface HasChannels {\n    channels?: Array<{ name?: string, id?: string, team?: { id?: string }}>;\n}\n\n/**\n * Address the chat channels associated with this object.\n * Typically used to address channels associated with a repo.\n * @param {HasChannels} hasChannels\n * @param {HandlerContext} ctx\n * @return {AddressChannels}\n */\nexport function addressChannelsFor(hasChannels: HasChannels, ctx: HandlerContext): AddressChannels {\n    if (hasChannels.channels && hasChannels.channels.length > 0) {\n        return addressDestinations(ctx, ...messageDestinationsFor(hasChannels, ctx));\n    } else {\n        return () => Promise.resolve();\n    }\n}\n\nexport function messageDestinationsFor(hasChannels: HasChannels, ctx?: HandlerContext): Destination[] {\n    return hasChannels.channels.map(ch => addressSlackChannels(ch.team.id, ch.name));\n}\n\nexport function addressDestinations(ctx: HandlerContext, ...destinations: Destination[]): AddressChannels {\n    return (msg, opts) => ctx.messageClient.send(msg, destinations, opts);\n}\n"]}