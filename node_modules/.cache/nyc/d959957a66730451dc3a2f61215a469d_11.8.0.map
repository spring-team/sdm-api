{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/project/fileCopy.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/project/fileCopy.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kEAAoD;AAIpD,sGAAmG;AAEnG,iCAA0B;AAE1B;;;;;GAKG;AACH,yBAAgC,GAAW,EAAE,IAAY;IACrD,OAAO,CAAM,CAAC,EAAC,EAAE;QACb,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAA,CAAC;AACN,CAAC;AALD,0CAKC;AAOD;;;;;;GAMG;AACH,uBAA8B,cAA6B,EAC7B,YAAyC,EACzC,WAAwC;IAClE,OAAO,CAAM,CAAC,EAAC,EAAE;QACb,MAAM,YAAY,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACpF,OAAO,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAA,CAAC;AACN,CAAC;AAPD,sCAOC;AAED,mBAA0B,YAAqB,EACrB,YAAyC;IAC/D,OAAO,CAAM,CAAC,EAAC,EAAE;QACb,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE;YAC1B,MAAM,EAAE,GAAG,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAC,SAAS,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;YACvD,IAAI,KAAK,EAAE;gBACP,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;aAC/D;iBAAM;gBACH,0BAAM,CAAC,IAAI,CAAC,4CAA4C,EAAE,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;aACxH;SACJ;QACD,OAAO,CAAC,CAAC;IACb,CAAC,CAAA,CAAC;AACN,CAAC;AAdD,8BAcC","sourcesContent":["import { logger } from \"@atomist/automation-client\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { SimpleProjectEditor } from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport axios from \"axios\";\n\n/**\n * Add the downloaded content to the given project\n * @param {string} url url of the content. Must be publicly accessible\n * @param {string} path\n * @return {SimpleProjectEditor}\n */\nexport function copyFileFromUrl(url: string, path: string): SimpleProjectEditor {\n    return async p => {\n        const response = await axios.get(url);\n        return p.addFile(path, response.data);\n    };\n}\n\nexport interface FileMapping {\n    donorPath: string;\n    recipientPath: string;\n}\n\n/**\n * Take the specified files from the donor project\n * @param {RemoteRepoRef} donorProjectId\n * @param {FileMapping[]} fileMappings\n * @param {ProjectOperationCredentials} credentials\n * @return {SimpleProjectEditor}\n */\nexport function copyFilesFrom(donorProjectId: RemoteRepoRef,\n                              fileMappings: Array<FileMapping | string>,\n                              credentials: ProjectOperationCredentials): SimpleProjectEditor {\n    return async p => {\n        const donorProject = await GitCommandGitProject.cloned(credentials, donorProjectId);\n        return copyFiles(donorProject, fileMappings)(p);\n    };\n}\n\nexport function copyFiles(donorProject: Project,\n                          fileMappings: Array<FileMapping | string>): SimpleProjectEditor {\n    return async p => {\n        for (const m of fileMappings) {\n            const fm = typeof m === \"string\" ? {donorPath: m, recipientPath: m} : m;\n            const found = await donorProject.getFile(fm.donorPath);\n            if (found) {\n                await p.addFile(fm.recipientPath, await found.getContent());\n            } else {\n                logger.warn(\"Path '%s' not found in donor project %s:%s\", fm.donorPath, donorProject.id.owner, donorProject.id.repo);\n            }\n        }\n        return p;\n    };\n}\n"]}