{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/RequestDownstreamGoalsOnGoalSuccess.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/RequestDownstreamGoalsOnGoalSuccess.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EventFired,\n    EventHandler,\n    HandleEvent,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Success,\n    Value,\n} from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport * as _ from \"lodash\";\nimport { fetchGoalsForCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { preconditionsAreMet } from \"../../../../common/delivery/goals/support/goalPreconditions\";\nimport { SdmGoalImplementationMapper } from \"../../../../common/delivery/goals/support/SdmGoalImplementationMapper\";\nimport { updateGoal } from \"../../../../common/delivery/goals/support/storeGoals\";\nimport {\n    goalKeyString,\n    SdmGoal,\n    SdmGoalKey,\n} from \"../../../../ingesters/sdmGoalIngester\";\nimport {\n    OnAnySuccessfulSdmGoal,\n    ScmProvider,\n} from \"../../../../typings/types\";\nimport { repoRefFromSdmGoal } from \"../../../../util/git/repoRef\";\n\n/**\n * Respond to a failure status by failing downstream goals\n */\n@EventHandler(\"Move downstream goals from 'planned' to 'success' when preconditions are met\",\n    subscription(\"OnAnySuccessfulSdmGoal\"))\nexport class RequestDownstreamGoalsOnGoalSuccess implements HandleEvent<OnAnySuccessfulSdmGoal.Subscription> {\n\n    @Value(\"token\")\n    public githubToken: string;\n\n    constructor(private readonly implementationMapper: SdmGoalImplementationMapper) { }\n\n    // #98: GitHub Status->SdmGoal: I believe all the goal state updates in this SDM\n    // are now happening on the SdmGoal. This subscription can change to be on SdmGoal state.\n    public async handle(event: EventFired<OnAnySuccessfulSdmGoal.Subscription>,\n                        context: HandlerContext): Promise<HandlerResult> {\n        const sdmGoal = event.data.SdmGoal[0] as SdmGoal;\n\n        if (sdmGoal.state !== \"success\") { // atomisthq/automation-api#395\n            logger.debug(`Nevermind: success reported when the state was=[${sdmGoal.state}]`);\n            return Promise.resolve(Success);\n        }\n\n        const id = repoRefFromSdmGoal(sdmGoal, await fetchScmProvider(context, sdmGoal.repo.providerId));\n        const goals: SdmGoal[] = sumSdmGoalEventsByOverride(await fetchGoalsForCommit(context, id, sdmGoal.repo.providerId) as SdmGoal[], [sdmGoal]);\n\n        const goalsToRequest = goals.filter(g => isDirectlyDependentOn(sdmGoal, g))\n            // .filter(expectToBeFulfilledAfterRequest)\n            .filter(shouldBePlannedOrSkipped)\n            .filter(g => preconditionsAreMet(g, { goalsForCommit: goals }));\n\n        if (goalsToRequest.length > 0) {\n            logger.info(\"because %s is successful, these goals are now ready: %s\", goalKeyString(sdmGoal),\n                goalsToRequest.map(goalKeyString).join(\", \"));\n        }\n\n        const credentials = { token: this.githubToken };\n\n        /*\n         * #294 Intention: for custom descriptions per goal, we need to look up the Goal.\n         * This is the only reason to do that here.\n         * I want to maintain a list in the SDM of all goals that can be assigned by rules,\n         * and pass them here for mapping from SdmGoalKey -> Goal. Then, we can use\n         * the requestDescription defined on that Goal.\n         */\n        await Promise.all(goalsToRequest.map(async goal => {\n            const cbs = this.implementationMapper.findFullfillmentCallbackForGoal(goal);\n            let g = goal;\n            for (const cb of cbs) {\n                g = await cb.callback(g, { id, addressChannels: undefined, credentials, context });\n            }\n\n            return updateGoal(context, g, {\n                state: \"requested\",\n                description: `Ready to ` + g.name,\n                data: g.data,\n            });\n        }));\n        return Success;\n    }\n}\n\nexport function sumSdmGoalEventsByOverride(some: SdmGoal[], more: SdmGoal[]): SdmGoal[] {\n    // For some reason this won't compile with the obvious fix\n    // tslint:disable-next-line:no-unnecessary-callback-wrapper\n    const byKey = _.groupBy(some.concat(more), sg => goalKeyString(sg));\n    const summedGoals = Object.keys(byKey).map(k => sumEventsForOneSdmGoal(byKey[k]));\n    return summedGoals;\n}\n\nfunction sumEventsForOneSdmGoal(events: SdmGoal[]): SdmGoal {\n    if (events.length === 1) {\n        return events[0];\n    }\n    // here, I could get clever and sort by timestamp, or someday build a graph if they link to prior versions,\n    // or get smart about statuses. Let me be lazy.\n    logger.debug(\"Found %d events for %s. Taking the last one, which has state %s\", events.length, goalKeyString(events[0]),\n        events[events.length - 1].state);\n    return events[events.length - 1];\n}\n\nexport async function fetchScmProvider(context: HandlerContext, providerId: string): Promise<ScmProvider.ScmProvider> {\n    const result = await context.graphClient.query<ScmProvider.Query, ScmProvider.Variables>(\n        { name: \"SCMProvider\", variables: { providerId } });\n    if (!result || !result.SCMProvider || result.SCMProvider.length === 0) {\n        throw new Error(`Provider not found: ${providerId}`);\n    }\n    return result.SCMProvider[0];\n}\n\nfunction shouldBePlannedOrSkipped(dependentGoal: SdmGoal) {\n    if (dependentGoal.state === \"planned\") {\n        return true;\n    }\n    if (dependentGoal.state === \"skipped\") {\n        logger.info(\"Goal %s was skipped, but now maybe it can go\", dependentGoal.name);\n        return true;\n    }\n    if (dependentGoal.state === \"failure\" && dependentGoal.retryFeasible) {\n        logger.info(\"Goal %s failed, but maybe we will retry it\", dependentGoal.name);\n        return true;\n    }\n    logger.warn(\"Goal %s in state %s will not be requested\", dependentGoal.name, dependentGoal.state);\n    return false;\n}\n\n// tslint:disable-next-line:no-unused-variable\nfunction expectToBeFulfilledAfterRequest(dependentGoal: SdmGoal) {\n    switch (dependentGoal.fulfillment.method) {\n        case \"SDM fulfill on requested\":\n            return true;\n        case \"side-effect\":\n            return false;\n        case \"other\":\n            // legacy behavior\n            return true;\n    }\n}\n\nfunction mapKeyToGoal<T extends SdmGoalKey>(goals: T[]): (SdmGoalKey) => T {\n    return (keyToFind: SdmGoalKey) => {\n        const found = goals.find(g =>\n            g.environment === keyToFind.environment &&\n            g.name === keyToFind.name);\n        return found;\n    };\n}\n\nfunction isDirectlyDependentOn(successfulGoal: SdmGoalKey, goal: SdmGoal): boolean {\n    if (!goal) {\n        logger.warn(\"Internal error: Trying to work out if %j is dependent on null or undefined goal\", successfulGoal);\n        return false;\n    }\n    if (!goal.preConditions || goal.preConditions.length === 0) {\n        return false; // no preconditions? not dependent\n    }\n    if (mapKeyToGoal(goal.preConditions)(successfulGoal)) {\n        logger.debug(\"%s depends on %s\", goal.name, successfulGoal.name);\n        return true; // the failed goal is one of my preconditions? dependent\n    }\n    return false;\n}\n"]}