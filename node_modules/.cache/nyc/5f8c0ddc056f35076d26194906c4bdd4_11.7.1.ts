"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_7h93ey0ax=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/dryRunEditor.ts",hash="2d062760539db2833dc9ea230366a3975a46ce8d",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/dryRunEditor.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:28},end:{line:18,column:65}},"2":{start:{line:19,column:35},end:{line:19,column:115}},"3":{start:{line:20,column:26},end:{line:20,column:95}},"4":{start:{line:21,column:16},end:{line:21,column:44}},"5":{start:{line:22,column:34},end:{line:22,column:82}},"6":{start:{line:23,column:26},end:{line:23,column:58}},"7":{start:{line:24,column:24},end:{line:24,column:51}},"8":{start:{line:25,column:25},end:{line:25,column:53}},"9":{start:{line:26,column:30},end:{line:26,column:62}},"10":{start:{line:27,column:0},end:{line:27,column:42}},"11":{start:{line:41,column:4},end:{line:43,column:5}},"12":{start:{line:42,column:8},end:{line:42,column:64}},"13":{start:{line:44,column:25},end:{line:54,column:22}},"14":{start:{line:44,column:185},end:{line:44,column:293}},"15":{start:{line:45,column:12},end:{line:45,column:111}},"16":{start:{line:46,column:32},end:{line:46,column:93}},"17":{start:{line:47,column:27},end:{line:52,column:13}},"18":{start:{line:53,column:12},end:{line:53,column:254}},"19":{start:{line:55,column:4},end:{line:55,column:176}},"20":{start:{line:57,column:0},end:{line:57,column:36}},"21":{start:{line:59,column:4},end:{line:59,column:49}}},fnMap:{"0":{name:"dryRunEditor",decl:{start:{line:40,column:9},end:{line:40,column:21}},loc:{start:{line:40,column:96},end:{line:56,column:1}},line:40},"1":{name:"(anonymous_1)",decl:{start:{line:44,column:180},end:{line:44,column:181}},loc:{start:{line:44,column:185},end:{line:44,column:293}},line:44},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:306},end:{line:44,column:307}},loc:{start:{line:44,column:318},end:{line:54,column:9}},line:44},"3":{name:"toAtomistCommitMessage",decl:{start:{line:58,column:9},end:{line:58,column:31}},loc:{start:{line:58,column:51},end:{line:60,column:1}},line:58}},branchMap:{"0":{loc:{start:{line:40,column:27},end:{line:40,column:74}},type:"default-arg",locations:[{start:{line:40,column:41},end:{line:40,column:74}}],line:40},"1":{loc:{start:{line:40,column:82},end:{line:40,column:94}},type:"default-arg",locations:[{start:{line:40,column:92},end:{line:40,column:94}}],line:40},"2":{loc:{start:{line:41,column:4},end:{line:43,column:5}},type:"if",locations:[{start:{line:41,column:4},end:{line:43,column:5}},{start:{line:41,column:4},end:{line:43,column:5}}],line:41},"3":{loc:{start:{line:44,column:54},end:{line:44,column:81}},type:"binary-expr",locations:[{start:{line:44,column:54},end:{line:44,column:73}},{start:{line:44,column:77},end:{line:44,column:81}}],line:44},"4":{loc:{start:{line:46,column:32},end:{line:46,column:93}},type:"binary-expr",locations:[{start:{line:46,column:32},end:{line:46,column:62}},{start:{line:46,column:66},end:{line:46,column:85}},{start:{line:46,column:89},end:{line:46,column:93}}],line:46},"5":{loc:{start:{line:53,column:65},end:{line:53,column:121}},type:"binary-expr",locations:[{start:{line:53,column:65},end:{line:53,column:89}},{start:{line:53,column:93},end:{line:53,column:121}}],line:53},"6":{loc:{start:{line:53,column:146},end:{line:53,column:202}},type:"binary-expr",locations:[{start:{line:53,column:146},end:{line:53,column:173}},{start:{line:53,column:177},end:{line:53,column:202}}],line:53}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_7h93ey0ax.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const automation_client_1=(cov_7h93ey0ax.s[1]++,require("@atomist/automation-client"));const allReposInTeamRepoFinder_1=(cov_7h93ey0ax.s[2]++,require("@atomist/automation-client/operations/common/allReposInTeamRepoFinder"));const editorToCommand_1=(cov_7h93ey0ax.s[3]++,require("@atomist/automation-client/operations/edit/editorToCommand"));const index_1=(cov_7h93ey0ax.s[4]++,require("../../../../index"));const projectLoaderRepoLoader_1=(cov_7h93ey0ax.s[5]++,require("../../../repo/projectLoaderRepoLoader"));const EmptyParameters_1=(cov_7h93ey0ax.s[6]++,require("../../EmptyParameters"));const editorCommand_1=(cov_7h93ey0ax.s[7]++,require("../editorCommand"));const editorWrappers_1=(cov_7h93ey0ax.s[8]++,require("../editorWrappers"));const NewBranchWithStatus_1=(cov_7h93ey0ax.s[9]++,require("./NewBranchWithStatus"));cov_7h93ey0ax.s[10]++;exports.DryRunContext="atomist-dry-run";/**
 * Wrap an editor in a command handler that sets a dry run status.
 * Typically used to wait for build success or failure, resulting in issue or PR.
 * Allows use of custom parameters as in editorCommand
 * Targeting (targets property) is handled automatically if the parameters
 * do not implement TargetsParams
 * @param edd function to make a fresh editor instance from the params
 * @param name editor name
 * @param paramsMaker parameters factory, typically the name of a class with a no arg constructor
 * @param details optional details to customize behavior
 * Add intent "try edit <name>"
 */function dryRunEditor(edd,paramsMaker=(cov_7h93ey0ax.b[0][0]++,EmptyParameters_1.EmptyParameters),name,details=(cov_7h93ey0ax.b[1][0]++,{})){cov_7h93ey0ax.f[0]++;cov_7h93ey0ax.s[11]++;if(!!details.editMode){cov_7h93ey0ax.b[2][0]++;cov_7h93ey0ax.s[12]++;throw new Error("Cannot set editMode for dryRunEditor");}else{cov_7h93ey0ax.b[2][1]++;}const detailsToUse=(cov_7h93ey0ax.s[13]++,Object.assign({description:(cov_7h93ey0ax.b[3][0]++,details.description)||(cov_7h93ey0ax.b[3][1]++,name),intent:`try edit ${name}`,repoFinder:allReposInTeamRepoFinder_1.allReposInTeam(),repoLoader:p=>{cov_7h93ey0ax.f[1]++;cov_7h93ey0ax.s[14]++;return projectLoaderRepoLoader_1.projectLoaderRepoLoader(new index_1.CachingProjectLoader(),p.targets.credentials);},editMode:params=>{cov_7h93ey0ax.f[2]++;cov_7h93ey0ax.s[15]++;automation_client_1.logger.info("About to create edit mode for dry run editor: params=%j",params);const description=(cov_7h93ey0ax.s[16]++,(cov_7h93ey0ax.b[4][0]++,params.desiredPullRequestTitle)||(cov_7h93ey0ax.b[4][1]++,details.description)||(cov_7h93ey0ax.b[4][2]++,name));const status=(cov_7h93ey0ax.s[17]++,{context:exports.DryRunContext,target_url:"https://www.atomist.com",description,state:"pending"});cov_7h93ey0ax.s[18]++;return new NewBranchWithStatus_1.NewBranchWithStatus((cov_7h93ey0ax.b[5][0]++,params.desiredBranchName)||(cov_7h93ey0ax.b[5][1]++,`edit-${name}-${Date.now()}`),toAtomistCommitMessage((cov_7h93ey0ax.b[6][0]++,params.desiredCommitMessage)||(cov_7h93ey0ax.b[6][1]++,description.substr(0,50)),description),params.targets.credentials,status);}},details));cov_7h93ey0ax.s[19]++;return editorToCommand_1.editorHandler(editorWrappers_1.chattyEditorFactory(name,edd),editorCommand_1.toEditorOrReviewerParametersMaker(paramsMaker),name,detailsToUse);}cov_7h93ey0ax.s[20]++;exports.dryRunEditor=dryRunEditor;function toAtomistCommitMessage(base,description){cov_7h93ey0ax.f[3]++;cov_7h93ey0ax.s[21]++;return`${base}\n\n[atomist] ${description}`;}//# sourceMappingURL=data:application/json;charset=utf-8;base64,