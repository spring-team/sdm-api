{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/executeAutofixesTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/executeAutofixesTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\n\nimport * as assert from \"power-assert\";\nimport { AutofixRegistration } from \"../../../../../src/common/delivery/code/autofix/AutofixRegistration\";\nimport { executeAutofixes } from \"../../../../../src/common/delivery/code/autofix/executeAutofixes\";\nimport { IsTypeScript } from \"../../../../../src/common/listener/support/pushtest/node/tsPushTests\";\nimport { fakeRunWithLogContext } from \"../../../../../src/util/test/fakeRunWithLogContext\";\nimport { SingleProjectLoader } from \"../../../../../src/util/test/SingleProjectLoader\";\n\nconst AddThingAutofix: AutofixRegistration = {\n    name: \"AddThing\",\n    pushTest: IsTypeScript,\n    action: async cri => {\n        await cri.project.addFile(\"thing\", \"1\");\n        return { edited: true, success: true, target: cri.project};\n    },\n};\n\ndescribe(\"executeAutofixes\", () => {\n\n    it(\"should execute none\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const pl = new SingleProjectLoader({ id } as any);\n        const r = await executeAutofixes(pl, [])(fakeRunWithLogContext(id));\n        assert.equal(r.code, 0);\n    });\n\n    it(\"should execute header adder and find no match\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const initialContent = \"public class Thing {}\";\n        const f = new InMemoryFile(\"src/main/java/Thing.java\", initialContent);\n        const p = InMemoryProject.from(id, f);\n        const pl = new SingleProjectLoader(p);\n        const r = await executeAutofixes(pl, [AddThingAutofix])(fakeRunWithLogContext(id));\n        assert.equal(r.code, 0);\n        assert.equal(p.findFileSync(f.path).getContentSync(), initialContent);\n    });\n\n    it(\"should execute header adder and find a match and add a header\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const initialContent = \"public class Thing {}\";\n        const f = new InMemoryFile(\"src/Thing.ts\", initialContent);\n        const p = InMemoryProject.from(id, f, { path: \"LICENSE\", content: \"Apache License\"});\n        (p as any as GitProject).revert = async () => null;\n        (p as any as GitProject).gitStatus = async () => ({ isClean: false } as any);\n        const pl = new SingleProjectLoader(p);\n        const r = await executeAutofixes(pl, [AddThingAutofix])(fakeRunWithLogContext(id));\n        assert.equal(r.code, 0);\n        assert(!!p);\n        const foundFile = p.findFileSync(\"thing\");\n        assert(!!foundFile);\n        assert.equal(foundFile.getContentSync(), \"1\");\n    });\n\n});\n"]}