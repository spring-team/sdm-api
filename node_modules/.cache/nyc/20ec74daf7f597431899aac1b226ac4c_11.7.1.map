{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/lein/leinBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/lein/leinBuilder.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAGH,qEAAkE;AAGlE,8DAAgF;AAEhF,kDAAoE;AAEvD,QAAA,QAAQ,GAAiB,wBAAc,CAAC,MAAM,CAAC,CAAC;AAE7D,qBAA4B,aAA4B,EAAE,GAAG,QAAkB;IAC3E,OAAO,IAAI,2BAAY,CAAC;QACpB,aAAa,EAAE,OAAO,EAAE,kBAAkB,CACtC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,wBAAc,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;KAChD,CAAC,CAAC;AACP,CAAC;AALD,kCAKC;AAEY,QAAA,kBAAkB,GAAiB,GAAG,CAAC,EAAE;IAClD,OAAO;QACH,kDAAkD;QAClD,YAAY,EAAE,SAAS;QACvB,OAAO,EAAE,aAAa;KACzB,CAAC;AACN,CAAC,CAAC;AAEF,4BAAmC,QAAwB;IACvD,OAAO;QACH,IAAI,EAAE,aAAa;QACnB,QAAQ;QACR,WAAW,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,OAAO,IAAI,KAAK,CAAC,CAAC;QACtB,CAAC;QACD,cAAc,EAAE,0BAAkB;QAClC,gBAAgB,EAAE,mBAAmB;QACrC,OAAO,EAAE;YACL,GAAG,oBACI,OAAO,CAAC,GAAG,CACjB;SACJ;KACJ,CAAC;AACN,CAAC;AAfD,gDAeC;AAED,6BAA0C,CAAU;;QAChD,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACnD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9C,OAAO,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;CAAA;AAJD,kDAIC;AAED,MAAM,cAAc,GAAG,2BAAY,CAAC,UAAU,CAC1C,2CAA2C,EAAE;IACzC,IAAI,EAAE,UAAU;CACnB,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { Microgrammar } from \"@atomist/microgrammar/Microgrammar\";\nimport { AppInfo } from \"../../../../../spi/deploy/Deployment\";\nimport { InterpretLog } from \"../../../../../spi/log/InterpretedLog\";\nimport { asSpawnCommand, SpawnCommand } from \"../../../../../util/misc/spawned\";\nimport { ProjectLoader } from \"../../../../repo/ProjectLoader\";\nimport { SpawnBuilder, SpawnBuilderOptions } from \"../SpawnBuilder\";\n\nexport const RunBuild: SpawnCommand = asSpawnCommand(\"lein\");\n\nexport function leinBuilder(projectLoader: ProjectLoader, ...commands: string[]) {\n    return new SpawnBuilder({\n        projectLoader, options: leinBuilderOptions(\n            commands.map(l => asSpawnCommand(l, {}))),\n    });\n}\n\nexport const leinLogInterpreter: InterpretLog = log => {\n    return {\n        // We don't yet know how to interpret clojure logs\n        relevantPart: undefined,\n        message: \"lein errors\",\n    };\n};\n\nexport function leinBuilderOptions(commands: SpawnCommand[]): SpawnBuilderOptions {\n    return {\n        name: \"LeinBuilder\",\n        commands,\n        errorFinder: (code, signal, l) => {\n            return code !== 0;\n        },\n        logInterpreter: leinLogInterpreter,\n        projectToAppInfo: projectCljToAppInfo,\n        options: {\n            env: {\n                ...process.env,\n            },\n        },\n    };\n}\n\nexport async function projectCljToAppInfo(p: Project): Promise<AppInfo> {\n    const projectClj = await p.findFile(\"project.clj\");\n    const content = await projectClj.getContent();\n    return appInfoGrammar.firstMatch(content);\n}\n\nconst appInfoGrammar = Microgrammar.fromString<AppInfo>(\n    \"(defproject ${pkg}/${name} \\\"${version}\\\"\", {\n        name: /[\\w-\\-]+/,\n    });\n"]}