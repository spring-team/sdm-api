{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/EphemeralProgressLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/EphemeralProgressLog.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD;;;;GAIG;AACH;IAMI,YAAmB,IAAY,EAAmB,aAAsB,IAAI;QAAzD,SAAI,GAAJ,IAAI,CAAQ;QAAmB,eAAU,GAAV,UAAU,CAAgB;QAJrE,QAAG,GAAG,EAAE,CAAC;QAET,QAAG,GAAG,SAAS,CAAC;IAEwD,CAAC;IAEnE,WAAW;8DAAK,OAAO,IAAI,CAAC,CAAC,CAAC;KAAA;IAEpC,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEY,KAAK;;YACd,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,0BAAM,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;gBAC/E,0BAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtB,0BAAM,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;aAClF;QACL,CAAC;KAAA;IAEM,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;IACrB,CAAC;CAEJ;AAEY,QAAA,0BAA0B,GAAuB,CAAO,OAAO,EAAE,OAAO,EAAE,EAAE,gDAAC,OAAA,IAAI,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,GAAA,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProgressLog, ProgressLogFactory } from \"../../spi/log/ProgressLog\";\n\n/**\n * Implementation of ProgressLog log that returns\n * an undefined link because it isn't actually persisted.\n * Used when we are not storing a local log.\n */\nclass EphemeralProgressLog implements ProgressLog {\n\n    public log = \"\";\n\n    public url = undefined;\n\n    constructor(public name: string, private readonly writeToLog: boolean = true) {}\n\n    public async isAvailable() { return true; }\n\n    public flush() {\n        return Promise.resolve();\n    }\n\n    public async close(): Promise<any> {\n        if (this.writeToLog) {\n            logger.info(\"vvvvvv CLOSED NON-PERSISTENT LOG ------------------------------\");\n            logger.info(this.log);\n            logger.info(\"^^^^^^ NON-PERSISTENT LOG -------------------------------------\");\n        }\n    }\n\n    public write(what: string) {\n        this.log += what;\n    }\n\n}\n\nexport const createEphemeralProgressLog: ProgressLogFactory = async (context, sdmGoal) => new EphemeralProgressLog(sdmGoal.name);\n"]}