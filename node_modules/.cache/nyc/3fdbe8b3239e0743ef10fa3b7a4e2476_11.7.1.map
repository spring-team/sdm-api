{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/fingerprint/support/typedFingerprintTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/fingerprint/support/typedFingerprintTest.ts"],"names":[],"mappings":";;AAAA,uCAAuC;AACvC,sHAAmH;AACnH,6DAAkE;AAOlE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAE9B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACjC,MAAM,EAAE,GAAG,IAAI,mCAAgB,CAAS,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;YAC5D,IAAI,EAAE,MAAM;YACZ,GAAG,EAAE,EAAE;SACV,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC1B,MAAM,EAAE,GAAG,IAAI,mCAAgB,CAAS,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;YAC5D,IAAI,EAAE,MAAM;YACZ,GAAG,EAAE,EAAE;SACV,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,iBAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from \"power-assert\";\nimport { TypedFingerprint } from \"../../../../../../src/common/delivery/code/fingerprint/support/TypedFingerprint\";\nimport { isValidSHA1 } from \"../../../../../../src/util/misc/sha\";\n\ninterface Person {\n    name: string;\n    age: number;\n}\n\ndescribe(\"TypedFingerprint\", () => {\n\n    it(\"should convert valid data\", () => {\n        const fp = new TypedFingerprint<Person>(\"name\", \"ABR\", \"0.1.0\", {\n            name: \"tony\",\n            age: 65,\n        });\n        assert.equal(fp.object.name, \"tony\");\n        assert.equal(fp.object.age, 65);\n        assert.equal(JSON.parse(fp.data).name, \"tony\");\n        assert.equal(JSON.parse(fp.data).age, 65);\n    });\n\n    it(\"should compute sha\", () => {\n        const fp = new TypedFingerprint<Person>(\"name\", \"ABR\", \"0.1.0\", {\n            name: \"tony\",\n            age: 65,\n        });\n        assert(!!fp.sha);\n        assert(isValidSHA1(fp.sha));\n    });\n\n});\n"]}