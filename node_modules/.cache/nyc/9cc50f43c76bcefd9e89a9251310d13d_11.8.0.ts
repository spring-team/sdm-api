"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_205u0yaes7=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/DefaultSoftwareDeliveryMachine.ts",hash="78e6e03cfacb9e48604fd1fe51036849b5efe2e6",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/DefaultSoftwareDeliveryMachine.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:10},end:{line:18,column:27}},"2":{start:{line:19,column:25},end:{line:19,column:63}},"3":{start:{line:20,column:21},end:{line:20,column:70}},"4":{start:{line:21,column:25},end:{line:21,column:78}},"5":{start:{line:22,column:27},end:{line:22,column:86}},"6":{start:{line:23,column:31},end:{line:23,column:86}},"7":{start:{line:24,column:32},end:{line:24,column:100}},"8":{start:{line:25,column:24},end:{line:25,column:79}},"9":{start:{line:26,column:26},end:{line:26,column:78}},"10":{start:{line:27,column:26},end:{line:27,column:85}},"11":{start:{line:28,column:23},end:{line:28,column:67}},"12":{start:{line:29,column:25},end:{line:29,column:84}},"13":{start:{line:30,column:42},end:{line:30,column:94}},"14":{start:{line:78,column:8},end:{line:78,column:26}},"15":{start:{line:79,column:8},end:{line:79,column:50}},"16":{start:{line:80,column:8},end:{line:80,column:161}},"17":{start:{line:81,column:8},end:{line:91,column:158}},"18":{start:{line:92,column:8},end:{line:92,column:80}},"19":{start:{line:95,column:0},end:{line:95,column:72}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:44},end:{line:93,column:5}},line:77}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_205u0yaes7.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const _=(cov_205u0yaes7.s[1]++,require("lodash"));const wellKnownGoals_1=(cov_205u0yaes7.s[2]++,require("../blueprint/wellKnownGoals"));const createRepo_1=(cov_205u0yaes7.s[3]++,require("../common/command/generator/createRepo"));const listGenerators_1=(cov_205u0yaes7.s[4]++,require("../common/command/generator/listGenerators"));const executeAutofixes_1=(cov_205u0yaes7.s[5]++,require("../common/delivery/code/autofix/executeAutofixes"));const executePushReactions_1=(cov_205u0yaes7.s[6]++,require("../common/delivery/code/executePushReactions"));const executeFingerprinting_1=(cov_205u0yaes7.s[7]++,require("../common/delivery/code/fingerprint/executeFingerprinting"));const executeReview_1=(cov_205u0yaes7.s[8]++,require("../common/delivery/code/review/executeReview"));const executeUndeploy_1=(cov_205u0yaes7.s[9]++,require("../common/delivery/deploy/executeUndeploy"));const logInterpreters_1=(cov_205u0yaes7.s[10]++,require("../common/delivery/goals/support/logInterpreters"));const SelfDescribe_1=(cov_205u0yaes7.s[11]++,require("../handlers/commands/SelfDescribe"));const SetGoalsOnPush_1=(cov_205u0yaes7.s[12]++,require("../handlers/events/delivery/goals/SetGoalsOnPush"));const AbstractSoftwareDeliveryMachine_1=(cov_205u0yaes7.s[13]++,require("./support/AbstractSoftwareDeliveryMachine"));/**
 * Class instantiated to create a **Software Delivery Machine**.
 * Combines commands and delivery event handling using _goals_.
 *
 * Goals and goal "implementations" can be defined by users.
 * However, certain well known goals are built into the DefaultSoftwareDeliveryMachine
 * for convenience, with their own associated listeners.
 *
 * Well known goal support is based around a delivery process spanning
 * common goals of fingerprinting, reacting to fingerprint diffs,
 * code review, build, deployment, endpoint verification and
 * promotion to a production environment.
 *
 * The most important element of a software delivery machine is setting
 * zero or more _push rules_ in the constructor.
 * This is normally done using the internal DSL as follows:
 *
 * ```
 * const sdm = new DefaultSoftwareDeliveryMachine(
 *    "MyMachine",
 *    options,
 *    whenPushSatisfies(IsMaven, HasSpringBootApplicationClass, not(MaterialChangeToJavaRepo))
 *      .itMeans("No material change to Java")
 *      .setGoals(NoGoals),
 *    whenPushSatisfies(ToDefaultBranch, IsMaven, HasSpringBootApplicationClass, HasCloudFoundryManifest)
 *      .itMeans("Spring Boot service to deploy")
 *      .setGoals(HttpServiceGoals));
 * ```
 *
 * Uses the builder pattern to allow fluent construction. For example:
 *
 * ```
 * softwareDeliveryMachine
 *    .addPushReactions(async pu => ...)
 *    .addNewIssueListeners(async i => ...)
 *    .add...;
 * ```
 */class DefaultSoftwareDeliveryMachine extends(AbstractSoftwareDeliveryMachine_1.AbstractSoftwareDeliveryMachine){/**
     * Construct a new software delivery machine, with zero or
     * more goal setters.
     * @param {string} name
     * @param {SoftwareDeliveryMachineOptions} opts
     * @param {GoalSetter} goalSetters tell me what to do on a push. Hint: start with "whenPushSatisfies(...)"
     */constructor(name,opts,...goalSetters){cov_205u0yaes7.f[0]++;cov_205u0yaes7.s[14]++;super(name,opts);cov_205u0yaes7.s[15]++;this.goalSetters=_.flatten(goalSetters);cov_205u0yaes7.s[16]++;this.addSupportingCommands(SelfDescribe_1.selfDescribeHandler(this),listGenerators_1.listGeneratorsHandler(this),createRepo_1.createRepoHandler(this));cov_205u0yaes7.s[17]++;this.addGoalImplementation("Autofix",wellKnownGoals_1.AutofixGoal,executeAutofixes_1.executeAutofixes(this.opts.projectLoader,this.autofixRegistrations),{// Autofix errors should not be reported to the user
logInterpreter:logInterpreters_1.LogSuppressor}).addGoalImplementation("DoNothing",wellKnownGoals_1.NoGoal,SetGoalsOnPush_1.executeImmaterial).addGoalImplementation("FingerprinterRegistration",wellKnownGoals_1.FingerprintGoal,executeFingerprinting_1.executeFingerprinting(this.opts.projectLoader,this.fingerprinterRegistrations,this.fingerprintListeners)).addGoalImplementation("CodeReactions",wellKnownGoals_1.PushReactionGoal,executePushReactions_1.executePushReactions(this.opts.projectLoader,this.pushReactionRegistrations)).addGoalImplementation("Reviews",wellKnownGoals_1.ReviewGoal,executeReview_1.executeReview(this.opts.projectLoader,this.reviewerRegistrations,this.reviewListeners)).addVerifyImplementation().addGoalImplementation("OfferToDeleteRepo",wellKnownGoals_1.DeleteRepositoryGoal,executeUndeploy_1.offerToDeleteRepository()).addGoalImplementation("OfferToDeleteRepoAfterUndeploys",wellKnownGoals_1.DeleteAfterUndeploysGoal,executeUndeploy_1.offerToDeleteRepository());cov_205u0yaes7.s[18]++;this.knownSideEffect(wellKnownGoals_1.ArtifactGoal,"from ImageLinked");}}cov_205u0yaes7.s[19]++;exports.DefaultSoftwareDeliveryMachine=DefaultSoftwareDeliveryMachine;//# sourceMappingURL=data:application/json;charset=utf-8;base64,