{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/executeBuild.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/executeBuild.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAUpD;;;;GAIG;AACH,sBAA6B,aAA4B,EAC5B,OAAgB;IACzC,OAAO,CAAO,IAAuB,EAA8B,EAAE;QACjE,MAAM,EAAC,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,eAAe,EAAC,GAAG,IAAI,CAAC;QAC9E,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAE7B,0BAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAEzF,mGAAmG;QACnG,oEAAoE;QACpE,OAAO,OAAO,CAAC,aAAa,CACxB,WAAW,EACX,EAAE,EACF,eAAe,EACf;YACI,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI;YACtB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK;YACxB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU;YAC/C,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC;YAChC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,aAAa;YACxC,GAAG,EAAE,MAAM,CAAC,GAAG;SAClB,EACD,WAAW,EACX,OAAO,CAAC,CAAC;IACjB,CAAC,CAAA,CAAC;AACN,CAAC;AAzBD,oCAyBC;AAED,0BAAiC,MAAmC;IAChE,MAAM,yBAAyB,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACnE,MAAM,kCAAkC,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAChH,MAAM,0BAA0B,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7E,MAAM,wBAAwB,GAAG,kCAAkC,IAAI,0BAA0B,IAAI,QAAQ,CAAC;IAC9G,OAAO,wBAAwB,CAAC;AACpC,CAAC;AAND,4CAMC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { Builder } from \"../../../spi/build/Builder\";\nimport { StatusForExecuteGoal } from \"../../../typings/types\";\nimport { ProjectLoader } from \"../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../goals/ExecuteGoalResult\";\nimport {\n    ExecuteGoalWithLog,\n    RunWithLogContext,\n} from \"../goals/support/reportGoalError\";\n\n/**\n * Execute build with the appropriate builder\n * @param projectLoader used to load projects\n * @param builder builder to user\n */\nexport function executeBuild(projectLoader: ProjectLoader,\n                             builder: Builder): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const {status, credentials, id, context, progressLog, addressChannels} = rwlc;\n        const commit = status.commit;\n\n        logger.info(\"Building project %s:%s with builder [%s]\", id.owner, id.repo, builder.name);\n\n        // the builder is expected to result in a complete Build event (which will update the build status)\n        // and an ImageLinked event (which will update the artifact status).\n        return builder.initiateBuild(\n            credentials,\n            id,\n            addressChannels,\n            {\n                name: commit.repo.name,\n                owner: commit.repo.owner,\n                providerId: commit.repo.org.provider.providerId,\n                branch: branchFromCommit(commit),\n                defaultBranch: commit.repo.defaultBranch,\n                sha: commit.sha,\n            },\n            progressLog,\n            context);\n    };\n}\n\nexport function branchFromCommit(commit: StatusForExecuteGoal.Commit): string {\n    const allBranchesThisCommitIsOn = commit.pushes.map(p => p.branch);\n    const theDefaultBranchIfThisCommitIsOnIt = allBranchesThisCommitIsOn.find(b => b === commit.repo.defaultBranch);\n    const someBranchIDoNotReallyCare = allBranchesThisCommitIsOn.find(b => true);\n    const branchToMarkTheBuildWith = theDefaultBranchIfThisCommitIsOnIt || someBranchIDoNotReallyCare || \"master\";\n    return branchToMarkTheBuildWith;\n}\n"]}