{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PushRule.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PushRule.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH,4DAAiE;AAGjE;;GAEG;AACH;IAgBI,YAAsB,MAAgB,EAAY,MAAkB,EAAE,MAAe;QAA/D,WAAM,GAAN,MAAM,CAAU;QAAY,WAAM,GAAN,MAAM,CAAY;QAChE,IAAI,CAAC,QAAQ,GAAG,4BAAY,CAAC,uBAAO,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,uBAAO,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC/C,CAAC;IAfD,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAWD;;;;;OAKG;IACI,OAAO,CAAC,MAAc;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,GAAG,CAAC,KAAQ;QACf,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEY,YAAY,CAAC,CAAyB;;YAC/C,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC,WAAW,CAAC;aAC3B;QACL,CAAC;KAAA;CAEJ;AA3CD,4BA2CC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PushListenerInvocation } from \"../PushListener\";\nimport { PushTest } from \"../PushTest\";\nimport { allSatisfied, memoize } from \"./pushtest/pushTestUtils\";\nimport { StaticPushMapping } from \"./StaticPushMapping\";\n\n/**\n * Generic DSL for returning an object on a push\n */\nexport class PushRule<V = any> implements StaticPushMapping<V> {\n\n    private staticValue: V;\n\n    get value() {\n        return this.staticValue;\n    }\n\n    public get name(): string {\n        return this.reason;\n    }\n\n    public readonly pushTest: PushTest;\n\n    private reason: string;\n\n    constructor(protected guard1: PushTest, protected guards: PushTest[], reason?: string) {\n        this.pushTest = allSatisfied(memoize(guard1), ...guards.map(memoize));\n        this.reason = reason || this.pushTest.name;\n    }\n\n    /**\n     * Set an additional reason if we want to add information to that that's\n     * available from the push tests themselves\n     * @param {string} reason\n     * @return {this}\n     */\n    public itMeans(reason: string): this {\n        this.reason = reason;\n        return this;\n    }\n\n    public set(value: V): this {\n        this.staticValue = value;\n        return this;\n    }\n\n    public async valueForPush(p: PushListenerInvocation): Promise<V | undefined> {\n        if (await this.pushTest.valueForPush(p)) {\n            return this.staticValue;\n        }\n    }\n\n}\n"]}