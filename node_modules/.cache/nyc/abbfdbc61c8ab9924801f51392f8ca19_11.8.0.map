{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/slack/diffRendering.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/slack/diffRendering.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as slack from \"@atomist/slack-messages/SlackMessages\";\nimport { listCommitsBetween } from \"../github/ghub\";\nimport {\n    avatarUrl,\n    commitUrl,\n    RepoInfo,\n    truncateCommitMessage,\n    userUrl,\n} from \"../lifecycleHelpers\";\n\n/* tslint:disable:no-unused-variable */\n\nexport function linkToDiff(id: RemoteRepoRef, start: string, end: string, endDescription?: string) {\n    return slack.url(diffUrl(id, start, end), `(Compare with ${endDescription || end.substr(0, 6)})`);\n}\n\nfunction diffUrl(id: RemoteRepoRef, start: string, end: string) {\n    return `${id.url}/compare/${start}...${end}`;\n}\n\nexport async function renderDiff(token: string, id: GitHubRepoRef, start: string, end: string, color: string): Promise<slack.Attachment[]> {\n    const fromGitHub = await listCommitsBetween(token, id, start, end);\n\n    const commits: CommitForRendering[] = fromGitHub.commits.map(c => ({\n        message: c.commit.message,\n        sha: c.sha,\n        author: c.author,\n    }));\n\n    logger.info(\"Rendering %d commits in diff\", commits.length);\n    return render({owner: id.owner, name: id.repo}, commits, diffUrl(id, start, end), color);\n}\n\n// exported for testing\nexport interface CommitForRendering {\n    sha: string;\n    message: string;\n    author: {\n        login: string,\n    };\n}\n\nfunction render(repo: RepoInfo, commits: CommitForRendering[], fullDiffLink: string, color: string): Promise<slack.Attachment[]> {\n\n    const commitsGroupedByAuthor = [];\n\n    let author = null;\n    let commitsByAuthor: any = {};\n    let unknownCommitter = false;\n    for (const commit of commits) {\n        const ca = (commit.author != null && commit.author.login && commit.author.login !== \"\"\n            ? commit.author.login : \"(unknown)\");\n\n        if (ca === \"(unknown)\") {\n            unknownCommitter = true;\n        }\n\n        if (author == null || author !== ca) {\n            commitsByAuthor = {\n                author: ca,\n                commits: [],\n            };\n            author = ca;\n            commitsGroupedByAuthor.push(commitsByAuthor);\n        }\n        if (ca === author) {\n            commitsByAuthor.commits.push(commit);\n        }\n    }\n\n    let attachments: slack.Attachment[] = [];\n\n    commitsGroupedByAuthor\n        .forEach(cgba => {\n            const a = cgba.author;\n\n            const message = cgba.commits.map(c => renderCommitMessage(repo, c)).join(\"\\n\");\n\n            const fallback = `lots of commits`;\n\n            const attachment: slack.Attachment = {\n                author_name: `@${a}`,\n                author_link: userUrl(repo, a),\n                author_icon: avatarUrl(repo, a),\n                text: message,\n                mrkdwn_in: [\"text\"],\n                color,\n                fallback,\n                actions: [],\n            };\n            attachments.push(attachment);\n        });\n\n    // Limit number of commits by author to 3\n    if (attachments.length > 3) {\n        attachments = attachments.slice(0, 3);\n        const fullDiffDescription = `... and more! (${commits.length} total commits)`;\n\n        const attachment: slack.Attachment = {\n            title_link: fullDiffLink,\n            title: fullDiffDescription,\n            color,\n            fallback: fullDiffDescription,\n            actions: [],\n        };\n        attachments.push(attachment);\n    }\n\n    // if (attachments.length > 0) {\n    //     const lastAttachment = attachments[attachments.length - 1];\n    //     if (unknownCommitter) {\n    //         lastAttachment.footer_icon = \"https://images.atomist.com/rug/question.png\";\n    //         lastAttachment.footer = `Unrecognized author. Please use a known email address to commit.`;\n    //     } else {\n    //         lastAttachment.footer_icon = \"https://images.atomist.com/rug/commit.png\";\n    //         if (lastAttachment.footer != null) {\n    //             lastAttachment.footer = `${url(repoUrl(repo), repoSlug(repo))} - ${lastAttachment.footer}`;\n    //         } else {\n    //             lastAttachment.footer = url(repoUrl(repo), repoSlug(repo));\n    //         }\n    //         lastAttachment.ts = Math.floor(Date.parse(push.timestamp) / 1000);\n    //     }\n\n    return Promise.resolve(attachments);\n}\n\n// exported for testing\nexport function renderCommitMessage(repo: RepoInfo, commitNode: CommitForRendering): string {\n    // Cut commit to 50 chars of first line\n    const m = truncateCommitMessage(commitNode.message, repo);\n    return \"`\" + slack.url(commitUrl(repo, commitNode), commitNode.sha.substring(0, 7)) + \"` \" + m;\n}\n"]}