{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/createPushImpactListenerInvocation.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/createPushImpactListenerInvocation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAGH,2EAAuG;AACvG,qEAAkE;AAElE,iEAAqE;AACrE,6EAAiF;AAGjF;;;;;;GAMG;AACH,4CAAyD,IAAuB,EACvB,OAAmB;;QACxE,MAAM,EAAC,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,EAAC,GAAG,IAAI,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,MAAM,YAAY,GAAG,oDAA4B,CAAC,OAAO,EAAE,GAAG,wCAAsB,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAE5G,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9B,MAAM,qCAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,MAAM,iDAA6B,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,kBAAkB,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,2BAAY,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChH,OAAO;YACH,EAAE;YACF,OAAO,EAAE,YAAY;YACrB,eAAe;YACf,OAAO;YACP,kBAAkB;YAClB,WAAW;YACX,YAAY;YACZ,MAAM;YACN,IAAI;SACP,CAAC;IACN,CAAC;CAAA;AAtBD,gFAsBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { filesChangedSince, filesChangedSinceParentCommit } from \"../../../util/git/filesChangedSince\";\nimport { filteredView } from \"../../../util/project/filteredView\";\nimport { PushImpactListenerInvocation } from \"../../listener/PushImpactListener\";\nimport { messageDestinationsFor } from \"../../slack/addressChannels\";\nimport { teachToRespondInEventHandler } from \"../../slack/contextMessageRouting\";\nimport { RunWithLogContext } from \"../goals/support/reportGoalError\";\n\n/**\n * Create a PushImpactListenerInvocation from the given context.\n * Includes both the complete project and the changed files.\n * @param {RunWithLogContext} rwlc\n * @param {GitProject} project\n * @return {Promise<PushImpactListenerInvocation>}\n */\nexport async function createPushImpactListenerInvocation(rwlc: RunWithLogContext,\n                                                         project: GitProject): Promise<PushImpactListenerInvocation> {\n    const {status, credentials, id, context, addressChannels} = rwlc;\n    const commit = status.commit;\n    const smartContext = teachToRespondInEventHandler(context, ...messageDestinationsFor(commit.repo, context));\n\n    const push = commit.pushes[0];\n    const filesChanged = push.before ?\n        await filesChangedSince(project, push.before.sha) :\n        await filesChangedSinceParentCommit(project);\n    const impactedSubProject = !filesChanged ? project : filteredView(project, path => filesChanged.includes(path));\n    return {\n        id,\n        context: smartContext,\n        addressChannels,\n        project,\n        impactedSubProject,\n        credentials,\n        filesChanged,\n        commit,\n        push,\n    };\n}\n"]}