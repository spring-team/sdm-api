{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/sdmGoalImplementationTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/sdmGoalImplementationTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext, Success } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\n\nimport * as assert from \"power-assert\";\nimport { whenPushSatisfies } from \"../../src/blueprint/dsl/goalDsl\";\nimport { SoftwareDeliveryMachine } from \"../../src/blueprint/SoftwareDeliveryMachine\";\nimport { SoftwareDeliveryMachineOptions } from \"../../src/blueprint/SoftwareDeliveryMachineOptions\";\nimport { AutofixGoal } from \"../../src/blueprint/wellKnownGoals\";\nimport { Goal } from \"../../src/common/delivery/goals/Goal\";\nimport { Goals } from \"../../src/common/delivery/goals/Goals\";\nimport { AnyPush } from \"../../src/common/listener/support/pushtest/commonPushTests\";\nimport { determineGoals } from \"../../src/handlers/events/delivery/goals/SetGoalsOnPush\";\nimport { PushFields } from \"../../src/typings/types\";\nimport { SingleProjectLoader } from \"../../src/util/test/SingleProjectLoader\";\n\nconst favoriteRepoRef = GitHubRepoRef.from({\n    owner: \"jess\",\n    repo: \"monet\",\n    sha: \"75132357b19889c4d6c2bef99fce8f477e1f2196\",\n    branch: \"claude\",\n});\n\nexport const fakeSoftwareDeliveryMachineOptions = {\n    projectLoader: new SingleProjectLoader(InMemoryProject.from(favoriteRepoRef,\n        {path: \"README.md\", content: \"read sometthing else\"})),\n} as any as SoftwareDeliveryMachineOptions;\n\nconst credentials: ProjectOperationCredentials = {token: \"ab123bbbaaa\"};\n\nconst fakeContext = {context: {name: \"my favorite context \"}} as any as HandlerContext;\n\nconst aPush = {repo: {org: {provider: {providerId: \"myProviderId\"}}}} as PushFields.Fragment;\n\ndescribe(\"implementing goals in the SDM\", () => {\n\n    it(\"I can ask it to do an autofix\", async () => {\n\n        const mySDM = new SoftwareDeliveryMachine(\"Gustave\",\n            fakeSoftwareDeliveryMachineOptions,\n            whenPushSatisfies(AnyPush)\n                .itMeans(\"autofix the crap out of that thing\")\n                .setGoals(new Goals(\"Autofix only\", AutofixGoal)));\n\n        const {determinedGoals, goalsToSave} = await determineGoals({\n                projectLoader: fakeSoftwareDeliveryMachineOptions.projectLoader,\n                goalSetters: mySDM.goalSetters,\n                implementationMapping: mySDM.goalFulfillmentMapper,\n            }, {\n                credentials, id: favoriteRepoRef, context: fakeContext, push: aPush,\n                addressChannels: () => Promise.resolve({}),\n                goalSetId: \"hi\",\n            },\n        );\n\n        assert(determinedGoals.goals.includes(AutofixGoal));\n\n        assert.equal(goalsToSave.length, 1);\n        const onlyGoal = goalsToSave[0];\n\n        const myImpl = mySDM.goalFulfillmentMapper.findImplementationBySdmGoal(onlyGoal);\n\n        assert.equal(myImpl.implementationName, \"Autofix\");\n    });\n\n    const customGoal = new Goal({\n        uniqueName: \"Jerry\",\n        displayName: \"Springer\", environment: \"1-staging/\", orderedName: \"1-springer\",\n    });\n\n    it(\"I can teach it to do a custom goal\", async () => {\n        let executed: boolean = false;\n        const goalExecutor = async () => {\n            executed = true;\n            return Success;\n        };\n\n        const mySDM = new SoftwareDeliveryMachine(\"Gustave\",\n            fakeSoftwareDeliveryMachineOptions,\n            whenPushSatisfies(AnyPush)\n                .itMeans(\"cornelius springer\")\n                .setGoals(new Goals(\"Springer\", customGoal)))\n            .addGoalImplementation(\"Cornelius\",\n                customGoal,\n                goalExecutor,\n            );\n\n        const {determinedGoals, goalsToSave} = await determineGoals({\n                projectLoader: fakeSoftwareDeliveryMachineOptions.projectLoader,\n                goalSetters: mySDM.goalSetters,\n                implementationMapping: mySDM.goalFulfillmentMapper,\n            }, {\n                credentials, id: favoriteRepoRef, context: fakeContext, push: aPush,\n                addressChannels: () => Promise.resolve({}),\n                goalSetId: \"hi\",\n            },\n        );\n\n        assert(determinedGoals.goals.includes(customGoal));\n\n        assert.equal(goalsToSave.length, 1);\n        const onlyGoal = goalsToSave[0];\n\n        const myImpl = mySDM.goalFulfillmentMapper.findImplementationBySdmGoal(onlyGoal);\n\n        assert.equal(myImpl.implementationName, \"Cornelius\");\n        await myImpl.goalExecutor(undefined);\n        assert(executed);\n    });\n\n});\n"]}