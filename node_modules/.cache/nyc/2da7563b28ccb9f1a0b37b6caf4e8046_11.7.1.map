{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/launchGoal.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/launchGoal.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAMoC;AACpC,4EAA8E;AAC9E,0FAAuF;AAMvF,4EAAuE;AACvE,uGAA2G;AAC3G,kFAAuF;AACvF,mCAAmC;AASnC,qEAAkE;AASlE,iCAAyC,SAAQ,wDAA8B;IAE3E,YAA6B,oBAAiD,EACjD,aAA4B,EAC5B,UAA8B;QACvD,KAAK,EAAE,CAAC;QAHiB,yBAAoB,GAApB,oBAAoB,CAA6B;QACjD,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAoB;IAE3D,CAAC;IAEM,aAAa,CAAC,OAAsB;QACvC,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClB,sCAAsC;YACtC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,IAAI,+CAAsB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/G,4CAAwB,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACtD;IACL,CAAC;IAEY,sBAAsB,CAAC,YAA8B;;YAC9D,IAAI,OAAO,CAAC,QAAQ,EAAE;gBAClB,MAAM,YAAY,GAAI,YAAoB,CAAC,YAAwC,CAAC;gBACpF,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;gBAC7C,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,MAAM,CAAC;gBAC9D,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;gBAC3C,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,aAAI,EAAE,CAAC;gBAEnE,gCAAgC;gBAChC,MAAM,WAAW,GAAG,IAAI,qCAAiB,CACrC,+CAA+C,MAAM,EAAE,EACvD,EAAE,aAAa,EAAE,UAAU,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBAErD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,KAAK,CAA2C;oBAC3E,IAAI,EAAE,aAAa;oBACnB,SAAS,EAAE;wBACP,EAAE,EAAE,MAAM;qBACb;oBACD,OAAO,EAAE,iCAAmB;iBAC/B,CAAC,CAAC;gBAEH,sCAAsC;gBACtC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,IAAI,+CAAsB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC/G,4CAAwB,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAEnD,qCAAqC;gBACrC,MAAM,KAAK,GAAkB;oBACzB,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE;wBACR,cAAc,EAAE,aAAa;wBAC7B,OAAO,EAAE,MAAM;wBACf,SAAS,EAAE,QAAQ;wBACnB,aAAa,EAAE,KAAK,EAAE,CAAC,gBAAgB;qBAC1C;oBACD,OAAO,EAAE,CAAC;4BACN,GAAG,EAAE,2BAAO,CAAC,QAAQ;4BACrB,KAAK,EAAE,kCAAkB,CAAS,OAAO,CAAC;yBAC7C,CAAC;iBACL,CAAC;gBACF,MAAM,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,CAAM,OAAO,EAAC,EAAE;oBACnD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC;oBAC/B,0BAAM,CAAC,IAAI,CAAC,2CAA2C,EAAE,QAAQ,CAAC,CAAC;oBACnE,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC7C,CAAC,CAAA,CAAC,CAAC;aACN;QACL,CAAC;KAAA;CACJ;AA9DD,kEA8DC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    automationClientInstance,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Secrets,\n} from \"@atomist/automation-client\";\nimport { configurationValue } from \"@atomist/automation-client/configuration\";\nimport { ApolloGraphClient } from \"@atomist/automation-client/graph/ApolloGraphClient\";\nimport {\n    EventIncoming,\n    RequestProcessor,\n} from \"@atomist/automation-client/internal/transport/RequestProcessor\";\nimport { RegistrationConfirmation } from \"@atomist/automation-client/internal/transport/websocket/WebSocketRequestProcessor\";\nimport { guid } from \"@atomist/automation-client/internal/util/string\";\nimport { AutomationEventListenerSupport } from \"@atomist/automation-client/server/AutomationEventListener\";\nimport { QueryNoCacheOptions } from \"@atomist/automation-client/spi/graph/GraphClient\";\nimport * as cluster from \"cluster\";\nimport {\n    OnAnyRequestedSdmGoal,\n    ProgressLog,\n    ProgressLogFactory,\n    SdmGoalById,\n} from \"../../../..\";\nimport { SdmGoalImplementationMapper } from \"../../../../common/delivery/goals/SdmGoalImplementationMapper\";\nimport { ProjectLoader } from \"../../../../common/repo/ProjectLoader\";\nimport { FulfillGoalOnRequested } from \"./FulfillGoalOnRequested\";\n\n/**\n * Launch a goal in an isolated environment (container or process) for fulfillment.\n */\nexport type IsolatedGoalLauncher = (goal: OnAnyRequestedSdmGoal.SdmGoal,\n                                    ctx: HandlerContext,\n                                    progressLog: ProgressLog) => Promise<HandlerResult>;\n\nexport class GoalAutomationEventListener extends AutomationEventListenerSupport {\n\n    constructor(private readonly implementationMapper: SdmGoalImplementationMapper,\n                private readonly projectLoader: ProjectLoader,\n                private readonly logFactory: ProgressLogFactory) {\n        super();\n    }\n\n    public eventIncoming(payload: EventIncoming) {\n        if (cluster.isWorker) {\n            // Register event handler locally only\n            const maker = () => new FulfillGoalOnRequested(this.implementationMapper, this.projectLoader, this.logFactory);\n            automationClientInstance().withEventHandler(maker);\n        }\n    }\n\n    public async registrationSuccessful(eventHandler: RequestProcessor) {\n        if (cluster.isMaster) {\n            const registration = (eventHandler as any).registration as RegistrationConfirmation;\n            const teamId = process.env.ATOMIST_GOAL_TEAM;\n            const teamName = process.env.ATOMIST_GOAL_TEAM_NAME || teamId;\n            const goalId = process.env.ATOMIST_GOAL_ID;\n            const correlationId = process.env.ATOMIST_CORRELATION_ID || guid();\n\n            // Obtain goal via graphql query\n            const graphClient = new ApolloGraphClient(\n                `https://automation.atomist.com/graphql/team/${teamId}`,\n                { Authorization: `Bearer ${registration.jwt}` });\n\n            const goal = await graphClient.query<SdmGoalById.Query, SdmGoalById.Variables>({\n                name: \"SdmGoalById\",\n                variables: {\n                    id: goalId,\n                },\n                options: QueryNoCacheOptions,\n            });\n\n            // Register event handler locally only\n            const maker = () => new FulfillGoalOnRequested(this.implementationMapper, this.projectLoader, this.logFactory);\n            automationClientInstance().withEventHandler(maker);\n\n            // Create event and run event handler\n            const event: EventIncoming = {\n                data: goal,\n                extensions: {\n                    correlation_id: correlationId,\n                    team_id: teamId,\n                    team_name: teamName,\n                    operationName: maker().subscriptionName,\n                },\n                secrets: [{\n                    uri: Secrets.OrgToken,\n                    value: configurationValue<string>(\"token\"),\n                }],\n            };\n            await eventHandler.processEvent(event, async results => {\n                const resolved = await results;\n                logger.info(\"Processing goal completed with results %j\", resolved);\n                setTimeout(() => process.exit(0), 10000);\n            });\n        }\n    }\n}\n"]}