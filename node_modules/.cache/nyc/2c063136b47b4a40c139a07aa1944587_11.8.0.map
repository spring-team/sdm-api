{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/projectPredicateUtils.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/projectPredicateUtils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD;;GAEG;AACH,sBAA6B,CAAmB;IAC5C,OAAO,CAAM,EAAE,EAAC,EAAE,gDAAC,OAAA,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,GAAA,CAAC;AACtC,CAAC;AAFD,oCAEC;AAED;;;;;GAKG;AACH,gCAAuC,GAAG,UAA8B;IACpE,OAAO,CAAM,CAAC,EAAC,EAAE;QACb,MAAM,UAAU,GAAc,MAAM,OAAO,CAAC,GAAG,CAC3C,UAAU,CAAC,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;YACtB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,0BAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,CAAC,IAAI,SAAS,MAAM,EAAE,CAAC,CAAC;YACtE,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA,CAAC,CACL,CAAC;QACF,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC,CAAA,CAAC;AACN,CAAC;AAXD,wDAWC;AAED;;;;;GAKG;AACH,+BAAsC,GAAG,UAA8B;IACnE,OAAO,CAAM,CAAC,EAAC,EAAE;QACb,MAAM,UAAU,GAAc,MAAM,OAAO,CAAC,GAAG,CAC3C,UAAU,CAAC,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;YACtB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,0BAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,CAAC,IAAI,SAAS,MAAM,EAAE,CAAC,CAAC;YACtE,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA,CAAC,CACL,CAAC;QACF,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAA,CAAC;AACN,CAAC;AAXD,sDAWC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProjectPredicate } from \"../../PushTest\";\n\n/**\n * Return the opposite of this ProjectPredicate\n */\nexport function notPredicate(t: ProjectPredicate): ProjectPredicate {\n    return async pi => !(await t(pi));\n}\n\n/**\n * Wrap all these ProjectPredicates in a single ProjectPredicate\n * AND: Return true if all are satisfied\n * @param {ProjectPredicate} predicates\n * @return {ProjectPredicate}\n */\nexport function allPredicatesSatisfied(...predicates: ProjectPredicate[]): ProjectPredicate {\n    return async p => {\n        const allResults: boolean[] = await Promise.all(\n            predicates.map(async pt => {\n                const result = await pt(p);\n                logger.debug(`Result of ProjectPredicate '${pt.name}' was ${result}`);\n                return result;\n            }),\n        );\n        return !allResults.includes(false);\n    };\n}\n\n/**\n * Wrap all these ProjectPredicates in a single ProjectPredicate\n * OR: Return true if any is satisfied\n * @param {ProjectPredicate} predicates\n * @return {ProjectPredicate}\n */\nexport function anyPredicateSatisfied(...predicates: ProjectPredicate[]): ProjectPredicate {\n    return async p => {\n        const allResults: boolean[] = await Promise.all(\n            predicates.map(async pt => {\n                const result = await pt(p);\n                logger.debug(`Result of ProjectPredicate '${pt.name}' was ${result}`);\n                return result;\n            }),\n        );\n        return allResults.includes(true);\n    };\n}\n"]}