{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnChannelLink.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnChannelLink.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AAGxE,2EAA4F;AAE5F,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,aAAa,GAA1B;IAEI,YACqB,aAA4B,EAC5B,SAAgC,EAChC,kBAAuC;QAFvC,kBAAa,GAAb,aAAa,CAAe;QAC5B,cAAS,GAAT,SAAS,CAAuB;QAChC,uBAAkB,GAAlB,kBAAkB,CAAqB;IAC5D,CAAC;IAEY,MAAM,CAAC,KAAoD,EACpD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC5C,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,MAAM,eAAe,GAAoB,oCAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC3E,MAAM,sBAAsB,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;YACtE,MAAM,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,CAAM,OAAO,EAAC,EAAE;gBAC/F,MAAM,UAAU,GAAkC;oBAC9C,EAAE;oBACF,OAAO;oBACP,eAAe;oBACf,WAAW;oBACX,OAAO;oBACP,sBAAsB;oBACtB,yBAAyB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,EAAE,sBAAsB,EAAE,IAAI,CAAC;iBACrH,CAAC;gBACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS;qBAC7B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAC3B,CAAC;YACN,CAAC,CAAA,CAAC,CAAC;YACH,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAjCY,aAAa;IADzB,gCAAY,CAAC,iBAAiB,EAAE,sBAAY,CAAC,eAAe,CAAC,CAAC;;GAClD,aAAa,CAiCzB;AAjCY,sCAAa","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { ChannelLinkListener, ChannelLinkListenerInvocation } from \"../../../common/listener/ChannelLinkListenerInvocation\";\nimport { ProjectLoader } from \"../../../common/repo/ProjectLoader\";\nimport { AddressChannels, addressChannelsFor } from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A new channel has been linked to a repo\n */\n@EventHandler(\"On channel link\", subscription(\"OnChannelLink\"))\nexport class OnChannelLink implements HandleEvent<schema.OnChannelLink.Subscription> {\n\n    constructor(\n        private readonly projectLoader: ProjectLoader,\n        private readonly listeners: ChannelLinkListener[],\n        private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<schema.OnChannelLink.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const repo = event.data.ChannelLink[0].repo;\n        const id = toRemoteRepoRef(repo);\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        const addressChannels: AddressChannels = addressChannelsFor(repo, context);\n        const newlyLinkedChannelName = event.data.ChannelLink[0].channel.name;\n        await this.projectLoader.doWithProject({credentials, id, context, readOnly: true}, async project => {\n            const invocation: ChannelLinkListenerInvocation = {\n                id,\n                context,\n                addressChannels,\n                credentials,\n                project,\n                newlyLinkedChannelName,\n                addressNewlyLinkedChannel: (msg, opts) => context.messageClient.addressChannels(msg, newlyLinkedChannelName, opts),\n            };\n            await Promise.all(params.listeners\n                .map(l => l(invocation)),\n            );\n        });\n        return Success;\n    }\n}\n"]}