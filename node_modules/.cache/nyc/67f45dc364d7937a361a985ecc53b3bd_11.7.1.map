{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/local/maven/mavenSourceDeployer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/local/maven/mavenSourceDeployer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, Success } from \"@atomist/automation-client\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { LocalProject } from \"@atomist/automation-client/project/local/LocalProject\";\nimport { spawn } from \"child_process\";\nimport { DeployableArtifact } from \"../../../../../spi/artifact/ArtifactStore\";\nimport { Deployer } from \"../../../../../spi/deploy/Deployer\";\nimport { Deployment } from \"../../../../../spi/deploy/Deployment\";\nimport { InterpretedLog, InterpretLog } from \"../../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../../spi/log/ProgressLog\";\nimport {DelimitedWriteProgressLogDecorator} from \"../../../../log/DelimitedWriteProgressLogDecorator\";\nimport { ProjectLoader } from \"../../../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../../../goals/ExecuteGoalResult\";\nimport { DefaultLocalDeployerOptions, LocalDeployerOptions, SpawnedDeployment } from \"../LocalDeployerOptions\";\nimport { LookupStrategy, ManagedDeployments, ManagedDeploymentTargetInfo } from \"../ManagedDeployments\";\n\n/**\n * Managed deployments\n */\nexport let managedMavenDeployments: ManagedDeployments;\n\n/**\n * Use Maven to deploy\n * @param projectLoader use to load projects\n * @param opts options\n */\nexport function mavenDeployer(projectLoader: ProjectLoader, opts: LocalDeployerOptions): Deployer<ManagedDeploymentTargetInfo> {\n    if (!managedMavenDeployments) {\n        logger.info(\"Created new deployments record\");\n        managedMavenDeployments = new ManagedDeployments(opts.lowerPort);\n    }\n    return new MavenSourceDeployer(projectLoader, {\n        ...DefaultLocalDeployerOptions,\n        ...opts,\n    });\n}\n\nclass MavenSourceDeployer implements Deployer<ManagedDeploymentTargetInfo> {\n\n    constructor(public projectLoader: ProjectLoader, public opts: LocalDeployerOptions) {\n    }\n\n    public async findDeployments(id: RemoteRepoRef, ti: ManagedDeploymentTargetInfo, creds: ProjectOperationCredentials): Promise<Deployment[]> {\n        const deployedApp = managedMavenDeployments.findDeployment(ti.managedDeploymentKey, LookupStrategy.branch);\n        if (!deployedApp) {\n            return [];\n        }\n        return [deployedApp.deployment];\n    }\n\n    public async deploy(da: DeployableArtifact,\n                        ti: ManagedDeploymentTargetInfo,\n                        log: ProgressLog,\n                        credentials: ProjectOperationCredentials,\n                        team: string): Promise<SpawnedDeployment[]> {\n        const id = da.id;\n        if (!id.branch) {\n            throw new Error(`Cannot locally deploy ${JSON.stringify(id)}: Branch must be set`);\n        }\n        const port = await managedMavenDeployments.findPort(ti.managedDeploymentKey, LookupStrategy.branch, this.opts.baseUrl);\n        logger.info(\"MavenSourceDeployer: Deploying app [%j],branch=%s on port [%d] for team %s\", id, ti.managedDeploymentKey.branch, port, team);\n        await managedMavenDeployments.terminateIfRunning(ti.managedDeploymentKey, LookupStrategy.branch);\n        return [await this.projectLoader.doWithProject({credentials, id, readOnly: true},\n                project => this.deployProject(ti, log, project, port, team))];\n\n    }\n\n    public async undeploy(ti: ManagedDeploymentTargetInfo, deployment: Deployment, log: ProgressLog): Promise<ExecuteGoalResult> {\n        await managedMavenDeployments.terminateIfRunning(ti.managedDeploymentKey, LookupStrategy.branch);\n        return Success;\n    }\n\n    private async deployProject(ti: ManagedDeploymentTargetInfo,\n                                log: ProgressLog,\n                                project: LocalProject,\n                                port: number,\n                                atomistTeam: string): Promise<SpawnedDeployment> {\n        const branchId = ti.managedDeploymentKey;\n        const startupInfo = {\n            port,\n            atomistTeam,\n            contextRoot: `/${branchId.owner}/${branchId.repo}/${branchId.branch}`,\n        };\n\n        const childProcess = spawn(\"mvn\",\n            [\n                \"spring-boot:run\",\n            ].concat(this.opts.commandLineArgumentsFor(startupInfo)),\n            {\n                cwd: project.baseDir,\n            });\n        if (!childProcess.pid) {\n            throw new Error(\"Fatal error deploying using Maven--is `mvn` on your automation node path?\\n\" +\n                \"Attempted to execute `mvn: spring-boot:run`\");\n        }\n        const deployment = {\n            childProcess,\n            endpoint: `${this.opts.baseUrl}:${port}/${startupInfo.contextRoot}`,\n        };\n        managedMavenDeployments.recordDeployment({\n            id: branchId,\n            port,\n            childProcess,\n            deployment,\n            lookupStrategy: LookupStrategy.branch,\n        });\n        const newLineDelimitedLog = new DelimitedWriteProgressLogDecorator(log, \"\\n\");\n        childProcess.stdout.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n        childProcess.stderr.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n        return new Promise<SpawnedDeployment>((resolve, reject) => {\n            childProcess.stdout.addListener(\"data\", what => {\n                if (!!what && this.opts.successPatterns.some(successPattern => successPattern.test(what.toString()))) {\n                    resolve(deployment);\n                }\n            });\n            childProcess.addListener(\"exit\", () => {\n                reject(new Error(\"We should have found success message pattern by now!!\"));\n            });\n            childProcess.addListener(\"error\", reject);\n        });\n    }\n\n    public logInterpreter(log: string): InterpretedLog | undefined {\n        return springBootRunLogInterpreter(log) || shortLogInterpreter(log);\n    }\n\n}\n\nconst shortLogInterpreter: InterpretLog = (log: string) => {\n    if (log.length < 200) {\n        return {\n            relevantPart: log,\n            message: \"This is the whole log.\",\n            includeFullLog: false,\n        };\n    }\n};\n\nconst springBootRunLogInterpreter: InterpretLog = (log: string) => {\n    logger.debug(\"Interpreting log\");\n\n    if (!log) {\n        logger.warn(\"log was empty\");\n        return undefined;\n    }\n\n    const maybeFailedToStart = appFailedToStart(log);\n    if (maybeFailedToStart) {\n        return {\n            relevantPart: maybeFailedToStart,\n            message: \"Application failed to start\",\n            includeFullLog: false,\n        };\n    }\n\n    // default to maven errors\n    const maybeMavenErrors = mavenErrors(log);\n    if (maybeMavenErrors) {\n        logger.info(\"recognized maven error\");\n        return {\n            relevantPart: maybeMavenErrors,\n            message: \"Maven errors\",\n        };\n    }\n\n    // or it could be this problem here\n    if (log.match(/Error checking out artifact/)) {\n        logger.info(\"Recognized artifact error\");\n        return {\n            relevantPart: log,\n            message: \"I lost the local cache. Please rebuild\",\n            includeFullLog: false,\n        };\n    }\n\n    logger.info(\"Did not find anything to recognize in the log\");\n};\n\nfunction appFailedToStart(log: string) {\n    const lines = log.split(\"\\n\");\n    const failedToStartLine = lines.indexOf(\"APPLICATION FAILED TO START\");\n    if (failedToStartLine < 1) {\n        return undefined;\n    }\n    const likelyLines = lines.slice(failedToStartLine + 3, failedToStartLine + 10);\n    return likelyLines.join(\"\\n\");\n}\n\nfunction mavenErrors(log: string) {\n    if (log.match(/^\\[ERROR]/m)) {\n        return log.split(\"\\n\")\n            .filter(l => l.startsWith(\"[ERROR]\"))\n            .join(\"\\n\");\n    }\n}\n"]}