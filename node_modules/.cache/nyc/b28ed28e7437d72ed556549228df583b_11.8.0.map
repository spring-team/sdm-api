{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/misc/spawnedTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/util/misc/spawnedTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,uCAAuC;AACvC,uFAA0F;AAE1F,4DAA6E;AAC7E,oEAAiE;AAEjE,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IAErB,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;QAC3C,MAAM,EAAE,GAAiB,EAAC,OAAO,EAAE,gBAAgB,EAAC,CAAC;QACrD,IAAI;YACA,MAAM,uBAAa,CAAC,EAAE,EAAE,EAAE,EACtB,MAAM,iDAA0B,CAAC,yBAAW,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAY,CAAC,EAC3E,EAAE,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;SAClD;QAAC,OAAO,GAAG,EAAE;YACV,KAAK;SACR;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAS,EAAE;QAC9D,MAAM,EAAE,GAAiB,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,uBAAa,CAAC,EAAE,EAAE,EAAE,EAChC,MAAM,iDAA0B,CAAC,yBAAW,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAY,CAAC,EAC3E,EAAE,CAAC,CAAC;QACR,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAS,EAAE;QAC7E,MAAM,EAAE,GAAiB,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,uBAAa,CAAC,EAAE,EAAE,EAAE,EAChC,MAAM,iDAA0B,CAAC,yBAAW,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAY,CAAC,EAC3E;YACI,WAAW,EAAE,SAAS;SACzB,CAAC,CAAC;QACP,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;QAC3D,MAAM,EAAE,GAAiB,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,uBAAa,CAAC,EAAE,EAAE,EAAE,EAChC,MAAM,iDAA0B,CAAC,yBAAW,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAY,CAAC,EAC3E;YACI,WAAW,EAAE,GAAG,EAAE,CAAC,KAAK;SAC3B,CAAC,CAAC;QACP,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from \"power-assert\";\nimport { createEphemeralProgressLog } from \"../../../src/common/log/EphemeralProgressLog\";\nimport { SdmGoal } from \"../../../src/ingesters/sdmGoalIngester\";\nimport { spawnAndWatch, SpawnCommand } from \"../../../src/util/misc/spawned\";\nimport { fakeContext } from \"../../../src/util/test/fakeContext\";\n\ndescribe(\"spawned\", () => {\n\n    it(\"should handle invalid command\", async () => {\n        const sc: SpawnCommand = {command: \"thisIsNonsense\"};\n        try {\n            await spawnAndWatch(sc, {},\n                await createEphemeralProgressLog(fakeContext(), { name: \"test\"} as SdmGoal),\n                {});\n            assert.fail(\"Should have thrown an exception\");\n        } catch (err) {\n            // Ok\n        }\n    });\n\n    it(\"should handle valid command with no error finder\", async () => {\n        const sc: SpawnCommand = {command: \"ls\"};\n        const r = await spawnAndWatch(sc, {},\n            await createEphemeralProgressLog(fakeContext(), { name: \"test\"} as SdmGoal),\n            {});\n        assert.equal(r.error, false);\n        assert.equal(r.error, false);\n    });\n\n    it(\"should use default on attempt to pass in undefined error finder\", async () => {\n        const sc: SpawnCommand = {command: \"ls\"};\n        const r = await spawnAndWatch(sc, {},\n            await createEphemeralProgressLog(fakeContext(), { name: \"test\"} as SdmGoal),\n            {\n                errorFinder: undefined,\n            });\n        assert.equal(r.error, false);\n        assert.equal(r.error, false);\n    });\n\n    it(\"should handle valid command with error finder\", async () => {\n        const sc: SpawnCommand = {command: \"ls\"};\n        const r = await spawnAndWatch(sc, {},\n            await createEphemeralProgressLog(fakeContext(), { name: \"test\"} as SdmGoal),\n            {\n                errorFinder: () => false,\n            });\n        assert.equal(r.error, false);\n        assert.equal(r.error, false);\n    });\n\n});\n"]}