{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/sloc/slocReportTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/sloc/slocReportTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport * as assert from \"power-assert\";\nimport { JavaLanguage, ScalaLanguage, TypeScriptLanguage } from \"../../src/util/sloc/languages\";\nimport { reportForLanguage, reportForLanguages } from \"../../src/util/sloc/slocReport\";\n\ndescribe(\"reportForLanguage\", () => {\n\n    it(\"should work on TypeScript\", async () => {\n        const p = InMemoryProject.of(new InMemoryFile(\"thing.ts\", \"// Comment\\n\\nconst x = 10;\\n\"));\n        const r = await reportForLanguage(p, {language: TypeScriptLanguage });\n        assert.equal(r.fileReports.length, 1);\n        const f0 = r.fileReports[0];\n        assert.equal(r.stats.total, 3);\n        assert.equal(r.stats.source, 1);\n        assert.equal(f0.stats.total, 3);\n        assert.equal(f0.stats.source, 1);\n    });\n\n    it(\"should work on Java\", async () => {\n        const p = InMemoryProject.of(new InMemoryFile(\"src/Thing.java\", \"// Comment\\n\\nclass Foo{}\\n\"));\n        const r = await reportForLanguage(p, { language: JavaLanguage});\n        assert.equal(r.fileReports.length, 1);\n        const f0 = r.fileReports[0];\n        assert.equal(r.stats.total, 3);\n        assert.equal(r.stats.source, 1);\n        assert.equal(f0.stats.total, 3);\n        assert.equal(f0.stats.source, 1);\n    });\n\n    it(\"should work on Java and TypeScript\", async () => {\n        const p = InMemoryProject.of(\n            new InMemoryFile(\"thing.ts\", \"// Comment\\n\\nconst x = 10;\\n\"),\n            new InMemoryFile(\"src/Thing.java\", \"// Comment\\n\\nclass Foo{}\\n\"),\n        );\n        const r = await reportForLanguages(p, [{ language: JavaLanguage}, { language: TypeScriptLanguage}]);\n        assert.equal(r.languageReports.length, 2);\n        assert.equal(r.relevantLanguageReports.length, 2);\n        assert(r.languageReports.some(l => l.language === JavaLanguage));\n        assert(r.relevantLanguageReports.some(l => l.language === TypeScriptLanguage));\n    });\n\n    it(\"should find default languages\", async () => {\n        const p = InMemoryProject.of(\n            new InMemoryFile(\"Thing.scala\", \"// Comment\\n\\nclass Foo {}\\n\"),\n            new InMemoryFile(\"src/Thing.java\", \"// Comment\\n\\nclass Foo{}\\n\"),\n        );\n        const r = await reportForLanguages(p);\n        assert(r.languageReports.length > 2);\n        assert.equal(r.relevantLanguageReports.length , 2);\n        assert(r.languageReports.some(l => l.language === JavaLanguage));\n        assert(r.relevantLanguageReports.some(l => l.language === ScalaLanguage));\n    });\n\n});\n"]}