{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnUserJoiningChannel.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnUserJoiningChannel.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AAGxE,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,oBAAoB,GAAjC;IAEI,YAA6B,SAAuC,EACvC,kBAAuC;QADvC,cAAS,GAAT,SAAS,CAA8B;QACvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IACpE,CAAC;IAEY,MAAM,CAAC,KAA2D,EAC3D,OAAuB,EACvB,MAAY;;YAC5B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CACrC,IAAI,CAAC,EAAE,CAAC,yBAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;YAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvF,MAAM,eAAe,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAChH,MAAM,UAAU,GAAyC;gBACrD,eAAe;gBACf,OAAO;gBACP,WAAW;gBACX,SAAS;gBACT,KAAK;aACR,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS;iBAC7B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAC3B,CAAC;YACF,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AA3BY,oBAAoB;IADhC,gCAAY,CAAC,yBAAyB,EAAE,sBAAY,CAAC,sBAAsB,CAAC,CAAC;;GACjE,oBAAoB,CA2BhC;AA3BY,oDAAoB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { UserJoiningChannelListener, UserJoiningChannelListenerInvocation } from \"../../../common/listener/UserJoiningChannelListener\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A user joined a channel\n */\n@EventHandler(\"On user joining channel\", subscription(\"OnUserJoiningChannel\"))\nexport class OnUserJoiningChannel implements HandleEvent<schema.OnUserJoiningChannel.Subscription> {\n\n    constructor(private readonly listeners: UserJoiningChannelListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<schema.OnUserJoiningChannel.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const joinEvent = event.data.UserJoinedChannel[0];\n        const repos = joinEvent.channel.repos.map(\n            repo => toRemoteRepoRef(repo, undefined));\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, repos[0]);\n        const addressChannels = (msg, opts) => context.messageClient.addressChannels(msg, joinEvent.channel.name, opts);\n        const invocation: UserJoiningChannelListenerInvocation = {\n            addressChannels,\n            context,\n            credentials,\n            joinEvent,\n            repos,\n        };\n\n        await Promise.all(params.listeners\n            .map(l => l(invocation)),\n        );\n        return Success;\n    }\n}\n"]}