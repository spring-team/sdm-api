{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/DelimitedWriteProgressLogDecoratorTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/log/DelimitedWriteProgressLogDecoratorTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,uCAAuC;AACvC,mHAA8G;AAG9G;IAAA;QAEW,YAAO,GAAa,EAAE,CAAC;QAEd,SAAI,GAAW,iBAAiB,CAAC;IAiBrD,CAAC;IAfU,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAEM,WAAW;QACd,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACJ;AAED,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAEhD,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;QACtD,MAAM,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,IAAI,uEAAkC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEtE,GAAG,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAC9B,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACtB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnB,GAAG,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAEpD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE;YAClC,6BAA6B;YAC7B,sCAAsC;SACzC,CAAC,CAAC;IACP,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAS,EAAE;QAC9E,MAAM,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,IAAI,uEAAkC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEtE,GAAG,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;QACtD,GAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAEzC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE;YAClC,6BAA6B;YAC7B,sCAAsC;SACzC,CAAC,CAAC;IACP,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAS,EAAE;QACrD,MAAM,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,IAAI,uEAAkC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEtE,GAAG,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;QACtD,GAAG,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACvC,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;QAElB,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE;YAClC,6BAA6B;YAC7B,sCAAsC;SACzC,CAAC,CAAC;IACP,CAAC,CAAA,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from \"power-assert\";\nimport {DelimitedWriteProgressLogDecorator} from \"../../../src/common/log/DelimitedWriteProgressLogDecorator\";\nimport { ProgressLog } from \"../../../src/spi/log/ProgressLog\";\n\nclass ListProgressLog implements ProgressLog {\n\n    public logList: string[] = [];\n\n    public readonly name: string = \"ListProgressLog\";\n\n    public close(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    public flush(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    public write(what: string): void {\n        this.logList.push(what);\n    }\n\n    public isAvailable(): Promise<boolean> {\n        return Promise.resolve(true);\n    }\n}\n\ndescribe(\"DelimitedWriteProgressLogDecorator\", () => {\n\n    it(\"should not complete line until delimited\", async () => {\n        const delegateLog = new ListProgressLog();\n        const log = new DelimitedWriteProgressLogDecorator(delegateLog, \"\\n\");\n\n        log.write(\"I'm a lumberjack\");\n        log.write(\" and I'm\");\n        log.write(\" OK\\n\");\n        log.write(\"I sleep all night and I work all day\\n\");\n\n        assert.deepEqual(delegateLog.logList, [\n            \"I'm a lumberjack and I'm OK\",\n            \"I sleep all night and I work all day\",\n        ]);\n    });\n\n    it(\"should split into multiple log lines if delimiter is encountered\", async () => {\n        const delegateLog = new ListProgressLog();\n        const log = new DelimitedWriteProgressLogDecorator(delegateLog, \"\\n\");\n\n        log.write(\"I'm a lumberjack and I'm OK\\nI sleep all\");\n        log.write(\" night and I work all day\\n\");\n\n        assert.deepEqual(delegateLog.logList, [\n            \"I'm a lumberjack and I'm OK\",\n            \"I sleep all night and I work all day\",\n        ]);\n    });\n\n    it(\"should write remainder of logs on flush\", async () => {\n        const delegateLog = new ListProgressLog();\n        const log = new DelimitedWriteProgressLogDecorator(delegateLog, \"\\n\");\n\n        log.write(\"I'm a lumberjack and I'm OK\\nI sleep all\");\n        log.write(\" night and I work all day\");\n        await log.flush();\n\n        assert.deepEqual(delegateLog.logList, [\n            \"I'm a lumberjack and I'm OK\",\n            \"I sleep all night and I work all day\",\n        ]);\n    });\n\n});\n"]}