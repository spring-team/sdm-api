{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/checkstyle/checkstyleReviewer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/checkstyle/checkstyleReviewer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAGoC;AACpC,4EAA8E;AAI9E,iDAAsC;AACtC,yFAAgF;AAChF,oDAAiD;AAEjD,2EAAsD;AACtD,yEAAsE;AAEtE;;;;;;GAMG;AACU,QAAA,kBAAkB,GAE3B,CAAC,cAAsB,EAAE,EAAE,CAAC,CAAC,CAAa,EAAE,GAAmB,EAAE,EAAE;IAC/D,8BAA8B;IAC9B,MAAM,YAAY,GAAG,qBAAK,CACtB,MAAM,EACN,CAAC,MAAM;QACH,cAAc;QACd,IAAI;QACJ,iBAAiB;QACjB,eAAe;QACf,IAAI;QACJ,KAAK;KACR,EACD;QACI,GAAG,EAAE,CAAC,CAAC,OAAO;KACjB,CAAC,CAAC;IACP,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAClE,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAElE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;YAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;YACrC,0BAAM,CAAC,IAAI,CAAC,uDAAuD,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACjG,IAAI,IAAI,KAAK,CAAC,IAAI,MAAM,KAAK,EAAE,EAAE;gBAC7B,MAAM,CAAC,IAAI,6BAAa,CAAC,YAAY,EAAE,oBAAoB,IAAI,KAAK,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;aAC1F;YACD,OAAO,mCAAO,CAAC,MAAM,CAAC;iBACjB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,mDAAwB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAC9D,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,6BAAa,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEN,wCAA+C,wBAAiC;IAC5E,OAAO;QACH,QAAQ,EAAE,qBAAM;QAChB,IAAI,EAAE,YAAY;QAClB,MAAM,EAAE,CAAM,GAAG,EAAC,EAAE,gDAAC,OAAA,0BAAkB,CAAC,kCAAkB,CAAS,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAA,GAAA;QACpH,OAAO,EAAE,EAAC,wBAAwB,EAAC;KACtC,CAAC;AACN,CAAC;AAPD,wEAOC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    HandlerContext,\n    logger,\n} from \"@atomist/automation-client\";\nimport { configurationValue } from \"@atomist/automation-client/configuration\";\nimport { ProjectReview } from \"@atomist/automation-client/operations/review/ReviewResult\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { LocalProject } from \"@atomist/automation-client/project/local/LocalProject\";\nimport { spawn } from \"child_process\";\nimport { IsJava } from \"../../../../listener/support/pushtest/jvm/jvmPushTests\";\nimport { ReviewerError } from \"../ReviewerError\";\nimport { ReviewerRegistration } from \"../ReviewerRegistration\";\nimport { extract } from \"./checkstyleReportExtractor\";\nimport { checkstyleReportToReview } from \"./checkStyleReportToReview\";\n\n/**\n * Spawn Checkstyle Java process against the project directory.\n * Parse Checkstyle XML out and transform it into our ProjectReview structure.\n * An example of a common pattern for integrating third party static\n * analysis or security tools.\n * @param {string} checkstylePath the path to the CheckStyle jar on the local machine. (see README.md)\n */\nexport const checkstyleReviewer: (checkstylePath: string) =>\n    (p: LocalProject, ctx: HandlerContext) => Promise<ProjectReview | ProjectReview> =\n    (checkstylePath: string) => (p: GitProject, ctx: HandlerContext) => {\n        // TODO switch to watchSpawned\n        const childProcess = spawn(\n            \"java\",\n            [\"-jar\",\n                checkstylePath,\n                \"-c\",\n                \"/sun_checks.xml\",\n                \"src/main/java\",\n                \"-f\",\n                \"xml\",\n            ],\n            {\n                cwd: p.baseDir,\n            });\n        let stdout = \"\";\n        let stderr = \"\";\n        childProcess.stdout.on(\"data\", data => stdout += data.toString());\n        childProcess.stderr.on(\"data\", data => stderr += data.toString());\n\n        return new Promise((resolve, reject) => {\n            childProcess.on(\"error\", err => {\n                reject(err);\n            });\n            childProcess.on(\"exit\", (code, signal) => {\n                logger.info(\"Checkstyle ran on %j, code=%d, stdout=\\n%s\\nstderr=%s\", p.id, code, stdout, stderr);\n                if (code !== 0 && stdout === \"\") {\n                    reject(new ReviewerError(\"CheckStyle\", `Process returned ${code}: ${stderr}`, stderr));\n                }\n                return extract(stdout)\n                    .then(cr => resolve(checkstyleReportToReview(p.id, cr, p.baseDir)),\n                        err => reject(new ReviewerError(\"CheckStyle\", err.msg, stderr)));\n            });\n        });\n    };\n\nexport function checkstyleReviewerRegistration(considerOnlyChangedFiles: boolean): ReviewerRegistration {\n    return {\n        pushTest: IsJava,\n        name: \"Checkstyle\",\n        action: async cri => checkstyleReviewer(configurationValue<string>(\"sdm.checkstyle.path\"))(cri.project, cri.context),\n        options: {considerOnlyChangedFiles},\n    };\n}\n"]}