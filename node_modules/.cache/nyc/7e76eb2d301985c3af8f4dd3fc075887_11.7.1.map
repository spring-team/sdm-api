{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/PushTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/PushTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAkBH;;;;;GAKG;AACH,kBAAyB,IAAY,EAAE,YAA6D;IAChG,OAAO;QACH,IAAI;QACJ,YAAY;KACf,CAAC;AACN,CAAC;AALD,4BAKC;AAUD;;;;;;GAMG;AACH,2BAAkC,IAAY,EAAE,SAA2B;IACvE,OAAO;QACH,IAAI;QACJ,YAAY,EAAE,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;QAC3C,SAAS;KACZ,CAAC;AACN,CAAC;AAND,8CAMC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { PushListenerInvocation } from \"./PushListener\";\nimport { PushMapping } from \"./PushMapping\";\n\n/**\n * Special PushMapping. Return true if we like this push. Used in goal setting etc.\n */\nexport interface PushTest extends PushMapping<boolean> {\n\n}\n\n/**\n * Test against a project\n */\nexport type ProjectPredicate = (p: Project) => Promise<boolean>;\n\n/**\n * Convenient factory function for PushTest instances\n * @param {string} name\n * @param valueForPush test function\n * @return {PushTest}\n */\nexport function pushTest(name: string, valueForPush: (p: PushListenerInvocation) => Promise<boolean>): PushTest {\n    return {\n        name,\n        valueForPush,\n    };\n}\n\n/**\n * PushTest that also exposes the ProjectPredicate it is\n * based on\n */\nexport interface PredicatePushTest extends PushTest {\n    predicate: ProjectPredicate;\n}\n\n/**\n * Convenient factory function for PushTest instances based on project predicates.\n * Also exposes project predicate\n * @param {string} name\n * @param predicate test function for projects\n * @return {PushTest}\n */\nexport function predicatePushTest(name: string, predicate: ProjectPredicate): PredicatePushTest {\n    return {\n        name,\n        valueForPush: pli => predicate(pli.project),\n        predicate,\n    };\n}\n"]}