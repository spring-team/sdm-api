{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/artifact/github/GitHubReleaseArtifactStore.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/artifact/github/GitHubReleaseArtifactStore.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport {\n    ProjectOperationCredentials,\n    TokenCredentials,\n} from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { doWithRetry } from \"@atomist/automation-client/util/retry\";\nimport * as GitHubApi from \"@octokit/rest\";\nimport axios from \"axios\";\nimport * as fs from \"fs\";\nimport * as p from \"path\";\nimport * as tmp from \"tmp-promise\";\nimport * as URL from \"url\";\nimport { promisify } from \"util\";\nimport { ArtifactStore, DeployableArtifact } from \"../../../spi/artifact/ArtifactStore\";\nimport { AppInfo } from \"../../../spi/deploy/Deployment\";\nimport { authHeaders, createRelease, createTag, Release, Tag } from \"../../../util/github/ghub\";\n\n/**\n * Implement ArtifactStore to store artifacts as GitHub releases\n */\nexport class GitHubReleaseArtifactStore implements ArtifactStore {\n\n    public async storeFile(appInfo: AppInfo, localFile: string, creds: ProjectOperationCredentials): Promise<string> {\n        const token = (creds as TokenCredentials).token;\n\n        const tagName = appInfo.version + new Date().getMilliseconds();\n        const tag: Tag = {\n            tag: tagName,\n            message: appInfo.version + \" for release\",\n            object: appInfo.id.sha,\n            type: \"commit\",\n            tagger: {\n                name: \"Atomist\",\n                email: \"info@atomist.com\",\n                date: new Date().toISOString(),\n            },\n        };\n        const grr = appInfo.id as GitHubRepoRef;\n        await createTag(token, grr, tag);\n        const release: Release = {\n            name: appInfo.version,\n            tag_name: tag.tag,\n        };\n        await createRelease(token, grr, release);\n        const asset = await uploadAsset(token, grr.owner, grr.repo, tag.tag, localFile);\n        logger.info(\"Uploaded artifact with url [%s] for %j\", asset.browser_download_url, appInfo);\n        return asset.browser_download_url;\n    }\n\n    // TODO this is Maven specific\n    // Name is of format fintan-0.1.0-SNAPSHOT.jar\n    public async checkout(url: string, id: RemoteRepoRef, creds: ProjectOperationCredentials): Promise<DeployableArtifact> {\n        logger.info(\"Attempting to download artifact [%s] for %j\", url, id);\n        const tmpDir = tmp.dirSync({unsafeCleanup: true});\n        const cwd = tmpDir.name;\n        const lastSlash = url.lastIndexOf(\"/\");\n        const filename = url.substring(lastSlash + 1);\n        const re = /([a-zA-Z0-9_]+)-(.*)/;\n        const match = re.exec(filename);\n        const name = match[1];\n        const version = match[2].replace(/.jar$/, \"\");\n\n        const outputPath = cwd + \"/\" + filename;\n\n        // const token = (creds as TokenCredentials).token;\n        // const github = api(token);\n        // return github.repos.getAsset({owner: id.owner, repo: id.repo, id: url});\n\n        logger.info(\"Attempting to download url %s to %s\", url, outputPath);\n        await downloadFileAs((creds as TokenCredentials).token, url, outputPath);\n        logger.info(\"Successfully download url %s to %s\", url, outputPath);\n        return {\n            cwd,\n            filename,\n            name,\n            version,\n            id,\n        };\n    }\n}\n\n/**\n * Download the file to local disk\n * @param {string} token\n * @param {string} url\n * @param {string} outputFilename\n * @return {Promise<any>}\n */\nfunction downloadFileAs(token: string, url: string, outputFilename: string): Promise<any> {\n    return doWithRetry(() => axios.get(url, {\n        ...authHeaders(token),\n        headers: {\n            \"Accept\": \"application/octet-stream\",\n            \"Content-Type\": \"application/zip\",\n        },\n        responseType: \"arraybuffer\",\n    }), `Download ${url} to ${outputFilename}`, {\n        minTimeout: 10000,\n        maxTimeout: 10100,\n        retries: 10,\n    })\n        .then(result => {\n            return fs.writeFileSync(outputFilename, result.data);\n        });\n}\n\nexport interface Asset {\n    url: string;\n    browser_download_url: string;\n    name: string;\n}\n\nexport function uploadAsset(token: string,\n                            owner: string,\n                            repo: string,\n                            tag: string,\n                            path: string,\n                            contentType: string = \"application/zip\"): Promise<Asset> {\n    const github = githubApi(token);\n    return github.repos.getReleaseByTag({\n        owner,\n        repo,\n        tag,\n    })\n        .then(async result => {\n            const file = (await promisify(fs.readFile)(path)).buffer;\n            const contentLength = (await promisify(fs.stat)(path)).size;\n            return github.repos.uploadAsset({\n                url: result.data.upload_url,\n                file,\n                contentType,\n                contentLength,\n                name: p.basename(path),\n            });\n        })\n        .then(r => r.data);\n}\n\nexport function githubApi(token: string, apiUrl: string = \"https://api.github.com/\"): GitHubApi {\n    // separate the url\n    const url = URL.parse(apiUrl);\n\n    const gitHubApi = new GitHubApi({\n        host: url.hostname,\n        protocol: url.protocol.slice(0, -1),\n        port: +url.port,\n    });\n\n    gitHubApi.authenticate({type: \"token\", token});\n    return gitHubApi;\n}\n"]}