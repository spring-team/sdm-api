{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/cloudFoundryLogParser.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/cloudFoundryLogParser.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,qEAAkE;AAClE,qEAAoE;AAEpE;;;GAGG;AACH,yCAAgD,KAAa;IACzD,MAAM,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7D,IAAI,6BAAc,CAAC,CAAC,CAAC,EAAE;QACnB,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACnC,OAAO,SAAS,GAAG,CAAC,CAAC,QAAQ,CAAC;SACjC;QACD,OAAO,CAAC,CAAC,QAAQ,CAAC;KACrB;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AATD,0EASC;AAED,uEAAuE;AACvE,MAAM,MAAM,GAAG,2BAAY,CAAC,UAAU,CAClC,oBAAoB,EACpB;IACI,QAAQ,EAAE,6BAA6B;CAC1C,CACJ,CAAC;AAEF,uBAAuB;AACvB,MAAM,IAAI,GAAG,2BAAY,CAAC,UAAU,CAChC,kBAAkB,EAClB;IACI,QAAQ,EAAE,6BAA6B;CAC1C,CACJ,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Microgrammar } from \"@atomist/microgrammar/Microgrammar\";\nimport { isPatternMatch } from \"@atomist/microgrammar/PatternMatch\";\n\n/**\n * Use a microgrammar to parse the Cloud Foundry log to extract the endpoint\n * url if found. Look for urls: or routes: style exposure in log.\n */\nexport function parseCloudFoundryLogForEndpoint(cfLog: string): string | undefined {\n    const r = routes.firstMatch(cfLog) || urls.firstMatch(cfLog);\n    if (isPatternMatch(r)) {\n        if (!r.endpoint.startsWith(\"http://\")) {\n            return \"http://\" + r.endpoint;\n        }\n        return r.endpoint;\n    }\n    return undefined;\n}\n\n// The cf cli changed from returning urls to routes in a recent version\nconst routes = Microgrammar.fromString<{endpoint: string}>(\n    \"routes:${endpoint}\",\n    {\n        endpoint: /[http:\\/\\/]?[a-zA-Z0-9\\-.]+/,\n    },\n);\n\n// Old style urls value\nconst urls = Microgrammar.fromString<{endpoint: string}>(\n    \"urls:${endpoint}\",\n    {\n        endpoint: /[http:\\/\\/]?[a-zA-Z0-9\\-.]+/,\n    },\n);\n"]}