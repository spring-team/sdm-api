{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/MavenBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/MavenBuilder.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAQH,8DAAqG;AAGrG,kDAAqE;AACrE,+DAA4D;AAC5D,2CAA6C;AAE7C;;;;;;;GAOG;AACH,kBAA0B,SAAQ,2BAAY;IAE1C,YAAY,aAA4B,EAC5B,UAA8B,EAC9B,aAA4B,EACX,YAAqB,IAAI;QAClD,KAAK,CAAC,cAAc,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;QAD3B,cAAS,GAAT,SAAS,CAAgB;QAgC/C,mBAAc,GAAiB,yCAAmB,CAAC;IA9B1D,CAAC;IAEe,UAAU,CAAC,WAAwC,EACxC,EAAiB,EACjB,WAAmB,EACnB,GAAgB,EAChB,eAAgC;;YACvD,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,CAAM,CAAC,EAAC,EAAE;gBACjF,oCAAoC;gBACpC,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACxC,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,UAAU,EAAE,CAAC;gBACvC,MAAM,EAAE,GAAG,MAAM,0BAAc,CAAC,OAAO,CAAC,CAAC;gBACzC,MAAM,KAAK,qBAAO,EAAE,IAAE,IAAI,EAAE,EAAE,CAAC,QAAQ,EAAE,EAAE,GAAC,CAAC;gBAE7C,MAAM,GAAG,GAAG,aAAa,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACnE,MAAM,WAAW,GAAG,uBAAa,CAC7B,wBAAc,CAAC,GAAG,CAAC,EACnB;oBACI,GAAG,EAAE,CAAC,CAAC,OAAO;iBACjB,EACD,GAAG,EAAE;oBACD,WAAW,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC;iBAC9D,CAAC,CAAC;gBACP,MAAM,EAAE,GAAG,IAAI,aAAa,CAAC,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;gBACpE,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC;gBACd,EAAE,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC,OAAO,WAAW,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,MAAM,CAAC;gBACjF,OAAO,EAAE,CAAC;YACd,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;CAIJ;AAvCD,oCAuCC;AAED;IAEI,YAAmB,OAAsB,EACtB,WAAwC,EACxC,IAAY,EACZ,GAAW;QAHX,YAAO,GAAP,OAAO,CAAe;QACtB,gBAAW,GAAX,WAAW,CAA6B;QACxC,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAAQ;IAC9B,CAAC;IAMD,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;CAEJ","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { ArtifactStore } from \"../../../../../spi/artifact/ArtifactStore\";\nimport { AppInfo } from \"../../../../../spi/deploy/Deployment\";\nimport { InterpretLog, LogInterpretation } from \"../../../../../spi/log/InterpretedLog\";\nimport { ProgressLog, ProgressLogFactory } from \"../../../../../spi/log/ProgressLog\";\nimport { asSpawnCommand, ChildProcessResult, spawnAndWatch } from \"../../../../../util/misc/spawned\";\nimport { ProjectLoader } from \"../../../../repo/ProjectLoader\";\nimport { AddressChannels } from \"../../../../slack/addressChannels\";\nimport { LocalBuilder, LocalBuildInProgress } from \"../LocalBuilder\";\nimport { MavenLogInterpreter } from \"./mavenLogInterpreter\";\nimport { identification } from \"./pomParser\";\n\n/**\n * Build with Maven in the local automation client.\n * This implementation requires Java and maven on the classpath.\n * Note it is NOT intended for use for multiple organizations. It's OK\n * for one organization to use inside its firewall, but there is potential\n * vulnerability in builds of unrelated tenants getting at each others\n * artifacts.\n */\nexport class MavenBuilder extends LocalBuilder implements LogInterpretation {\n\n    constructor(artifactStore: ArtifactStore,\n                logFactory: ProgressLogFactory,\n                projectLoader: ProjectLoader,\n                private readonly skipTests: boolean = true) {\n        super(\"MavenBuilder\", artifactStore, projectLoader);\n    }\n\n    protected async startBuild(credentials: ProjectOperationCredentials,\n                               id: RemoteRepoRef,\n                               atomistTeam: string,\n                               log: ProgressLog,\n                               addressChannels: AddressChannels): Promise<LocalBuildInProgress> {\n        return this.projectLoader.doWithProject({credentials, id, readOnly: true}, async p => {\n            // Find the artifact info from Maven\n            const pom = await p.findFile(\"pom.xml\");\n            const content = await pom.getContent();\n            const va = await identification(content);\n            const appId = {...va, name: va.artifact, id};\n\n            const cmd = \"mvn package\" + (this.skipTests ? \" -DskipTests\" : \"\");\n            const buildResult = spawnAndWatch(\n                asSpawnCommand(cmd),\n                {\n                    cwd: p.baseDir,\n                },\n                log, {\n                    errorFinder: (code, signal, l) => l.log.includes(\"[ERROR]\"),\n                });\n            const rb = new UpdatingBuild(id, buildResult, atomistTeam, log.url);\n            rb.ai = appId;\n            rb.deploymentUnitFile = `${p.baseDir}/target/${appId.name}-${appId.version}.jar`;\n            return rb;\n        });\n    }\n\n    public logInterpreter: InterpretLog = MavenLogInterpreter;\n\n}\n\nclass UpdatingBuild implements LocalBuildInProgress {\n\n    constructor(public repoRef: RemoteRepoRef,\n                public buildResult: Promise<ChildProcessResult>,\n                public team: string,\n                public url: string) {\n    }\n\n    public ai: AppInfo;\n\n    public deploymentUnitFile: string;\n\n    get appInfo(): AppInfo {\n        return this.ai;\n    }\n\n}\n"]}