{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/generator/generatorHandler.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/generator/generatorHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create a generator function wrapping the given transform\n * @param {AnyProjectEditor} editorFactory editor for the transformation\n * @param factory construction function\n * @param {string} name name of the generator\n * @param {string} details object allowing customization beyond reasonable defaults\n * @return {HandleCommand}\n */\nimport { HandleCommand, HandlerContext, RedirectResult } from \"@atomist/automation-client\";\nimport { commandHandlerFrom, OnCommand } from \"@atomist/automation-client/onCommand\";\nimport { isGitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { RepoLoader } from \"@atomist/automation-client/operations/common/repoLoader\";\nimport { EditorFactory, GeneratorCommandDetails } from \"@atomist/automation-client/operations/generate/generatorToCommand\";\nimport { generate } from \"@atomist/automation-client/operations/generate/generatorUtils\";\nimport { RemoteGitProjectPersister } from \"@atomist/automation-client/operations/generate/remoteGitProjectPersister\";\nimport { SeedDrivenGeneratorParameters } from \"@atomist/automation-client/operations/generate/SeedDrivenGeneratorParameters\";\nimport { addAtomistWebhook } from \"@atomist/automation-client/operations/generate/support/addAtomistWebhook\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { QueryNoCacheOptions } from \"@atomist/automation-client/spi/graph/GraphClient\";\nimport { Maker } from \"@atomist/automation-client/util/constructionUtils\";\nimport * as _ from \"lodash\";\nimport { CachingProjectLoader } from \"../../repo/CachingProjectLoader\";\nimport { projectLoaderRepoLoader } from \"../../repo/projectLoaderRepoLoader\";\nimport { allReposInTeam } from \"../editor/allReposInTeam\";\n\n/**\n * Create a generator handler\n * @param {EditorFactory<P extends SeedDrivenGeneratorParameters>} editorFactory to create editor to perform transformation\n * @param {Maker<P extends SeedDrivenGeneratorParameters>} factory\n * @param {string} name\n * @param {Partial<GeneratorCommandDetails<P extends SeedDrivenGeneratorParameters>>} details\n * @return {HandleCommand}\n */\nexport function generatorHandler<P extends SeedDrivenGeneratorParameters>(editorFactory: EditorFactory<P>,\n                                                                          factory: Maker<P>,\n                                                                          name: string,\n                                                                          details: Partial<GeneratorCommandDetails<P>> = {}): HandleCommand {\n\n    const detailsToUse: GeneratorCommandDetails<P> = {\n        ...defaultDetails(name),\n        ...details,\n    };\n    return commandHandlerFrom(handleGenerate(editorFactory, detailsToUse), factory, name,\n        detailsToUse.description, detailsToUse.intent, detailsToUse.tags);\n}\n\nfunction handleGenerate<P extends SeedDrivenGeneratorParameters>(editorFactory: EditorFactory<P>,\n                                                                 details: GeneratorCommandDetails<P>): OnCommand<P> {\n\n    return (ctx: HandlerContext, parameters: P) => {\n        return handle(ctx, editorFactory, parameters, details);\n    };\n}\n\nasync function handle<P extends SeedDrivenGeneratorParameters>(ctx: HandlerContext,\n                                                               editorFactory: EditorFactory<P>,\n                                                               params: P,\n                                                               details: GeneratorCommandDetails<P>): Promise<RedirectResult> {\n    const r = await generate(\n        startingPoint(params, ctx, details.repoLoader(params), details)\n            .then(p => {\n                return ctx.messageClient.respond(`Cloned seed project from ${params.source.repoRef.url}`)\n                    .then(() => p);\n            }),\n        ctx,\n        params.target.credentials,\n        editorFactory(params, ctx),\n        details.projectPersister,\n        params.target.repoRef,\n        params,\n        details.afterAction,\n    );\n    await ctx.messageClient.respond(`Created and pushed new project ${params.target.repoRef.url}`);\n    if (isGitHubRepoRef(r.target.id)) {\n        const webhookInstalled = await hasOrgWebhook(params.target.repoRef.owner, ctx);\n        if (!webhookInstalled) {\n            await addAtomistWebhook((r.target as GitProject), params);\n        }\n    }\n    return {\n        code: 0,\n        // Redirect to local project page\n        redirect: details.redirecter(params.target.repoRef),\n    };\n}\n\nconst OrgWebhookQuery = `query OrgWebhook($owner: String!) {\n  Webhook(webhookType: organization) {\n    org(owner: $owner) @required {\n      owner\n    }\n  }\n}`;\n\nasync function hasOrgWebhook(owner: string, ctx: HandlerContext): Promise<boolean> {\n    const orgHooks = await ctx.graphClient.query<any, any>({\n        query: OrgWebhookQuery,\n        variables: {\n            owner,\n        },\n        options: QueryNoCacheOptions,\n    });\n    const hookOwner = _.get(orgHooks, \"Webhook[0].org.owner\");\n    return hookOwner === owner;\n}\n\n/**\n * Retrieve a seed\n * @param {HandlerContext} ctx\n * @param {RepoLoader} repoLoader\n * @param {P} params\n * @param details command details\n * @return {Promise<Project>}\n */\nfunction startingPoint<P extends SeedDrivenGeneratorParameters>(params: P,\n                                                                ctx: HandlerContext,\n                                                                repoLoader: RepoLoader,\n                                                                details: GeneratorCommandDetails<any>): Promise<Project> {\n\n    return repoLoader(params.source.repoRef);\n}\n\nfunction defaultDetails<P extends SeedDrivenGeneratorParameters>(name: string): GeneratorCommandDetails<P> {\n    return {\n        description: name,\n        repoFinder: allReposInTeam(),\n        repoLoader: (p: P) => projectLoaderRepoLoader(new CachingProjectLoader(), p.target.credentials),\n        projectPersister: RemoteGitProjectPersister,\n        redirecter: () => undefined,\n    };\n}\n"]}