{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/support/slackReviewListener.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/support/slackReviewListener.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAqE;AAGrE,wFAAwF;AACxF,mEAAkE;AAClE,iDAAiD;AAMjD;;;GAGG;AACH,6BAAoC,EAAyB;IACzD,OAAO,CAAM,EAAE,EAAC,EAAE;QACd,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,MAAM,iBAAiB,CAAC,iBAAiB,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC;YACtF,OAAO,EAAE,CAAC;SACb;IACL,CAAC,CAAA,CAAC;AACN,CAAC;AAPD,kDAOC;AAED,2BAAiC,KAAa,EACb,EAAiB,EACjB,GAAmB,EACnB,eAAgC;;QAC7D,MAAM,IAAI,GAAiB;YACvB,IAAI,EAAE,IAAI,KAAK,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG;YAC1D,WAAW,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,yBAAyB,CAAC,EAAE,CAAC,MAAuB,EAAE,CAAC,CAAC,CAAC;SAC9F,CAAC;QACF,MAAM,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,2BAAO,CAAC;IACnB,CAAC;CAAA;AAED,mCAAmC,GAAkB,EAAE,EAAiB;IACpE,MAAM,IAAI,GAAG,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QACrF,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAEtD,OAAO;QACH,KAAK,EAAE,SAAS;QAChB,WAAW,EAAE,EAAE,CAAC,QAAQ;QACxB,WAAW,EAAE,wFAAwF;QACrG,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE;QAC5B,SAAS,EAAE,CAAC,MAAM,CAAC;QACnB,QAAQ,EAAE,OAAO;QACjB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAChB,gCAAgB,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC;SACjE,CAAC,CAAC,CAAC,EAAE;KACT,CAAC;AACN,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext, Success } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { ProjectReview, ReviewComment } from \"@atomist/automation-client/operations/review/ReviewResult\";\nimport { buttonForCommand } from \"@atomist/automation-client/spi/message/MessageClient\";\nimport { deepLink } from \"@atomist/automation-client/util/gitHub\";\nimport * as slack from \"@atomist/slack-messages\";\nimport { Attachment, SlackMessage } from \"@atomist/slack-messages\";\nimport { ReviewListener } from \"../../../../listener/ReviewListener\";\nimport { AddressChannels } from \"../../../../slack/addressChannels\";\nimport { PushReactionResponse } from \"../../PushReactionRegistration\";\n\n/**\n * Route reviews to Slack in linked channels\n * @constructor\n */\nexport function slackReviewListener(rr?: PushReactionResponse): ReviewListener {\n    return async ri => {\n        if (ri.review.comments.length > 0) {\n            await sendReviewToSlack(\"Review comments\", ri.review, ri.context, ri.addressChannels);\n            return rr;\n        }\n    };\n}\n\nasync function sendReviewToSlack(title: string,\n                                 pr: ProjectReview,\n                                 ctx: HandlerContext,\n                                 addressChannels: AddressChannels) {\n    const mesg: SlackMessage = {\n        text: `*${title} on ${pr.repoId.owner}/${pr.repoId.repo}*`,\n        attachments: pr.comments.map(c => reviewCommentToAttachment(pr.repoId as GitHubRepoRef, c)),\n    };\n    await addressChannels(mesg);\n    return Success;\n}\n\nfunction reviewCommentToAttachment(grr: GitHubRepoRef, rc: ReviewComment): Attachment {\n    const link = rc.sourceLocation ? slack.url(deepLink(grr, rc.sourceLocation), \"jump to\") :\n        slack.url(grr.url + \"/tree/\" + grr.sha, \"source\");\n\n    return {\n        color: \"#ff0000\",\n        author_name: rc.category,\n        author_icon: \"https://image.shutterstock.com/z/stock-vector-an-image-of-a-red-grunge-x-572409526.jpg\",\n        text: `${link} ${rc.detail}`,\n        mrkdwn_in: [\"text\"],\n        fallback: \"error\",\n        actions: !!rc.fix ? [\n            buttonForCommand({text: \"Fix\"}, rc.fix.command, rc.fix.params),\n        ] : [],\n    };\n}\n"]}