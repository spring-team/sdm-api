{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/verify/OnVerifiedDeploymentStatus.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/verify/OnVerifiedDeploymentStatus.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAAmI;AACnI,sEAAwE;AACxE,sFAA8F;AAE9F,8EAA8E;AAE9E,0DAA+D;AAI/D;;GAEG;AASH,IAAa,0BAA0B,GAAvC;IAEI,YAA6B,SAAuC,EACvC,kBAAuC;QADvC,cAAS,GAAT,SAAS,CAA8B;QACvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE3D,MAAM,CAAC,KAA+C,EAC/C,OAAuB,EACvB,MAAY;;YAC5B,MAAM,MAAM,GAAW,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAE7B,IAAI,MAAM,CAAC,OAAO,KAAK,oCAAsB,EAAE;gBAC3C,0BAAM,CAAC,KAAK,CAAC,8DAA8D,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;gBAC9F,OAAO,2BAAO,CAAC;aAClB;YAED,MAAM,EAAE,GAAG,yBAAe,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjF,MAAM,GAAG,GAAyC;gBAC9C,EAAE;gBACF,OAAO;gBACP,MAAM;gBACN,eAAe,EAAE,oCAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC;gBACzD,WAAW;aACd,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrD,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AA5BY,0BAA0B;IARtC,gCAAY,CAAC,4BAA4B,EACtC,sBAAY,CAAC;QACT,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE;YACP,OAAO,EAAE,oCAAsB;SAClC;KACJ,CAAC,CACL;;GACY,0BAA0B,CA4BtC;AA5BY,gEAA0B","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { StagingVerifiedContext } from \"../../../../common/delivery/goals/common/commonGoals\";\nimport { VerifiedDeploymentListener, VerifiedDeploymentListenerInvocation } from \"../../../../common/listener/VerifiedDeploymentListener\";\nimport { addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { OnSuccessStatus } from \"../../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\nimport Status = OnSuccessStatus.Status;\n\n/**\n * React to a verified deployment\n */\n@EventHandler(\"Act on verified deployment\",\n    subscription({\n        name: \"OnSuccessStatus\",\n        variables: {\n            context: StagingVerifiedContext,\n        },\n    }),\n)\nexport class OnVerifiedDeploymentStatus implements HandleEvent<OnSuccessStatus.Subscription> {\n\n    constructor(private readonly listeners: VerifiedDeploymentListener[],\n                private readonly credentialsFactory: CredentialsResolver) {}\n\n    public async handle(event: EventFired<OnSuccessStatus.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const status: Status = event.data.Status[0];\n        const commit = status.commit;\n\n        if (status.context !== StagingVerifiedContext) {\n            logger.debug(`********* onVerifiedStatus got called with status context=[${status.context}]`);\n            return Success;\n        }\n\n        const id = toRemoteRepoRef(commit.repo, { sha: commit.sha });\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n        const vdi: VerifiedDeploymentListenerInvocation = {\n            id,\n            context,\n            status,\n            addressChannels: addressChannelsFor(commit.repo, context),\n            credentials,\n        };\n        await Promise.all(params.listeners.map(l => l(vdi)));\n        return Success;\n    }\n}\n"]}