{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/goalPreconditions.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/goalPreconditions.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAoD;AACpD,2CAAqC;AACrC,2EAAyG;AAEzG;;;GAGG;AACH,6BAAoC,IAAa,EAAE,IAElD;IACG,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QACxD,OAAO,IAAI,CAAC;KACf;IACD,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IACvF,IAAI,aAAa,EAAE;QACf,0BAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,+BAAa,CAAC,IAAI,CAAC,EAAE,+BAAa,CAAC,aAAa,CAAC,CAAC,CAAC;QACnG,OAAO,KAAK,CAAC;KAChB;IACD,0BAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACjF,OAAO,IAAI,CAAC;AAChB,CAAC;AAbD,kDAaC;AAED,mBAAmB,eAA2B,EAAE,cAAyB;IACrE,MAAM,gBAAgB,GAAG,8BAAY,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,CAAC;IACvE,IAAI,CAAC,gBAAgB,EAAE;QACnB,6FAA6F;QAC7F,gBAAgB;QAChB,0BAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,+BAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QACpF,OAAO,IAAI,CAAC;KACf;IACD,QAAQ,gBAAgB,CAAC,KAAK,EAAE;QAC5B,KAAK,SAAS,CAAC;QACf,KAAK,SAAS;YACV,0BAAM,CAAC,IAAI,CAAC,2CAA2C,EAAE,+BAAa,CAAC,eAAe,CAAC,EACnF,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,KAAK,CAAC;QACjB,KAAK,SAAS,CAAC;QACf,KAAK,WAAW,CAAC;QACjB,KAAK,sBAAsB,CAAC;QAC5B,KAAK,YAAY;YACb,0BAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,+BAAa,CAAC,eAAe,CAAC,EAClE,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,KAAK,CAAC;QACjB,KAAK,SAAS;YACV,OAAO,IAAI,CAAC;QAChB;YACI,MAAM,IAAI,KAAK,CAAC,oBAAO,CAAC,2BAA2B,EAAE,gBAAgB,CAAC,KAAK,EACvE,+BAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;KAC5C;AACL,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { sprintf } from \"sprintf-js\";\nimport { goalKeyString, mapKeyToGoal, SdmGoal, SdmGoalKey } from \"../../../../ingesters/sdmGoalIngester\";\n\n/*\n * Right now the only preconditions supported are other goals.\n * The intention is that others will be expressed, such as requiring an image.\n */\nexport function preconditionsAreMet(goal: SdmGoal, info: {\n    goalsForCommit: SdmGoal[], // I would like to make this optional and fetch if needed not provided\n}): boolean {\n    if (!goal.preConditions || goal.preConditions.length === 0) {\n        return true;\n    }\n    const falsification = goal.preConditions.find(p => !satisfied(p, info.goalsForCommit));\n    if (falsification) {\n        logger.debug(\"Precondition not met for %s: %s\", goalKeyString(goal), goalKeyString(falsification));\n        return false;\n    }\n    logger.debug(\"All %d preconditions satisfied for %s\", goal.preConditions.length);\n    return true;\n}\n\nfunction satisfied(preconditionKey: SdmGoalKey, goalsForCommit: SdmGoal[]): boolean {\n    const preconditionGoal = mapKeyToGoal(goalsForCommit)(preconditionKey);\n    if (!preconditionGoal) {\n        // TODO CD I'd suggest that goals that have a precondition that doesn't exist in the goal set\n        // are satisfied\n        logger.error(\"Precondition %s not found on commit\", goalKeyString(preconditionKey));\n        return true;\n    }\n    switch (preconditionGoal.state) {\n        case \"failure\":\n        case \"skipped\":\n            logger.info(\"Precondition %s in state %s, won't be met\", goalKeyString(preconditionKey),\n                preconditionGoal.state);\n            return false;\n        case \"planned\":\n        case \"requested\":\n        case \"waiting_for_approval\":\n        case \"in_process\":\n            logger.debug(\"Not yet. %s in state %s\", goalKeyString(preconditionKey),\n                preconditionGoal.state);\n            return false;\n        case \"success\":\n            return true;\n        default:\n            throw new Error(sprintf(\"Unhandled state: %s on %s\", preconditionGoal.state,\n                goalKeyString(preconditionKey)));\n    }\n}\n"]}