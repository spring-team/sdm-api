"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_1omdk0xry5=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/support/DefaultGoalsSoftwareDeliveryMachine.ts",hash="b6dd21bfd5f21d45560bc0c169cfa62142933260",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/support/DefaultGoalsSoftwareDeliveryMachine.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:10},end:{line:18,column:27}},"2":{start:{line:19,column:25},end:{line:19,column:53}},"3":{start:{line:20,column:21},end:{line:20,column:73}},"4":{start:{line:21,column:25},end:{line:21,column:81}},"5":{start:{line:22,column:27},end:{line:22,column:89}},"6":{start:{line:23,column:31},end:{line:23,column:89}},"7":{start:{line:24,column:32},end:{line:24,column:103}},"8":{start:{line:25,column:24},end:{line:25,column:82}},"9":{start:{line:26,column:26},end:{line:26,column:81}},"10":{start:{line:27,column:26},end:{line:27,column:88}},"11":{start:{line:28,column:23},end:{line:28,column:70}},"12":{start:{line:29,column:25},end:{line:29,column:87}},"13":{start:{line:30,column:42},end:{line:30,column:86}},"14":{start:{line:43,column:8},end:{line:43,column:26}},"15":{start:{line:44,column:8},end:{line:44,column:50}},"16":{start:{line:45,column:8},end:{line:45,column:161}},"17":{start:{line:46,column:8},end:{line:56,column:158}},"18":{start:{line:57,column:8},end:{line:57,column:80}},"19":{start:{line:60,column:0},end:{line:60,column:82}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:44},end:{line:58,column:5}},line:42}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1omdk0xry5.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const _=(cov_1omdk0xry5.s[1]++,require("lodash"));const wellKnownGoals_1=(cov_1omdk0xry5.s[2]++,require("../wellKnownGoals"));const createRepo_1=(cov_1omdk0xry5.s[3]++,require("../../common/command/generator/createRepo"));const listGenerators_1=(cov_1omdk0xry5.s[4]++,require("../../common/command/generator/listGenerators"));const executeAutofixes_1=(cov_1omdk0xry5.s[5]++,require("../../common/delivery/code/autofix/executeAutofixes"));const executePushReactions_1=(cov_1omdk0xry5.s[6]++,require("../../common/delivery/code/executePushReactions"));const executeFingerprinting_1=(cov_1omdk0xry5.s[7]++,require("../../common/delivery/code/fingerprint/executeFingerprinting"));const executeReview_1=(cov_1omdk0xry5.s[8]++,require("../../common/delivery/code/review/executeReview"));const executeUndeploy_1=(cov_1omdk0xry5.s[9]++,require("../../common/delivery/deploy/executeUndeploy"));const logInterpreters_1=(cov_1omdk0xry5.s[10]++,require("../../common/delivery/goals/support/logInterpreters"));const SelfDescribe_1=(cov_1omdk0xry5.s[11]++,require("../../handlers/commands/SelfDescribe"));const SetGoalsOnPush_1=(cov_1omdk0xry5.s[12]++,require("../../handlers/events/delivery/goals/SetGoalsOnPush"));const AbstractSoftwareDeliveryMachine_1=(cov_1omdk0xry5.s[13]++,require("./AbstractSoftwareDeliveryMachine"));/**
 * Add default goals to AbstractSoftwareDeliveryMachine
 */class DefaultGoalsSoftwareDeliveryMachine extends(AbstractSoftwareDeliveryMachine_1.AbstractSoftwareDeliveryMachine){/**
     * Construct a new software delivery machine, with zero or
     * more goal setters.
     * @param {string} name
     * @param {SoftwareDeliveryMachineOptions} opts
     * @param {GoalSetter} goalSetters tell me what to do on a push. Hint: start with "whenPushSatisfies(...)"
     */constructor(name,opts,...goalSetters){cov_1omdk0xry5.f[0]++;cov_1omdk0xry5.s[14]++;super(name,opts);cov_1omdk0xry5.s[15]++;this.goalSetters=_.flatten(goalSetters);cov_1omdk0xry5.s[16]++;this.addSupportingCommands(SelfDescribe_1.selfDescribeHandler(this),listGenerators_1.listGeneratorsHandler(this),createRepo_1.createRepoHandler(this));cov_1omdk0xry5.s[17]++;this.addGoalImplementation("Autofix",wellKnownGoals_1.AutofixGoal,executeAutofixes_1.executeAutofixes(this.opts.projectLoader,this.autofixRegistrations),{// Autofix errors should not be reported to the user
logInterpreter:logInterpreters_1.LogSuppressor}).addGoalImplementation("DoNothing",wellKnownGoals_1.NoGoal,SetGoalsOnPush_1.executeImmaterial).addGoalImplementation("FingerprinterRegistration",wellKnownGoals_1.FingerprintGoal,executeFingerprinting_1.executeFingerprinting(this.opts.projectLoader,this.fingerprinterRegistrations,this.fingerprintListeners)).addGoalImplementation("CodeReactions",wellKnownGoals_1.PushReactionGoal,executePushReactions_1.executePushReactions(this.opts.projectLoader,this.pushReactionRegistrations)).addGoalImplementation("Reviews",wellKnownGoals_1.ReviewGoal,executeReview_1.executeReview(this.opts.projectLoader,this.reviewerRegistrations,this.reviewListeners)).addVerifyImplementation().addGoalImplementation("OfferToDeleteRepo",wellKnownGoals_1.DeleteRepositoryGoal,executeUndeploy_1.offerToDeleteRepository()).addGoalImplementation("OfferToDeleteRepoAfterUndeploys",wellKnownGoals_1.DeleteAfterUndeploysGoal,executeUndeploy_1.offerToDeleteRepository());cov_1omdk0xry5.s[18]++;this.knownSideEffect(wellKnownGoals_1.ArtifactGoal,"from ImageLinked");}}cov_1omdk0xry5.s[19]++;exports.DefaultGoalsSoftwareDeliveryMachine=DefaultGoalsSoftwareDeliveryMachine;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2JsdWVwcmludC9zdXBwb3J0L0RlZmF1bHRHb2Fsc1NvZnR3YXJlRGVsaXZlcnlNYWNoaW5lLnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy9zcmMvYmx1ZXByaW50L3N1cHBvcnQvRGVmYXVsdEdvYWxzU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILDRCQUE0QjtBQUM1QixzREFTMkI7QUFDM0IsMEVBQThFO0FBQzlFLGtGQUFzRjtBQUN0RiwwRkFBdUY7QUFDdkYsMEZBQXVGO0FBQ3ZGLHdHQUFxRztBQUNyRyxtRkFBZ0Y7QUFDaEYsa0ZBQXVGO0FBQ3ZGLHlGQUFvRjtBQUVwRix1RUFBMkU7QUFDM0Usd0ZBQXdGO0FBRXhGLHVGQUFvRjtBQUVwRjs7R0FFRztBQUNILHlDQUFpRCxTQUFRLGlFQUErQjtJQUVwRjs7Ozs7O09BTUc7SUFDSCxZQUFZLElBQVksRUFDWixJQUFvQyxFQUNwQyxHQUFHLFdBQTZDO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxxQkFBcUIsQ0FDdEIsa0NBQW1CLENBQUMsSUFBSSxDQUFDLEVBQ3pCLHNDQUFxQixDQUFDLElBQUksQ0FBQyxFQUMzQiw4QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FDMUIsQ0FBQztRQUVGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsNEJBQVcsRUFDN0MsbUNBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDbEUsb0RBQW9EO1lBQ3BELGNBQWMsRUFBRSwrQkFBYTtTQUNoQyxDQUFDO2FBQ0QscUJBQXFCLENBQUMsV0FBVyxFQUFFLHVCQUFNLEVBQUUsa0NBQWlCLENBQUM7YUFDN0QscUJBQXFCLENBQUMsMkJBQTJCLEVBQUUsZ0NBQWUsRUFDL0QsNkNBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2FBQzlHLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxpQ0FBZ0IsRUFDcEQsMkNBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7YUFDakYscUJBQXFCLENBQUMsU0FBUyxFQUFFLDJCQUFVLEVBQ3hDLDZCQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM1Rix1QkFBdUIsRUFBRTthQUN6QixxQkFBcUIsQ0FBQyxtQkFBbUIsRUFBRSxxQ0FBb0IsRUFDNUQseUNBQXVCLEVBQUUsQ0FBQzthQUM3QixxQkFBcUIsQ0FBQyxpQ0FBaUMsRUFBRSx5Q0FBd0IsRUFDOUUseUNBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsNkJBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FFSjtBQXhDRCxrRkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggQXRvbWlzdCwgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7XG4gICAgQXJ0aWZhY3RHb2FsLFxuICAgIEF1dG9maXhHb2FsLFxuICAgIERlbGV0ZUFmdGVyVW5kZXBsb3lzR29hbCxcbiAgICBEZWxldGVSZXBvc2l0b3J5R29hbCxcbiAgICBGaW5nZXJwcmludEdvYWwsXG4gICAgTm9Hb2FsLFxuICAgIFB1c2hSZWFjdGlvbkdvYWwsXG4gICAgUmV2aWV3R29hbCxcbn0gZnJvbSBcIi4uL3dlbGxLbm93bkdvYWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXBvSGFuZGxlciB9IGZyb20gXCIuLi8uLi9jb21tb24vY29tbWFuZC9nZW5lcmF0b3IvY3JlYXRlUmVwb1wiO1xuaW1wb3J0IHsgbGlzdEdlbmVyYXRvcnNIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb21tYW5kL2dlbmVyYXRvci9saXN0R2VuZXJhdG9yc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZUF1dG9maXhlcyB9IGZyb20gXCIuLi8uLi9jb21tb24vZGVsaXZlcnkvY29kZS9hdXRvZml4L2V4ZWN1dGVBdXRvZml4ZXNcIjtcbmltcG9ydCB7IGV4ZWN1dGVQdXNoUmVhY3Rpb25zIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9kZWxpdmVyeS9jb2RlL2V4ZWN1dGVQdXNoUmVhY3Rpb25zXCI7XG5pbXBvcnQgeyBleGVjdXRlRmluZ2VycHJpbnRpbmcgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2RlbGl2ZXJ5L2NvZGUvZmluZ2VycHJpbnQvZXhlY3V0ZUZpbmdlcnByaW50aW5nXCI7XG5pbXBvcnQgeyBleGVjdXRlUmV2aWV3IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9kZWxpdmVyeS9jb2RlL3Jldmlldy9leGVjdXRlUmV2aWV3XCI7XG5pbXBvcnQgeyBvZmZlclRvRGVsZXRlUmVwb3NpdG9yeSB9IGZyb20gXCIuLi8uLi9jb21tb24vZGVsaXZlcnkvZGVwbG95L2V4ZWN1dGVVbmRlcGxveVwiO1xuaW1wb3J0IHsgTG9nU3VwcHJlc3NvciB9IGZyb20gXCIuLi8uLi9jb21tb24vZGVsaXZlcnkvZ29hbHMvc3VwcG9ydC9sb2dJbnRlcnByZXRlcnNcIjtcbmltcG9ydCB7IEdvYWxTZXR0ZXIgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2xpc3RlbmVyL0dvYWxTZXR0ZXJcIjtcbmltcG9ydCB7IHNlbGZEZXNjcmliZUhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vaGFuZGxlcnMvY29tbWFuZHMvU2VsZkRlc2NyaWJlXCI7XG5pbXBvcnQgeyBleGVjdXRlSW1tYXRlcmlhbCB9IGZyb20gXCIuLi8uLi9oYW5kbGVycy9ldmVudHMvZGVsaXZlcnkvZ29hbHMvU2V0R29hbHNPblB1c2hcIjtcbmltcG9ydCB7IFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9ucyB9IGZyb20gXCIuLi9Tb2Z0d2FyZURlbGl2ZXJ5TWFjaGluZU9wdGlvbnNcIjtcbmltcG9ydCB7IEFic3RyYWN0U29mdHdhcmVEZWxpdmVyeU1hY2hpbmUgfSBmcm9tIFwiLi9BYnN0cmFjdFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lXCI7XG5cbi8qKlxuICogQWRkIGRlZmF1bHQgZ29hbHMgdG8gQWJzdHJhY3RTb2Z0d2FyZURlbGl2ZXJ5TWFjaGluZVxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdEdvYWxzU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUgZXh0ZW5kcyBBYnN0cmFjdFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lIHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIG5ldyBzb2Z0d2FyZSBkZWxpdmVyeSBtYWNoaW5lLCB3aXRoIHplcm8gb3JcbiAgICAgKiBtb3JlIGdvYWwgc2V0dGVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7U29mdHdhcmVEZWxpdmVyeU1hY2hpbmVPcHRpb25zfSBvcHRzXG4gICAgICogQHBhcmFtIHtHb2FsU2V0dGVyfSBnb2FsU2V0dGVycyB0ZWxsIG1lIHdoYXQgdG8gZG8gb24gYSBwdXNoLiBIaW50OiBzdGFydCB3aXRoIFwid2hlblB1c2hTYXRpc2ZpZXMoLi4uKVwiXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIG9wdHM6IFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi5nb2FsU2V0dGVyczogQXJyYXk8R29hbFNldHRlciB8IEdvYWxTZXR0ZXJbXT4pIHtcbiAgICAgICAgc3VwZXIobmFtZSwgb3B0cyk7XG4gICAgICAgIHRoaXMuZ29hbFNldHRlcnMgPSBfLmZsYXR0ZW4oZ29hbFNldHRlcnMpO1xuICAgICAgICB0aGlzLmFkZFN1cHBvcnRpbmdDb21tYW5kcyhcbiAgICAgICAgICAgIHNlbGZEZXNjcmliZUhhbmRsZXIodGhpcyksXG4gICAgICAgICAgICBsaXN0R2VuZXJhdG9yc0hhbmRsZXIodGhpcyksXG4gICAgICAgICAgICBjcmVhdGVSZXBvSGFuZGxlcih0aGlzKSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIkF1dG9maXhcIiwgQXV0b2ZpeEdvYWwsXG4gICAgICAgICAgICBleGVjdXRlQXV0b2ZpeGVzKHRoaXMub3B0cy5wcm9qZWN0TG9hZGVyLCB0aGlzLmF1dG9maXhSZWdpc3RyYXRpb25zKSwge1xuICAgICAgICAgICAgICAgIC8vIEF1dG9maXggZXJyb3JzIHNob3VsZCBub3QgYmUgcmVwb3J0ZWQgdG8gdGhlIHVzZXJcbiAgICAgICAgICAgICAgICBsb2dJbnRlcnByZXRlcjogTG9nU3VwcHJlc3NvcixcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkR29hbEltcGxlbWVudGF0aW9uKFwiRG9Ob3RoaW5nXCIsIE5vR29hbCwgZXhlY3V0ZUltbWF0ZXJpYWwpXG4gICAgICAgICAgICAuYWRkR29hbEltcGxlbWVudGF0aW9uKFwiRmluZ2VycHJpbnRlclJlZ2lzdHJhdGlvblwiLCBGaW5nZXJwcmludEdvYWwsXG4gICAgICAgICAgICAgICAgZXhlY3V0ZUZpbmdlcnByaW50aW5nKHRoaXMub3B0cy5wcm9qZWN0TG9hZGVyLCB0aGlzLmZpbmdlcnByaW50ZXJSZWdpc3RyYXRpb25zLCB0aGlzLmZpbmdlcnByaW50TGlzdGVuZXJzKSlcbiAgICAgICAgICAgIC5hZGRHb2FsSW1wbGVtZW50YXRpb24oXCJDb2RlUmVhY3Rpb25zXCIsIFB1c2hSZWFjdGlvbkdvYWwsXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVB1c2hSZWFjdGlvbnModGhpcy5vcHRzLnByb2plY3RMb2FkZXIsIHRoaXMucHVzaFJlYWN0aW9uUmVnaXN0cmF0aW9ucykpXG4gICAgICAgICAgICAuYWRkR29hbEltcGxlbWVudGF0aW9uKFwiUmV2aWV3c1wiLCBSZXZpZXdHb2FsLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVSZXZpZXcodGhpcy5vcHRzLnByb2plY3RMb2FkZXIsIHRoaXMucmV2aWV3ZXJSZWdpc3RyYXRpb25zLCB0aGlzLnJldmlld0xpc3RlbmVycykpXG4gICAgICAgICAgICAuYWRkVmVyaWZ5SW1wbGVtZW50YXRpb24oKVxuICAgICAgICAgICAgLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIk9mZmVyVG9EZWxldGVSZXBvXCIsIERlbGV0ZVJlcG9zaXRvcnlHb2FsLFxuICAgICAgICAgICAgICAgIG9mZmVyVG9EZWxldGVSZXBvc2l0b3J5KCkpXG4gICAgICAgICAgICAuYWRkR29hbEltcGxlbWVudGF0aW9uKFwiT2ZmZXJUb0RlbGV0ZVJlcG9BZnRlclVuZGVwbG95c1wiLCBEZWxldGVBZnRlclVuZGVwbG95c0dvYWwsXG4gICAgICAgICAgICAgICAgb2ZmZXJUb0RlbGV0ZVJlcG9zaXRvcnkoKSk7XG4gICAgICAgIHRoaXMua25vd25TaWRlRWZmZWN0KEFydGlmYWN0R29hbCwgXCJmcm9tIEltYWdlTGlua2VkXCIpO1xuICAgIH1cblxufVxuIl19