{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/slack/reportFailureInterpretationToLinkedChannels.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/slack/reportFailureInterpretationToLinkedChannels.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAEpD,+DAA+D;AAI/D,qDAAkE,QAAgB,EAChB,cAA0C,EAC1C,OAAsC,EACtC,EAAiB,EACjB,eAAgC,EAChC,WAA0B;;QACxF,IAAI,CAAC,cAAc,EAAE;YACjB,IAAI,OAAO,CAAC,GAAG,EAAE;gBACb,0BAAM,CAAC,IAAI,CAAC,2CAA2C,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;gBACvE,OAAO;aACV;YACD,0BAAM,CAAC,IAAI,CAAC,8DAA8D,CAAC,CAAC;YAC5E,MAAM,eAAe,CAAC;gBAClB,OAAO,EAAE,OAAO,CAAC,GAAG;gBACpB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,GAAG,QAAQ,YAAY,EAAE,CAAC,GAAG,MAAM;aACzC,CAAC,CAAC;YACV,OAAO;SACV;QACD,MAAM,eAAe,CAAC;YAClB,IAAI,EAAE,UAAU,QAAQ,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;YAC3F,WAAW,EAAE,CAAC;oBACV,KAAK,EAAE,cAAc,CAAC,OAAO,IAAI,SAAS;oBAC1C,UAAU,EAAE,OAAO,CAAC,GAAG;oBACvB,QAAQ,EAAE,eAAe;oBACzB,IAAI,EAAE,cAAc,CAAC,YAAY;oBACjC,KAAK,EAAE,SAAS;oBAChB,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;iBAC5C,CAAC;SACL,CAAC,CAAC;QACH,MAAM,uBAAuB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,6CAA6C;QAC3F,MAAM,oBAAoB,GAAG,gBAAgB,IAAI,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,uBAAuB,CAAC;QAC1H,IAAI,oBAAoB,EAAE;YACtB,0BAAM,CAAC,KAAK,CAAC,4DAA4D,EAAE,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;YACvH,MAAM,eAAe,CAAC;gBAClB,OAAO,EAAE,OAAO,CAAC,GAAG;gBACpB,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,GAAG,QAAQ,YAAY,EAAE,CAAC,GAAG,MAAM;aACzC,CAAC,CAAC;SACb;IACL,CAAC;CAAA;AAxCD,kGAwCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as slack from \"@atomist/slack-messages/SlackMessages\";\nimport { AddressChannels } from \"../../common/slack/addressChannels\";\nimport { InterpretedLog } from \"../../spi/log/InterpretedLog\";\n\nexport async function reportFailureInterpretationToLinkedChannels(stepName: string,\n                                                                  interpretation: InterpretedLog | undefined,\n                                                                  fullLog: { url?: string, log: string },\n                                                                  id: RemoteRepoRef,\n                                                                  addressChannels: AddressChannels,\n                                                                  retryButton?: slack.Action) {\n    if (!interpretation) {\n        if (fullLog.url) {\n            logger.info(\"No log interpretation. Log available at: \" + fullLog.url);\n            return;\n        }\n        logger.info(\"No log interpretation, no log URL. Sending full log to Slack\");\n        await addressChannels({\n            content: fullLog.log,\n            fileType: \"text\",\n            fileName: `${stepName}-failure-${id.sha}.log`,\n        } as any);\n        return;\n    }\n    await addressChannels({\n        text: `Failed ${stepName} of ${slack.url(`${id.url}/tree/${id.sha}`, id.sha.substr(0, 7))}`,\n        attachments: [{\n            title: interpretation.message || \"Failure\",\n            title_link: fullLog.url,\n            fallback: \"relevant bits\",\n            text: interpretation.relevantPart,\n            color: \"#ff5050\",\n            actions: retryButton ? [retryButton] : [],\n        }],\n    });\n    const includeFullLogByDefault = !fullLog.url; // if there is no link, include it by default\n    const shouldIncludeFullLog = \"includeFullLog\" in interpretation ? interpretation.includeFullLog : includeFullLogByDefault;\n    if (shouldIncludeFullLog) {\n        logger.debug(\"sending full log to slack. url is %s, includeFullLog is %s\", fullLog.url, interpretation.includeFullLog);\n        await addressChannels({\n            content: fullLog.log,\n            fileType: \"text\",\n            fileName: `${stepName}-failure-${id.sha}.log`,\n        } as any);\n    }\n}\n"]}