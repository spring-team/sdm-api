{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/SetGoalsOnPush.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/SetGoalsOnPush.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAaoC;AACpC,sEAAmE;AACnE,sEAAwE;AACxE,4EAAuE;AAGvE,iEAAgF;AAEhF,+GAAgJ;AAChJ,6EAA2H;AAK3H,6EAA0E;AAE1E,8EAA+F;AAG/F,0DAAoG;AAGpG;;GAEG;AAEH,IAAa,cAAc,GAA3B;IAEI;;;;;;;OAOG;IACH,YAA6B,aAA4B,EAC5B,WAAyB,EAC1B,cAAkC,EACjC,qBAAkD,EAClD,kBAAuC;QAJvC,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAoB;QACjC,0BAAqB,GAArB,qBAAqB,CAA6B;QAClD,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE3D,MAAM,CAAC,KAAiD,EACjD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,IAAI,GAA2B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,EAAE,GAAkB,yBAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,MAAM,iBAAiB,CAAC;gBACpB,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,qBAAqB,EAAE,MAAM,CAAC,qBAAqB;aACtD,EAAE;gBACC,OAAO;gBACP,WAAW;gBACX,IAAI;aACP,CAAC,CAAC;YAEH,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AApCY,cAAc;IAD1B,gCAAY,CAAC,gBAAgB,EAAE,sBAAY,CAAC,mBAAmB,CAAC,CAAC;2DAcV,yDAA2B;GAbtE,cAAc,CAoC1B;AApCY,wCAAc;AA6C3B,2BAAwC,KAA6B,EAC7B,UAIC;;QACrC,MAAM,EAAC,aAAa,EAAE,cAAc,EAAE,WAAW,EAAE,qBAAqB,EAAC,GAAG,KAAK,CAAC;QAClF,MAAM,EAAC,OAAO,EAAE,WAAW,EAAE,IAAI,EAAC,GAAG,UAAU,CAAC;QAChD,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,eAAe,GAAG,oCAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/D,MAAM,SAAS,GAAG,aAAI,EAAE,CAAC;QAEzB,MAAM,EAAC,eAAe,EAAE,WAAW,EAAC,GAAG,MAAM,cAAc,CACvD,EAAC,aAAa,EAAE,WAAW,EAAE,qBAAqB,EAAC,EAAE;YACjD,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS;SAC7D,CAAC,CAAC;QAEP,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/D,4DAA4D;QAC5D,uBAAuB;QACvB,MAAM,GAAG,GAA+B;YACpC,EAAE;YACF,OAAO;YACP,WAAW;YACX,eAAe,EAAE,oCAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;YACvD,SAAS;YACT,OAAO,EAAE,eAAe;SAC3B,CAAC;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnD,OAAO,eAAe,CAAC;IAC3B,CAAC;CAAA;AA/BD,8CA+BC;AAED,wBAAqC,KAIC,EACD,aAOC;;QAIlC,MAAM,EAAC,aAAa,EAAE,WAAW,EAAE,qBAAqB,EAAC,GAAG,KAAK,CAAC;QAClE,MAAM,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,GAAG,aAAa,CAAC;QACpF,OAAO,aAAa,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,CAAM,OAAO,EAAC,EAAE;YAC3F,MAAM,GAAG,GAA2B;gBAChC,OAAO;gBACP,WAAW;gBACX,EAAE;gBACF,IAAI;gBACJ,OAAO;gBACP,eAAe;aAClB,CAAC;YACF,MAAM,eAAe,GAAG,MAAM,2BAA2B,CAAC,EAAC,WAAW,EAAC,EAAE,GAAG,CAAC,CAAC;YAC9E,IAAI,CAAC,eAAe,EAAE;gBAClB,OAAO,EAAC,eAAe,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,EAAC,CAAC;aACxD;YACD,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,qBAAqB,EAAE,GAAG,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;YACpG,OAAO,EAAC,eAAe,EAAE,WAAW,EAAC,CAAC;QAC1C,CAAC,CAAA,CAAC,CAAC;IAEP,CAAC;CAAA;AAnCD,wCAmCC;AAED,2BAAiC,qBAAkD,EAClD,GAA2B,EAC3B,eAAsB,EACtB,SAAiB;;QAC9C,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAM,CAAC,EAAC,EAAE;YACnD,OAAA,6BAAgB,CAAC,GAAG,CAAC,OAAO,EAAE;gBAC1B,OAAO,EAAE,eAAe,CAAC,IAAI;gBAC7B,SAAS;gBACT,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,uBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;gBACpD,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,UAAU,EAAE,4BAAkB,CAAC,GAAG,CAAC,IAAI,CAAC;gBACxC,WAAW,EAAE,MAAM,WAAW,CAAC,EAAC,qBAAqB,EAAC,EAAE,CAAC,EAAE,GAAG,CAAC;aAClE,CAAC,CAAA;UAAA,CAAC,CAAC,CAAC;IACb,CAAC;CAAA;AAED,qBAA2B,KAE1B,EAA0B,CAAO,EAAE,GAA2B;;QAC3D,MAAM,EAAC,qBAAqB,EAAC,GAAG,KAAK,CAAC;QACtC,MAAM,IAAI,GAAG,MAAM,qBAAqB,CAAC,qBAAqB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACvE,IAAI,kDAAoB,CAAC,IAAI,CAAC,EAAE;YAC5B,OAAO,2CAA8B,CAAC,IAAI,CAAC,CAAC;SAC/C;QACD,IAAI,0CAAY,CAAC,IAAI,CAAC,EAAE;YACpB,OAAO,EAAC,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,cAAc,EAAC,CAAC;SAC7D;QAED,0BAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7D,OAAO,EAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAC,CAAC;IACrD,CAAC;CAAA;AAEY,QAAA,iBAAiB,GAAuB,GAAS,EAAE;IAC5D,0BAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAC/C,OAAO,2BAAO,CAAC;AACnB,CAAC,CAAA,CAAC;AAEF,qCAA2C,KAAoC,EACpC,EAA0B;;QACjE,MAAM,EAAC,WAAW,EAAC,GAAG,KAAK,CAAC;QAC5B,MAAM,EAAC,IAAI,EAAE,EAAE,EAAE,eAAe,EAAC,GAAG,EAAE,CAAC;QAEvC,IAAI;YACA,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAC5D,MAAM,eAAe,GAAU,MAAM,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,eAAe,EAAE;gBAClB,0BAAM,CAAC,IAAI,CAAC,qCAAqC,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACtF;iBAAM;gBACH,0BAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,EAAE,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;aACxE;YACD,OAAO,eAAe,CAAC;SAC1B;QAAC,OAAO,GAAG,EAAE;YACV,0BAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,eAAe,CAAC,mEAAmE,GAAG,EAAE,CAAC,CAAC;YAChG,MAAM,GAAG,CAAC;SACb;IACL,CAAC;CAAA;AAGD,IAAa,oBAAoB,GAAjC;CAeC,CAAA;AAbG;IADC,0BAAM,CAAC,2BAAO,CAAC,SAAS,CAAC;;yDACC;AAG3B;IADC,mCAAe,CAAC,oCAAgB,CAAC,WAAW,CAAC;;mDACzB;AAGrB;IADC,mCAAe,CAAC,oCAAgB,CAAC,gBAAgB,CAAC;;kDAC/B;AAGpB;IADC,mCAAe,CAAC,oCAAgB,CAAC,wBAAwB,CAAC;;wDACjC;AAG1B;IADC,6BAAS,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC;;iDACT;AAdX,oBAAoB;IADhC,uBAAU,EAAE;GACA,oBAAoB,CAehC;AAfY,oDAAoB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EventFired,\n    EventHandler,\n    HandleEvent,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    MappedParameter,\n    MappedParameters,\n    Parameter,\n    Secret,\n    Secrets,\n    Success,\n} from \"@atomist/automation-client\";\nimport { Parameters } from \"@atomist/automation-client/decorators\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { guid } from \"@atomist/automation-client/internal/util/string\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { Goal, hasPreconditions } from \"../../../../common/delivery/goals/Goal\";\nimport { Goals } from \"../../../../common/delivery/goals/Goals\";\nimport { isGoalImplementation, isSideEffect, SdmGoalImplementationMapper } from \"../../../../common/delivery/goals/SdmGoalImplementationMapper\";\nimport { constructSdmGoal, constructSdmGoalImplementation, storeGoal } from \"../../../../common/delivery/goals/storeGoals\";\nimport { ExecuteGoalWithLog } from \"../../../../common/delivery/goals/support/reportGoalError\";\nimport { GoalSetter } from \"../../../../common/listener/GoalSetter\";\nimport { GoalsSetListener, GoalsSetListenerInvocation } from \"../../../../common/listener/GoalsSetListener\";\nimport { PushListenerInvocation } from \"../../../../common/listener/PushListener\";\nimport { PushRules } from \"../../../../common/listener/support/PushRules\";\nimport { ProjectLoader } from \"../../../../common/repo/ProjectLoader\";\nimport { AddressChannels, addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { SdmGoal, SdmGoalFulfillment } from \"../../../../ingesters/sdmGoalIngester\";\nimport { OnPushToAnyBranch, PushFields } from \"../../../../typings/types\";\nimport { providerIdFromPush, repoRefFromPush, toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\n\n/**\n * Set up goalSet on a push (e.g. for delivery).\n */\n@EventHandler(\"Set up goalSet\", subscription(\"OnPushToAnyBranch\"))\nexport class SetGoalsOnPush implements HandleEvent<OnPushToAnyBranch.Subscription> {\n\n    /**\n     * Configure goal setting\n     * @param projectLoader use to load projects\n     * @param goalSetters first GoalSetter that returns goalSet wins\n     * @param goalsListeners listener to goals set\n     * @param implementationMapping\n     * @param credentialsFactory credentials factory\n     */\n    constructor(private readonly projectLoader: ProjectLoader,\n                private readonly goalSetters: GoalSetter[],\n                public readonly goalsListeners: GoalsSetListener[],\n                private readonly implementationMapping: SdmGoalImplementationMapper,\n                private readonly credentialsFactory: CredentialsResolver) {}\n\n    public async handle(event: EventFired<OnPushToAnyBranch.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const push: OnPushToAnyBranch.Push = event.data.Push[0];\n        const id: RemoteRepoRef = toRemoteRepoRef(push.repo);\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        await chooseAndSetGoals({\n            projectLoader: params.projectLoader,\n            goalsListeners: params.goalsListeners,\n            goalSetters: params.goalSetters,\n            implementationMapping: params.implementationMapping,\n        }, {\n            context,\n            credentials,\n            push,\n        });\n\n        return Success;\n    }\n}\n\nexport interface ChooseAndSetGoalsRules {\n    projectLoader: ProjectLoader;\n    goalsListeners: GoalsSetListener[];\n    goalSetters: GoalSetter[];\n    implementationMapping: SdmGoalImplementationMapper;\n}\n\nexport async function chooseAndSetGoals(rules: ChooseAndSetGoalsRules,\n                                        parameters: {\n                                            context: HandlerContext,\n                                            credentials: ProjectOperationCredentials,\n                                            push: PushFields.Fragment,\n                                        }) {\n    const {projectLoader, goalsListeners, goalSetters, implementationMapping} = rules;\n    const {context, credentials, push} = parameters;\n    const id = repoRefFromPush(push);\n    const addressChannels = addressChannelsFor(push.repo, context);\n    const goalSetId = guid();\n\n    const {determinedGoals, goalsToSave} = await determineGoals(\n        {projectLoader, goalSetters, implementationMapping}, {\n            credentials, id, context, push, addressChannels, goalSetId,\n        });\n\n    await Promise.all(goalsToSave.map(g => storeGoal(context, g)));\n\n    // Let GoalSetListeners know even if we determined no goals.\n    // This is not an error\n    const gsi: GoalsSetListenerInvocation = {\n        id,\n        context,\n        credentials,\n        addressChannels: addressChannelsFor(push.repo, context),\n        goalSetId,\n        goalSet: determinedGoals,\n    };\n    await Promise.all(goalsListeners.map(l => l(gsi)));\n    return determinedGoals;\n}\n\nexport async function determineGoals(rules: {\n                                         projectLoader: ProjectLoader,\n                                         goalSetters: GoalSetter[],\n                                         implementationMapping: SdmGoalImplementationMapper,\n                                     },\n                                     circumstances: {\n                                         credentials: ProjectOperationCredentials,\n                                         id: RemoteRepoRef,\n                                         context: HandlerContext,\n                                         push: PushFields.Fragment,\n                                         addressChannels: AddressChannels,\n                                         goalSetId: string,\n                                     }): Promise<{\n    determinedGoals: Goals | undefined,\n    goalsToSave: SdmGoal[],\n}> {\n    const {projectLoader, goalSetters, implementationMapping} = rules;\n    const {credentials, id, context, push, addressChannels, goalSetId } = circumstances;\n    return projectLoader.doWithProject({credentials, id, context, readOnly: true}, async project => {\n        const pli: PushListenerInvocation = {\n            project,\n            credentials,\n            id,\n            push,\n            context,\n            addressChannels,\n        };\n        const determinedGoals = await chooseGoalsForPushOnProject({goalSetters}, pli);\n        if (!determinedGoals) {\n            return {determinedGoals: undefined, goalsToSave: []};\n        }\n        const goalsToSave = await sdmGoalsFromGoals(implementationMapping, pli, determinedGoals, goalSetId);\n        return {determinedGoals, goalsToSave};\n    });\n\n}\n\nasync function sdmGoalsFromGoals(implementationMapping: SdmGoalImplementationMapper,\n                                 pli: PushListenerInvocation,\n                                 determinedGoals: Goals,\n                                 goalSetId: string) {\n    return Promise.all(determinedGoals.goals.map(async g =>\n        constructSdmGoal(pli.context, {\n            goalSet: determinedGoals.name,\n            goalSetId,\n            goal: g,\n            state: hasPreconditions(g) ? \"planned\" : \"requested\",\n            id: pli.id,\n            providerId: providerIdFromPush(pli.push),\n            fulfillment: await fulfillment({implementationMapping}, g, pli),\n        })));\n}\n\nasync function fulfillment(rules: {\n    implementationMapping: SdmGoalImplementationMapper,\n},                         g: Goal, inv: PushListenerInvocation): Promise<SdmGoalFulfillment> {\n    const {implementationMapping} = rules;\n    const plan = await implementationMapping.findFulfillmentByPush(g, inv);\n    if (isGoalImplementation(plan)) {\n        return constructSdmGoalImplementation(plan);\n    }\n    if (isSideEffect(plan)) {\n        return {method: \"side-effect\", name: plan.sideEffectName};\n    }\n\n    logger.warn(\"FYI, no implementation found for '%s'\", g.name);\n    return {method: \"other\", name: \"unspecified-yo\"};\n}\n\nexport const executeImmaterial: ExecuteGoalWithLog = async () => {\n    logger.debug(\"Immaterial: Nothing to execute\");\n    return Success;\n};\n\nasync function chooseGoalsForPushOnProject(rules: { goalSetters: GoalSetter[] },\n                                           pi: PushListenerInvocation): Promise<Goals> {\n    const {goalSetters} = rules;\n    const {push, id, addressChannels} = pi;\n\n    try {\n        const pushRules = new PushRules(\"Goal setter\", goalSetters);\n        const determinedGoals: Goals = await pushRules.mapping(pi);\n        if (!determinedGoals) {\n            logger.info(\"No goals set by push to %s:%s on %s\", id.owner, id.repo, push.branch);\n        } else {\n            logger.info(\"Goals for push on %j are %s\", id, determinedGoals.name);\n        }\n        return determinedGoals;\n    } catch (err) {\n        logger.error(\"Error determining goals: %s\", err);\n        await addressChannels(`Serious error trying to determine goals. Please check SDM logs: ${err}`);\n        throw err;\n    }\n}\n\n@Parameters()\nexport class ApplyGoalsParameters {\n    @Secret(Secrets.UserToken)\n    public githubToken: string;\n\n    @MappedParameter(MappedParameters.GitHubOwner)\n    public owner: string;\n\n    @MappedParameter(MappedParameters.GitHubRepository)\n    public repo: string;\n\n    @MappedParameter(MappedParameters.GitHubRepositoryProvider)\n    public providerId: string;\n\n    @Parameter({required: false})\n    public sha?: string;\n}\n"]}