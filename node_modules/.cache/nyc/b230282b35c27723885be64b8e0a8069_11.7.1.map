{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/deployPushTests.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/deployPushTests.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH,kFAE0D;AAC1D,6CAGwB;AAExB,uFAAuF;AACvF,MAAM,qBAAqB,GAAG;;;;;;;;;EAS5B,CAAC;AAEH;;;GAGG;AACU,QAAA,eAAe,GAAa,mBAAQ,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;AAExF,yBAAsC,UAAoD;;QACtF,MAAM,EAAC,OAAO,EAAE,EAAE,EAAC,GAAG,UAAU,CAAC;QACjC,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAAW;YACzD,KAAK,EAAE,qBAAqB;YAC5B,SAAS,EAAE;gBACP,KAAK,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;gBACjB,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;aAClB;YACD,OAAO,EAAE,iCAAmB;SAC/B,CAAC,CAAC;QACH,OAAO,UAAU;eACV,UAAU,CAAC,mBAAmB;eAC9B,UAAU,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC;eAC3C,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC;IACnE,CAAC;CAAA;AAdD,0CAcC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext } from \"@atomist/automation-client\";\nimport { RepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport {\n    QueryNoCacheOptions,\n} from \"@atomist/automation-client/spi/graph/GraphClient\";\nimport {\n    pushTest,\n    PushTest,\n} from \"../../PushTest\";\n\n// TODO once the ingester is defined elsewhere move this into a file and generate types\nconst DeployEnablementQuery = `\nquery DeployEnablementForRepo($owner: [String], $repo: [String]) {\n  SdmDeployEnablement(state: [\"requested\"], owner: $owner, repo: $repo) {\n    id\n    state\n    owner\n    repo\n    providerId\n  }\n}`;\n\n/**\n * Is repo enabled for deployment\n * @param {PushListenerInvocation} pi\n */\nexport const IsDeployEnabled: PushTest = pushTest(\"Is Deploy Enabled\", isDeployEnabled);\n\nexport async function isDeployEnabled(parameters: { context: HandlerContext, id: RepoRef }) {\n    const {context, id} = parameters;\n    const enablement = await context.graphClient.query<any, any>({\n        query: DeployEnablementQuery,\n        variables: {\n            owner: [id.owner],\n            repo: [id.repo],\n        },\n        options: QueryNoCacheOptions,\n    });\n    return enablement\n        && enablement.SdmDeployEnablement\n        && enablement.SdmDeployEnablement.length === 1\n        && enablement.SdmDeployEnablement[0].state === \"requested\";\n}\n"]}