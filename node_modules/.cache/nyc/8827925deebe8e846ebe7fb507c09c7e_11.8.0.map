{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnTag.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnTag.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AAExE,2EAA2E;AAE3E,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,KAAK,GAAlB;IAEI,YAA6B,SAAwB,EACxB,kBAAuC;QADvC,cAAS,GAAT,SAAS,CAAe;QACxB,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE3D,MAAM,CAAC,KAA4C,EAC5C,OAAuB,EACvB,MAAY;;YAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7B,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjF,MAAM,eAAe,GAAG,oCAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1D,MAAM,UAAU,GAA0B;gBACtC,eAAe;gBACf,EAAE;gBACF,OAAO;gBACP,GAAG;gBACH,WAAW;aACd,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5D,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAvBY,KAAK;IADjB,gCAAY,CAAC,QAAQ,EAAE,sBAAY,CAAC,OAAO,CAAC,CAAC;;GACjC,KAAK,CAuBjB;AAvBY,sBAAK","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { TagListener, TagListenerInvocation } from \"../../../common/listener/TagListener\";\nimport { addressChannelsFor } from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A new tag has been created\n */\n@EventHandler(\"On tag\", subscription(\"OnTag\"))\nexport class OnTag implements HandleEvent<schema.OnTag.Subscription> {\n\n    constructor(private readonly listeners: TagListener[],\n                private readonly credentialsFactory: CredentialsResolver) {}\n\n    public async handle(event: EventFired<schema.OnTag.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const tag = event.data.Tag[0];\n        const repo = tag.commit.repo;\n        const id = toRemoteRepoRef(repo);\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n        const addressChannels = addressChannelsFor(repo, context);\n        const invocation: TagListenerInvocation = {\n            addressChannels,\n            id,\n            context,\n            tag,\n            credentials,\n        };\n        await Promise.all(params.listeners.map(l => l(invocation)));\n        return Success;\n    }\n}\n"]}