{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/resetGoals.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/resetGoals.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand, HandlerContext, MappedParameter, MappedParameters, Parameter, Secret, Secrets, Success } from \"@atomist/automation-client\";\nimport { Parameters } from \"@atomist/automation-client/decorators\";\nimport { commandHandlerFrom } from \"@atomist/automation-client/onCommand\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as stringify from \"json-stringify-safe\";\nimport { SdmGoalImplementationMapper } from \"../../../../common/delivery/goals/SdmGoalImplementationMapper\";\nimport { GoalSetter } from \"../../../../common/listener/GoalSetter\";\nimport { GoalsSetListener } from \"../../../../common/listener/GoalsSetListener\";\nimport { ProjectLoader } from \"../../../../common/repo/ProjectLoader\";\nimport { PushFields, PushForCommit, RepoBranchTips } from \"../../../../typings/types\";\nimport { chooseAndSetGoals } from \"./SetGoalsOnPush\";\n\n@Parameters()\nexport class ResetGoalsParameters {\n\n    @Secret(Secrets.UserToken)\n    public githubToken: string;\n\n    @MappedParameter(MappedParameters.GitHubOwner)\n    public owner: string;\n\n    @MappedParameter(MappedParameters.GitHubRepository)\n    public repo: string;\n\n    @MappedParameter(MappedParameters.GitHubRepositoryProvider)\n    public providerId: string;\n\n    @Parameter({required: false})\n    public sha: string;\n\n    @Parameter({required: false})\n    public branch: string;\n\n}\n\nexport function resetGoalsCommand(rules: {\n    projectLoader: ProjectLoader,\n    goalsListeners: GoalsSetListener[],\n    goalSetters: GoalSetter[],\n    implementationMapping: SdmGoalImplementationMapper,\n}): HandleCommand {\n    return commandHandlerFrom(resetGoalsOnCommit(rules),\n        ResetGoalsParameters,\n        \"ResetGoalsOnCommit\",\n        \"Set goals\",\n        \"reset goals\");\n}\n\nfunction resetGoalsOnCommit(rules: {\n    projectLoader: ProjectLoader,\n    goalsListeners: GoalsSetListener[],\n    goalSetters: GoalSetter[],\n    implementationMapping: SdmGoalImplementationMapper,\n}) {\n    const {projectLoader, goalsListeners, goalSetters, implementationMapping} = rules;\n    return async (ctx: HandlerContext, commandParams: ResetGoalsParameters) => {\n        // figure out which commit\n        const repoData = await fetchDefaultBranchTip(ctx, commandParams);\n        const branch = commandParams.branch || repoData.defaultBranch;\n        const sha = commandParams.sha || tipOfBranch(repoData, branch);\n        const id = GitHubRepoRef.from({owner: commandParams.owner, repo: commandParams.repo, sha, branch});\n\n        const push = await fetchPushForCommit(ctx, id, commandParams.providerId);\n\n        const credentials = {token: commandParams.githubToken};\n\n        const goals = await chooseAndSetGoals({\n            projectLoader,\n            goalsListeners,\n            goalSetters,\n            implementationMapping,\n        }, {\n            context: ctx,\n            credentials,\n            push,\n        });\n\n        if (goals) {\n            await ctx.messageClient.respond(`Set goals on ${sha} to ${goals.name}`);\n        } else {\n            await ctx.messageClient.respond(`No goals found for ${sha}`);\n        }\n\n        return Success;\n    };\n}\n\nexport async function fetchPushForCommit(context: HandlerContext, id: RemoteRepoRef, providerId: string): Promise<PushFields.Fragment> {\n    const commitResult = await context.graphClient.query<PushForCommit.Query, PushForCommit.Variables>({\n        name: \"PushForCommit\", variables: {\n            owner: id.owner, repo: id.repo, providerId, branch: id.branch, sha: id.sha,\n        },\n    });\n\n    if (!commitResult || !commitResult.Commit || commitResult.Commit.length === 0) {\n        throw new Error(\"Could not find commit for \" + stringify(id));\n    }\n    const commit = commitResult.Commit[0];\n    if (!commit.pushes || commit.pushes.length === 0) {\n        throw new Error(\"Could not find push for \" + stringify(id));\n    }\n    return commit.pushes[0];\n}\n\nexport async function fetchDefaultBranchTip(ctx: HandlerContext, repositoryId: { repo: string, owner: string, providerId: string }) {\n    const result = await ctx.graphClient.query<RepoBranchTips.Query, RepoBranchTips.Variables>(\n        {name: \"RepoBranchTips\", variables: {name: repositoryId.repo, owner: repositoryId.owner}});\n    if (!result || !result.Repo || result.Repo.length === 0) {\n        throw new Error(`Repository not found: ${repositoryId.owner}/${repositoryId.repo}`);\n    }\n    const repo = result.Repo.find(r => r.org.provider.providerId === repositoryId.providerId);\n    if (!repo) {\n        throw new Error(`Repository not found: ${repositoryId.owner}/${repositoryId.repo} provider ${repositoryId.providerId}`);\n    }\n    return repo;\n}\n\nexport function tipOfBranch(repo: RepoBranchTips.Repo, branchName: string) {\n    const branchData = repo.branches.find(b => b.name === branchName);\n    if (!branchData) {\n        throw new Error(\"Branch not found: \" + branchName);\n    }\n    return branchData.commit.sha;\n}\n"]}