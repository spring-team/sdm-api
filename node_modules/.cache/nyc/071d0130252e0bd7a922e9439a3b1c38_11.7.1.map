{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/webhook/ImageLink.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/webhook/ImageLink.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAoD;AACpD,iCAA0B;AAC1B,8CAA+C;AA6B/C,MAAM,mBAAmB,GAAG;IACxB,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,CAAC;IACT,UAAU,EAAE,CAAC,GAAG,GAAG;IACnB,UAAU,EAAE,CAAC,GAAG,IAAI;IACpB,SAAS,EAAE,IAAI;CAClB,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,0BACI,KAAa,EACb,IAAY,EACZ,MAAc,EACd,MAAc,EACd,MAA0B,EAC1B,MAAc,EACd,YAAY,GAAG,mBAAmB;IAGlC,MAAM,OAAO,GAAiB;QAC1B,UAAU,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE;QAC7C,IAAI,EAAE,MAAM;QACZ,MAAM;QACN,MAAM;QACN,MAAM;QACN,QAAQ,EAAE,wBAAwB;KACrC,CAAC;IACF,OAAO,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;AAC/D,CAAC;AAnBD,4CAmBC;AAkBD;;;;;;;;;;;GAWG;AACH,8BACI,KAAa,EACb,IAAY,EACZ,MAAc,EACd,KAAa,EACb,MAAc,EACd,YAAY,GAAG,mBAAmB;IAGlC,MAAM,OAAO,GAAqB;QAC9B,GAAG,EAAE;YACD,KAAK;YACL,IAAI;YACJ,GAAG,EAAE,MAAM;SACd;QACD,MAAM,EAAE;YACJ,KAAK;SACR;QACD,IAAI,EAAE,YAAY;KACrB,CAAC;IACF,OAAO,WAAW,CAAC,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;AACpE,CAAC;AArBD,oDAqBC;AAED;;;;;;;;;GASG;AACH,qBACI,OAA2B,EAC3B,OAAY,EACZ,MAAc,EACd,YAAY,GAAG,mBAAmB;IAElC,0BAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;IAE5C,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,6BAA6B,CAAC;IACrF,MAAM,GAAG,GAAG,GAAG,OAAO,YAAY,OAAO,UAAU,MAAM,EAAE,CAAC;IAC5D,OAAO,YAAY,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;QACpD,0BAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;QAC1E,OAAO,eAAK,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC;aAC1B,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC;aAChB,KAAK,CAAC,GAAG,CAAC,EAAE;YACT,0BAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAClE,KAAK,CAAC,GAAG,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;SACG,KAAK,CAAC,GAAG,CAAC,EAAE;QACT,0BAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACnE,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC,CAAC;AACX,CAAC;AAvBD,kCAuBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport axios from \"axios\";\nimport promiseRetry = require(\"promise-retry\");\n\nexport interface AtomistBuildRepository {\n    owner_name: string;\n    name: string;\n}\n\nexport type AtomistBuildType = \"cron\" | \"pull_request\" | \"push\" | \"tag\" | \"manual\";\n\nexport type AtomistBuildStatus = \"started\" | \"failed\" | \"error\" | \"passed\" | \"canceled\";\n\nexport interface AtomistBuild {\n    repository: AtomistBuildRepository;\n    number?: number;\n    name?: string;\n    compare_url?: string;\n    type: AtomistBuildType;\n    pull_request_number?: number;\n    build_url?: string;\n    status: AtomistBuildStatus;\n    id?: string;\n    commit: string;\n    tag?: string;\n    branch?: string;\n    provider?: string;\n}\n\nexport type AtomistWebhookType = \"application\" | \"build\" | \"link-image\";\n\nconst DefaultRetryOptions = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 500,\n    maxTimeout: 5 * 1000,\n    randomize: true,\n};\n\n/**\n * Post to the Atomist generic build webhook URL.  It creates the payload\n * then uses postWebhook.\n *\n * @param owner repository owner, i.e., user or organization\n * @param repo name of repository\n * @param branch commit branch\n * @param commit commit SHA\n * @param status \"start\", \"success\", or \"fail\"\n * @param teamId Atomist team ID\n * @param retryOptions change default retry options\n * @return true if successful, false on failure after retries\n */\nexport function postBuildWebhook(\n    owner: string,\n    repo: string,\n    branch: string,\n    commit: string,\n    status: AtomistBuildStatus,\n    teamId: string,\n    retryOptions = DefaultRetryOptions,\n): Promise<boolean> {\n\n    const payload: AtomistBuild = {\n        repository: { owner_name: owner, name: repo },\n        type: \"push\",\n        status,\n        commit,\n        branch,\n        provider: \"GoogleContainerBuilder\",\n    };\n    return postWebhook(\"build\", payload, teamId, retryOptions);\n}\n\nexport interface AtomistLinkImageGit {\n    owner: string;\n    repo: string;\n    sha: string;\n}\n\nexport interface AtomistLinkImageDocker {\n    image: string;\n}\n\nexport interface AtomistLinkImage {\n    git: AtomistLinkImageGit;\n    docker: AtomistLinkImageDocker;\n    type: \"link-image\";\n}\n\n/**\n * Post to the Atomist link-image webhook URL.  It creates the payload\n * then uses postWebhook.\n *\n * @param owner repository owner, i.e., user or organization\n * @param repo name of repository\n * @param commit commit SHA\n * @param image Docker image tag, e.g., registry.com/owner/repo:version\n * @param teamId Atomist team ID\n * @param retryOptions change default retry options\n * @return true if successful, false on failure after retries\n */\nexport function postLinkImageWebhook(\n    owner: string,\n    repo: string,\n    commit: string,\n    image: string,\n    teamId: string,\n    retryOptions = DefaultRetryOptions,\n): Promise<boolean> {\n\n    const payload: AtomistLinkImage = {\n        git: {\n            owner,\n            repo,\n            sha: commit,\n        },\n        docker: {\n            image,\n        },\n        type: \"link-image\",\n    };\n    return postWebhook(\"link-image\", payload, teamId, retryOptions);\n}\n\n/**\n * Post payload to the Atomist webhook URL.  It will retry\n * several times.\n *\n * @param webhook type of webhook\n * @param payload object to post\n * @param teamId Atomist team ID\n * @param retryOptions change default retry options\n * @return true if successful, false on failure after retries\n */\nexport function postWebhook(\n    webhook: AtomistWebhookType,\n    payload: any,\n    teamId: string,\n    retryOptions = DefaultRetryOptions,\n): Promise<boolean> {\n    logger.info(\"Posting webhook: %j\", payload);\n\n    const baseUrl = process.env.ATOMIST_WEBHOOK_BASEURL || \"https://webhook.atomist.com\";\n    const url = `${baseUrl}/atomist/${webhook}/teams/${teamId}`;\n    return promiseRetry(retryOptions, (retry, retryCount) => {\n        logger.debug(\"posting '%j' to '%s' attempt %d\", payload, url, retryCount);\n        return axios.post(url, payload)\n            .then(() => true)\n            .catch(err => {\n                logger.debug(\"error posting '%j' to '%s': %j\", payload, url, err);\n                retry(err);\n            });\n    })\n        .catch(err => {\n            logger.error(\"failed to post '%j' to '%s': %j\", payload, url, err);\n            return false;\n        });\n}\n"]}