{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/executeReview.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/review/executeReview.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as _ from \"lodash\";\n\nimport { failure, logger } from \"@atomist/automation-client\";\nimport { ProjectReview } from \"@atomist/automation-client/operations/review/ReviewResult\";\nimport { PushImpactListenerInvocation } from \"../../../listener/PushImpactListener\";\nimport { ReviewListener } from \"../../../listener/ReviewListener\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { AddressChannels } from \"../../../slack/addressChannels\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../../goals/support/reportGoalError\";\nimport { createPushImpactListenerInvocation } from \"../createPushImpactListenerInvocation\";\nimport { PushReactionResponse, relevantCodeActions } from \"../PushReactionRegistration\";\nimport { formatReviewerError, ReviewerError } from \"./ReviewerError\";\nimport { ReviewerRegistration } from \"./ReviewerRegistration\";\n\n/**\n * Execute reviews and route or react to results using review listeners\n * @param {ProjectLoader} projectLoader\n * @param {ReviewerRegistration[]} reviewerRegistrations\n * @param {ReviewListener[]} reviewListeners\n * @return {ExecuteGoalWithLog}\n */\nexport function executeReview(projectLoader: ProjectLoader,\n                              reviewerRegistrations: ReviewerRegistration[],\n                              reviewListeners: ReviewListener[]): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext) => {\n        const {credentials, id, addressChannels} = rwlc;\n        try {\n            if (reviewerRegistrations.length > 0) {\n                logger.info(\"Planning review of %j with %d reviewers\", id, reviewerRegistrations.length);\n                return projectLoader.doWithProject({credentials, id, readOnly: true}, async project => {\n                    const cri: PushImpactListenerInvocation = await createPushImpactListenerInvocation(rwlc, project);\n                    const relevantReviewers = await relevantCodeActions(reviewerRegistrations, cri);\n                    logger.info(\"Executing review of %j with %d relevant reviewers: [%s] of [%s]\",\n                        id, relevantReviewers.length,\n                        relevantReviewers.map(a => a.name).join(),\n                        reviewerRegistrations.map(a => a.name).join());\n\n                    const reviewsAndErrors: Array<{ review?: ProjectReview, error?: ReviewerError }> =\n                        await Promise.all(relevantReviewers\n                            .map(reviewer => {\n                                return reviewer.action(cri)\n                                    .then(rvw => ({review: rvw}),\n                                        error => ({error}));\n                            }));\n                    const reviews = reviewsAndErrors.filter(r => !!r.review)\n                        .map(r => r.review);\n                    const reviewerErrors = reviewsAndErrors.filter(e => !!e.error)\n                        .map(e => e.error);\n\n                    const review = consolidate(reviews);\n                    logger.info(\"Consolidated review of %j has %s comments\", id, review.comments.length);\n\n                    const rli = {\n                        ...cri,\n                        review,\n                    };\n                    sendErrorsToSlack(reviewerErrors, addressChannels);\n                    const reviewResponses = await Promise.all(reviewListeners.map(l => l(rli)));\n                    const result = {\n                        code: reviewResponses.some(rr => !!rr && rr === PushReactionResponse.failGoals) ? 1 : 0,\n                        requireApproval: reviewResponses.some(rr => !!rr && rr === PushReactionResponse.requireApprovalToProceed),\n                    };\n                    logger.info(\"Review responses are %j, result=%j\", reviewResponses, result);\n                    return result;\n                });\n            } else {\n                // No reviewers\n                return {code: 0, requireApproval: false};\n            }\n        } catch (err) {\n            logger.error(\"Error executing review of %j with %d reviewers: $s\",\n                id, reviewerRegistrations.length, err.message);\n            return failure(err);\n        }\n    };\n}\n\nfunction consolidate(reviews: ProjectReview[]): ProjectReview {\n    return {\n        repoId: reviews[0].repoId,\n        comments: _.flatten(reviews.map(review => review.comments)),\n    };\n}\n\nfunction sendErrorsToSlack(errors: ReviewerError[], addressChannels: AddressChannels) {\n    errors.forEach(async e => {\n        await addressChannels(formatReviewerError(e));\n    });\n}\n"]}