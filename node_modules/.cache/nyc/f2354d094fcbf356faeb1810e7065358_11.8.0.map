{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/test/fakeRunWithLogContext.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/test/fakeRunWithLogContext.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD,4EAAyE;AACzE,+CAAwE;AACxE,+CAA4C;AAE5C;;;;GAIG;AACH,+BAAsC,EAAiB;IACnD,OAAO;QACH,WAAW,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC;QAC9B,OAAO,EAAE,yBAAW,CAAC,OAAO,CAAC;QAC7B,EAAE;QACF,eAAe,EAAE,CAAM,CAAC,EAAC,EAAE;YACvB,0BAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QACnC,CAAC,CAAA;QACD,MAAM,EAAE,UAAU,CAAC,EAAE,CAAC;QACtB,WAAW,EAAE,IAAI,uCAAkB,CAAC,MAAM,CAAC;KAC9C,CAAC;AACN,CAAC;AAXD,sDAWC;AAED,oBAA2B,EAAU;IACjC,OAAO;QACH,OAAO,EAAE,MAAM;QACf,KAAK,EAAE,mBAAW,CAAC,OAAO;QAC1B,MAAM,EAAE;YACJ,IAAI,EAAE;gBACF,GAAG,EAAE;oBACD,KAAK,EAAE,EAAE,CAAC,KAAK;iBAClB;gBACD,IAAI,EAAE,EAAE,CAAC,IAAI;gBACb,QAAQ,EAAE,CAAE;wBACR,IAAI,EAAE,KAAK;wBACX,EAAE,EAAE,GAAG;wBACP,IAAI,EAAE;4BACF,EAAE,EAAE,MAAM;yBACb;qBACJ;iBACA;aACJ;YACD,MAAM,EAAE;gBACJ;oBACI,EAAE,EAAE,KAAK;oBACT,MAAM,EAAE,KAAK;iBAChB;aACJ;SACJ;KACJ,CAAC;AACN,CAAC;AA3BD,gCA2BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { RemoteRepoRef, RepoId } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { RunWithLogContext } from \"../../common/delivery/goals/support/reportGoalError\";\nimport { LoggingProgressLog } from \"../../common/log/LoggingProgressLog\";\nimport { StatusForExecuteGoal, StatusState } from \"../../typings/types\";\nimport { fakeContext } from \"./fakeContext\";\n\n/**\n * Useful testing support\n * @param {RemoteRepoRef} id\n * @return {RunWithLogContext}\n */\nexport function fakeRunWithLogContext(id: RemoteRepoRef): RunWithLogContext {\n    return {\n        credentials: {token: \"foobar\"},\n        context: fakeContext(\"T1111\"),\n        id,\n        addressChannels: async m => {\n            logger.info(\"channels > \" + m);\n        },\n        status: fakeStatus(id),\n        progressLog: new LoggingProgressLog(\"fake\"),\n    };\n}\n\nexport function fakeStatus(id: RepoId): StatusForExecuteGoal.Fragment {\n    return {\n        context: \"fake\",\n        state: StatusState.pending,\n        commit: {\n            repo: {\n                org: {\n                    owner: id.owner,\n                },\n                name: id.repo,\n                channels: [ {\n                    name: \"foo\",\n                    id: \"1\",\n                    team: {\n                        id: \"T357\",\n                    },\n                },\n                ],\n            },\n            pushes: [\n                {\n                    id: \"121\",\n                    branch: \"foo\",\n                },\n            ],\n        },\n    };\n}\n"]}