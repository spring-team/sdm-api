{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/reportGoalError.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/reportGoalError.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAMpD,oIAAiI;AAiBjI;;;GAGG;AACH,yBAAsC,UAOH,EACG,GAAU;;QAC5C,MAAM,EAAC,IAAI,EAAE,kBAAkB,EAAE,eAAe,EAAE,WAAW,EAAE,EAAE,EAAE,cAAc,EAAC,GAAG,UAAU,CAAC;QAChG,0BAAM,CAAC,KAAK,CAAC,sEAAsE,EAC/E,IAAI,CAAC,IAAI,EAAE,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QAChD,0BAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;QAElD,MAAM,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACvD,mFAAmF;QACnF,IAAI,cAAc,EAAE;YAChB,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;gBACnC,MAAM,yFAA2C,CAAC,kBAAkB,EAAE,cAAc,EAChF,EAAC,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAC,EAC5C,EAAE,EAAE,eAAe,CAAC,CAAC;aAC5B;SACJ;aAAM;YACH,yDAAyD;YACzD,MAAM,eAAe,CAAC,0BAA0B,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;SACnE;IACL,CAAC;CAAA;AA3BD,0CA2BC;AAED,+BAAsC,GAAG,mBAAyC;IAC9E,OAAO,CAAO,CAAoB,EAAE,EAAE;QAClC,IAAI,aAAa,GAAsB;YACnC,IAAI,EAAE,CAAC;SACV,CAAC;QAEF,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;YAClD,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,aAAa,GAAG;oBACZ,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,eAAe,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe;oBAChG,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO;iBAClG,CAAC;aACL;SACJ;QACD,OAAO,aAAa,CAAC;IACzB,CAAC,CAAA,CAAC;AACN,CAAC;AApBD,sDAoBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { InterpretLog } from \"../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { StatusForExecuteGoal } from \"../../../../typings/types\";\nimport { reportFailureInterpretationToLinkedChannels } from \"../../../../util/slack/reportFailureInterpretationToLinkedChannels\";\nimport { RepoContext } from \"../../../context/SdmContext\";\nimport { AddressChannels } from \"../../../slack/addressChannels\";\nimport { ExecuteGoalResult } from \"../ExecuteGoalResult\";\nimport { Goal } from \"../Goal\";\n\nexport type ExecuteGoalWithLog = (r: RunWithLogContext) => Promise<ExecuteGoalResult>;\n\nexport type PrepareForGoalExecution = (p: GitProject, r: RunWithLogContext) => Promise<ExecuteGoalResult>;\n\nexport interface RunWithLogContext extends RepoContext {\n\n    status: StatusForExecuteGoal.Fragment;\n    progressLog: ProgressLog;\n\n}\n\n/**\n * Report an error executing a goal and present a retry button\n * @return {Promise<void>}\n */\nexport async function reportGoalError(parameters: {\n                                      goal: Goal,\n                                      implementationName: string,\n                                      addressChannels: AddressChannels,\n                                      progressLog: ProgressLog,\n                                      id: RemoteRepoRef,\n                                      logInterpreter: InterpretLog,\n                                  },\n                                      err: Error) {\n    const {goal, implementationName, addressChannels, progressLog, id, logInterpreter} = parameters;\n    logger.error(\"RunWithLog on goal %s with implementation name '%s' caught error: %s\",\n        goal.name, implementationName, err.message);\n    logger.error(err.stack);\n    progressLog.write(\"ERROR: \" + err.message + \"\\n\");\n\n    const interpretation = logInterpreter(progressLog.log);\n    // The executor might have information about the failure; report it in the channels\n    if (interpretation) {\n        if (!interpretation.doNotReportToUser) {\n            await reportFailureInterpretationToLinkedChannels(implementationName, interpretation,\n                {url: progressLog.url, log: progressLog.log},\n                id, addressChannels);\n        }\n    } else {\n        // We don't have an interpretation available. Just report\n        await addressChannels(\"Failure executing goal: \" + err.message);\n    }\n}\n\nexport function CompositeGoalExecutor(...goalImplementations: ExecuteGoalWithLog[]): ExecuteGoalWithLog {\n    return async (r: RunWithLogContext) => {\n        let overallResult: ExecuteGoalResult = {\n            code: 0,\n        };\n\n        for (const goalImplementation of goalImplementations) {\n            const result = await goalImplementation(r);\n            if (result.code !== 0) {\n                return result;\n            } else {\n                overallResult = {\n                    code: result.code,\n                    requireApproval: result.requireApproval ? result.requireApproval : overallResult.requireApproval,\n                    message: result.message ? `${overallResult.message}\\n${result.message}` : overallResult.message,\n                };\n            }\n        }\n        return overallResult;\n    };\n}\n"]}