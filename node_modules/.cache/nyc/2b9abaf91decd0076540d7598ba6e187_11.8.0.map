{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/projectVersioner.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/projectVersioner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAGoC;AAEpC,wFAAoF;AACpF,4BAA4B;AAC5B,iFAGkD;AAgBlD;;;GAGG;AACH,0BAAiC,aAA4B,EAC5B,gBAAkC;IAC/D,OAAO,CAAO,IAAuB,EAA8B,EAAE;QACjE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAE/D,OAAO,aAAa,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAM,CAAC,EAAC,EAAE;YACxF,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;YAC/D,MAAM,UAAU,GAAe;gBAC3B,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG;gBACtB,MAAM,EAAE,EAAE,CAAC,MAAM;gBACjB,OAAO;gBACP,IAAI,EAAE;oBACF,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK;oBAC/B,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;oBAC7B,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU;iBACzD;aACJ,CAAC;YACF,MAAM,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,4BAAY,CAAC,uCAAkB,CAAC,CAAC,CAAC;YAC/E,OAAO,2BAAO,CAAC;QACnB,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAA,CAAC;AACN,CAAC;AArBD,4CAqBC;AAED,wBAAqC,KAAa,EACb,IAAY,EACZ,UAAkB,EAClB,GAAW,EACX,MAAc,EACd,OAAuB;;QACxD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAA2D;YAClG,IAAI,EAAE,qBAAqB;YAC3B,SAAS,EAAE;gBACP,IAAI,EAAE,CAAC,IAAI,CAAC;gBACZ,KAAK,EAAE,CAAC,KAAK,CAAC;gBACd,UAAU,EAAE,CAAC,UAAU,CAAC;gBACxB,GAAG,EAAE,CAAC,GAAG,CAAC;gBACV,MAAM,EAAE,CAAC,MAAM,CAAC;aACnB;SACJ,CAAC,CAAC;QACP,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;IACnD,CAAC;CAAA;AAjBD,wCAiBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    HandlerContext,\n    Success,\n} from \"@atomist/automation-client\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { addressEvent } from \"@atomist/automation-client/spi/message/MessageClient\";\nimport * as _ from \"lodash\";\nimport {\n    SdmVersion,\n    SdmVersionRootType,\n} from \"../../../../ingesters/sdmVersionIngester\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport {\n    SdmVersionForCommit,\n    StatusForExecuteGoal,\n} from \"../../../../typings/types\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../../goals/ExecuteGoalResult\";\nimport {\n    ExecuteGoalWithLog,\n    RunWithLogContext,\n} from \"../../goals/support/reportGoalError\";\n\nexport type ProjectVersioner =\n    (status: StatusForExecuteGoal.Fragment, p: GitProject, log: ProgressLog) => Promise<string>;\n\n/**\n * Version the project with a build specific version number\n * @param projectLoader used to load projects\n */\nexport function executeVersioner(projectLoader: ProjectLoader,\n                                 projectVersioner: ProjectVersioner): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const { status, credentials, id, context, progressLog } = rwlc;\n\n        return projectLoader.doWithProject({ credentials, id, context, readOnly: false }, async p => {\n            const version = await projectVersioner(status, p, progressLog);\n            const sdmVersion: SdmVersion = {\n                sha: status.commit.sha,\n                branch: id.branch,\n                version,\n                repo: {\n                    owner: status.commit.repo.owner,\n                    name: status.commit.repo.name,\n                    providerId: status.commit.repo.org.provider.providerId,\n                },\n            };\n            await context.messageClient.send(sdmVersion, addressEvent(SdmVersionRootType));\n            return Success;\n        });\n    };\n}\n\nexport async function readSdmVersion(owner: string,\n                                     name: string,\n                                     providerId: string,\n                                     sha: string,\n                                     branch: string,\n                                     context: HandlerContext): Promise<string> {\n    const version = await context.graphClient.query<SdmVersionForCommit.Query, SdmVersionForCommit.Variables>({\n            name: \"SdmVersionForCommit\",\n            variables: {\n                name: [name],\n                owner: [owner],\n                providerId: [providerId],\n                sha: [sha],\n                branch: [branch],\n            },\n        });\n    return _.get(version, \"SdmVersion[0].version\");\n}\n"]}