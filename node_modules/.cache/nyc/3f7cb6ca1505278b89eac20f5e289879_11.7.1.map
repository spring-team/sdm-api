{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/executeUndeploy.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/executeUndeploy.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAA6D;AAC7D,wFAAwF;AAExF,iDAAiD;AACjD,kFAAsH;AACtH,wEAA6E;AAI7E,yBAAgC,MAAc;IAC1C,OAAO,CAAO,IAAuB,EAAE,EAAE;QACrC,MAAM,EAAC,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAC,GAAG,IAAI,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC3C,WAAW,CAAC,KAAK,CAAC,gBAAgB,MAAM,CAAC,MAAM,CAAC,MAAM,2CAA2C,UAAU,EAAE,CAAC,CAAC;QAE/G,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;QACvF,IAAI,CAAC,WAAW,EAAE;YACd,WAAW,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,OAAO,2BAAO,CAAC;SAClB;QAED,0BAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/E,WAAW,CAAC,OAAO,CAAC,CAAM,CAAC,EAAC,EAAE;YAC1B,OAAA,MAAM,CAAC,QAAQ,CAAC,QAAQ,CACpB,UAAU,EACV,CAAC,EACD,WAAW,CACd,CAAA;UAAA,CAAC,CAAC;QACP,OAAO,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC;IACrB,CAAC,CAAA,CAAC;AACN,CAAC;AAxBD,0CAwBC;AAED;IACI,OAAO,CAAO,IAAuB,EAAE,EAAE;QACrC,MAAM,EAAC,eAAe,EAAE,EAAE,EAAC,GAAG,IAAI,CAAC;QAEnC,MAAM,MAAM,GAAG,IAAI,6CAA0B,EAAE,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;QACxB,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;QACtB,MAAM,CAAC,UAAU,GAAG,uCAAsB,CAAC,CAAC,kCAAkC;QAC9E,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;QAE1B,MAAM,gBAAgB,GAAG,gCAAgB,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAC,EAC5E,8CAA2B,EAC3B,MAAa,CAAC,CAAC;QAEnB,MAAM,UAAU,GAAe;YAC3B,QAAQ,EAAE,0BAA0B;YACpC,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,2CAA2C;YACjD,OAAO,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC;QAEF,MAAM,OAAO,GAAiB;YAC1B,WAAW,EAAE,CAAC,UAAU,CAAC;SAC5B,CAAC;QACF,MAAM,eAAe,CAAC,OAAO,CAAC,CAAC;QAE/B,OAAO,2BAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC;AA5BD,0DA4BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, Success } from \"@atomist/automation-client\";\nimport { buttonForCommand } from \"@atomist/automation-client/spi/message/MessageClient\";\nimport { Attachment, SlackMessage } from \"@atomist/slack-messages\";\nimport * as stringify from \"json-stringify-safe\";\nimport { DeleteRepositoryCommandName, DeleteRepositoryParameters } from \"../../../handlers/commands/deleteRepository\";\nimport { GitHubDotComProviderId } from \"../../../util/github/gitHubProvider\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../goals/support/reportGoalError\";\nimport { Target } from \"./deploy\";\n\nexport function executeUndeploy(target: Target): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext) => {\n        const {id, credentials, status, progressLog} = rwlc;\n        const commit = status.commit;\n        const pushBranch = commit.pushes[0].branch;\n        progressLog.write(`Commit is on ${commit.pushes.length} pushes. Choosing the first one, branch ${pushBranch}`);\n\n        const targetInfo = target.targeter(id, pushBranch);\n        const deployments = await target.deployer.findDeployments(id, targetInfo, credentials);\n        if (!deployments) {\n            progressLog.write(\"No deployments found\");\n            return Success;\n        }\n\n        logger.info(\"Detected deployments: %s\", deployments.map(stringify).join(\", \"));\n\n        deployments.forEach(async d =>\n            target.deployer.undeploy(\n                targetInfo,\n                d,\n                progressLog,\n            ));\n        return {code: 0};\n    };\n}\n\nexport function offerToDeleteRepository(): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext) => {\n        const {addressChannels, id} = rwlc;\n\n        const params = new DeleteRepositoryParameters();\n        params.owner = id.owner;\n        params.repo = id.repo;\n        params.providerId = GitHubDotComProviderId; // we should put this in the RWLC?\n        params.areYouSure = \"yes\";\n\n        const deleteRepoButton = buttonForCommand({text: \"Delete Repo\", style: \"danger\"},\n            DeleteRepositoryCommandName,\n            params as any);\n\n        const attachment: Attachment = {\n            fallback: \"delete repository button\",\n            color: \"#ff0234\",\n            text: \"Would you like to delete this repository?\",\n            actions: [deleteRepoButton],\n        };\n\n        const message: SlackMessage = {\n            attachments: [attachment],\n        };\n        await addressChannels(message);\n\n        return Success;\n    };\n}\n"]}