{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/nodeProjectVersioner.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/nodeProjectVersioner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,iCAAiC;AACjC,8DAAiE;AACjE,qDAAsD;AAGzC,QAAA,oBAAoB,GAAqB,CAAO,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;IAC3E,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IACjD,MAAM,MAAM,GAAG,+BAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpE,MAAM,YAAY,GAAG,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACrF,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,OAAO,IAAI,YAAY,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,gBAAgB,CAAC,EAAE,CAAC;IAEnF,MAAM,uBAAa,CAAC;QACZ,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,CAAC,sBAAsB,EAAE,SAAS,EAAE,OAAO,CAAC;KACrD,EACD;QACI,GAAG,EAAE,CAAC,CAAC,OAAO;KACjB,EACD,GAAG,EACH;QACI,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC;KAClC,CAAC,CAAC;IAEP,OAAO,OAAO,CAAC;AACnB,CAAC,CAAA,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as df from \"dateformat\";\nimport { spawnAndWatch } from \"../../../../../util/misc/spawned\";\nimport { branchFromCommit } from \"../../executeBuild\";\nimport { ProjectVersioner } from \"../projectVersioner\";\n\nexport const NodeProjectVersioner: ProjectVersioner = async (status, p, log) => {\n    const pjFile = await p.getFile(\"package.json\");\n    const pj = JSON.parse(await pjFile.getContent());\n    const branch = branchFromCommit(status.commit).split(\"/\").join(\".\");\n    const branchSuffix = branch !== status.commit.repo.defaultBranch ? `${branch}.` : \"\";\n    const version = `${pj.version}-${branchSuffix}${df(new Date(), \"yyyymmddHHMMss\")}`;\n\n    await spawnAndWatch({\n            command: \"npm\",\n            args: [\"--no-git-tag-version\", \"version\", version],\n        },\n        {\n            cwd: p.baseDir,\n        },\n        log,\n        {\n            errorFinder: code => code !== 0,\n        });\n\n    return version;\n};\n"]}