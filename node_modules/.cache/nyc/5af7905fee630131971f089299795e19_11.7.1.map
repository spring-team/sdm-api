{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/github/gitHubTagRouter.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/github/gitHubTagRouter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAoD;AACpD,8FAA4G;AAE5G,iFAA2E;AAC3E,iCAAkD;AAIlD,4BAA4B;AAE5B;;;;;;GAMG;AACU,QAAA,eAAe,GAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;IACvD,MAAM,GAAG,GAAG,+BAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACjI,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAChD,MAAM,GAAG,GAAG,GAAG,OAAO,UAAU,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,SAAS,CAAC;IAC/D,0BAAM,CAAC,KAAK,CAAC,eAAe,GAAG,qBAAqB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzE,OAAO,eAAK,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAC9C,+BAA+B;IAC/B;QACI,OAAO,oBACA,WAAW,CAAE,MAAM,CAAC,OAAO,CAAC,WAAgC,CAAC,KAAK,CAAC,CAAC,OAAO,IAC9E,MAAM,EAAE,2CAA2C,GACtD;KACJ,CACJ;SACI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,wBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,qBAAqB,KAAa;IAC9B,OAAO,KAAK,CAAC,CAAC,CAAC;QACX,OAAO,EAAE;YACL,aAAa,EAAE,SAAS,KAAK,EAAE;SAClC;KACJ;QACG,CAAC,CAAC,EAAE,CAAC;AACb,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef, isGitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\n\nimport { successOn } from \"@atomist/automation-client/action/ActionResult\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\nimport { TokenCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { TagRouter } from \"@atomist/automation-client/operations/tagger/Tagger\";\nimport * as _ from \"lodash\";\n\n/**\n * Persist tags to GitHub\n * @param {Tags} tags\n * @param {PARAMS} params\n * @return {Promise<ActionResult<Tags>>}\n * @constructor\n */\nexport const GitHubTagRouter: TagRouter = (tags, params) => {\n    const grr = isGitHubRepoRef(tags.repoId) ? tags.repoId : new GitHubRepoRef(tags.repoId.owner, tags.repoId.repo, tags.repoId.sha);\n    const apiBase = grr.apiBase.replace(/\\/*$/, \"\");\n    const url = `${apiBase}/repos/${grr.owner}/${grr.repo}/topics`;\n    logger.debug(`Request to '${url}' to raise tags: [${tags.tags.join()}]`);\n    return axios.put(url, { names: _.uniq(tags.tags) },\n        // Mix in custom media type for\n        {\n            headers: {\n                ...authHeaders((params.targets.credentials as TokenCredentials).token).headers,\n                Accept: \"application/vnd.github.mercy-preview+json\",\n            },\n        },\n    )\n        .then(x => successOn(tags));\n};\n\nfunction authHeaders(token: string): AxiosRequestConfig {\n    return token ? {\n        headers: {\n            Authorization: `token ${token}`,\n        },\n    }\n        : {};\n}\n"]}