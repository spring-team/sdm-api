{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/dsl/goalContributorsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/dsl/goalContributorsTest.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kFAA+E;AAC/E,gEAAuE;AACvE,iGAA8F;AAC9F,yDAA8C;AAE9C,uCAAuC;AACvC,0EAAkE;AAGlE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAE9B,EAAE,CAAC,qBAAqB,EAAE,GAAS,EAAE;QACjC,MAAM,EAAE,GAAG,mCAAgB,CAAC,2BAAiB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,mCAAgB,CAAC,CAAC,CAAC;QAClG,MAAM,CAAC,GAAG,2BAAQ,EAAE,CAAC;QACrB,MAAM,KAAK,GAAU,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACnC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAS,EAAE;QAC5C,MAAM,EAAE,GAAG,mCAAgB,CAAC,2BAAiB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,0BAAS,CAAC,CAAC,CAAC;QAC1F,MAAM,CAAC,GAAG,2BAAQ,EAAE,CAAC;QACrB,MAAM,KAAK,GAAU,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,0BAAS,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;QAC7C,MAAM,CAAC,GAAG,2BAAiB,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,mCAAgB,CAAC,CAAC;QAC7D,MAAM,EAAE,GAAG,mCAAgB,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,GAAG,2BAAQ,EAAE,CAAC;QACrB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,mCAAgB,CAAC,CAAC;QACnD,MAAM,KAAK,GAAU,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,mCAAgB,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { goalContributors } from \"../../../src/blueprint/dsl/goalContribution\";\nimport { whenPushSatisfies } from \"../../../src/blueprint/dsl/goalDsl\";\nimport { HttpServiceGoals } from \"../../../src/common/delivery/goals/common/httpServiceGoals\";\nimport { fakePush } from \"./decisionTreeTest\";\n\nimport * as assert from \"power-assert\";\nimport { BuildGoal } from \"../../../src/blueprint/wellKnownGoals\";\nimport { Goals } from \"../../../src/common/delivery/goals/Goals\";\n\ndescribe(\"goalContributors\", () => {\n\n    it(\"should set no goals\", async () => {\n        const gs = goalContributors(whenPushSatisfies(false).itMeans(\"thing\").setGoals(HttpServiceGoals));\n        const p = fakePush();\n        const goals: Goals = await gs.mapping(p);\n        assert.equal(goals, undefined);\n    });\n\n    it(\"should set goals from one goal\", async () => {\n        const gs = goalContributors(whenPushSatisfies(true).itMeans(\"thing\").setGoals(BuildGoal));\n        const p = fakePush();\n        const goals: Goals = await gs.mapping(p);\n        assert.deepEqual(goals.goals, [BuildGoal]);\n    });\n\n    it(\"should set goals from one goals\", async () => {\n        const r = whenPushSatisfies(true).setGoals(HttpServiceGoals);\n        const gs = goalContributors(r);\n        const p = fakePush();\n        assert.equal(await r.mapping(p), HttpServiceGoals);\n        const goals: Goals = await gs.mapping(p);\n        assert.deepEqual(goals.goals, HttpServiceGoals.goals);\n    });\n});\n"]}