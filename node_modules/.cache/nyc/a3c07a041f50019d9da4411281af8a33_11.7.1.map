{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/pushTestUtils.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/pushTestUtils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,6DAA0D;AAC1D,2CAA0C;AAE1C,6CAA+E;AAE/E,0CAA0C;AAE1C;;GAEG;AACU,QAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAI5B;;;;;GAKG;AACH,sBAA6B,GAAG,SAAuC;IACnE,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,4BAAiB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACxF,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,CAAC;AAC7C,CAAC;AAHD,oCAGC;AAED;;;;;GAKG;AACH,sBAA6B,GAAG,SAAuC;IACnE,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,4BAAiB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACxF,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,CAAC;AAC7C,CAAC;AAHD,oCAGC;AAED,MAAM,oBAAoB,GAAG,IAAI,mBAAQ,CAAU,IAAI,CAAC,CAAC;AAEzD;;;;GAIG;AACH,iBAAwB,EAAY;IAChC,OAAO;QACH,IAAI,EAAE,EAAE,CAAC,IAAI;QACb,OAAO,EAAE,CAAM,GAAG,EAAC,EAAE;YACjB,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,MAAM,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,MAAM,KAAK,SAAS,EAAE;gBACtB,MAAM,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC/B,0BAAM,CAAC,IAAI,CAAC,+BAA+B,MAAM,kBAAkB,EAAE,EAAE,CAAC,IAAI,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC;gBAC1G,oBAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aACzC;YACD,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA;KACJ,CAAC;AACN,CAAC;AAdD,0BAcC;AAED,oBAAoB,EAAY,EAAE,GAA2B;IACzD,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { LruCache } from \"../../../../util/misc/LruCache\";\nimport { isMapping } from \"../../Mapping\";\nimport { PushListenerInvocation } from \"../../PushListener\";\nimport { predicatePushTest, ProjectPredicate, PushTest } from \"../../PushTest\";\n\nimport * as pred from \"../predicateUtils\";\n\n/**\n * Return the opposite of this push test\n */\nexport const not = pred.not;\n\nexport type PushTestOrProjectPredicate = PushTest | ProjectPredicate;\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * AND: Return true if all are satisfied\n * @param {PushTest} pushTests\n * @return {PushTest}\n */\nexport function allSatisfied(...pushTests: PushTestOrProjectPredicate[]): PushTest {\n    const asPushTests = pushTests.map(p => isMapping(p) ? p : predicatePushTest(p.name, p));\n    return pred.allSatisfied(...asPushTests);\n}\n\n/**\n * Wrap all these PushTests or ProjectPredicates in a single PushTest\n * OR: Return true if any is satisfied\n * @param {PushTest} pushTests\n * @return {PushTest}\n */\nexport function anySatisfied(...pushTests: PushTestOrProjectPredicate[]): PushTest {\n    const asPushTests = pushTests.map(p => isMapping(p) ? p : predicatePushTest(p.name, p));\n    return pred.anySatisfied(...asPushTests);\n}\n\nconst pushTestResultMemory = new LruCache<boolean>(1000);\n\n/**\n * Cache the PushTest results for this push\n * @param {PushTest} pt\n * @return {PushTest}\n */\nexport function memoize(pt: PushTest): PushTest {\n    return {\n        name: pt.name,\n        mapping: async pti => {\n            const key = ptCacheKey(pt, pti);\n            let result = pushTestResultMemory.get(key);\n            if (result === undefined) {\n                result = await pt.mapping(pti);\n                logger.info(`Evaluated push test [%s] to ${result}: cache stats=%j`, pt.name, pushTestResultMemory.stats);\n                pushTestResultMemory.put(key, result);\n            }\n            return result;\n        },\n    };\n}\n\nfunction ptCacheKey(pt: PushTest, pti: PushListenerInvocation): string {\n    return pti.push.id + \"_\" + pt.name;\n}\n"]}