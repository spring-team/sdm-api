{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/SpawnBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/SpawnBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { SpawnOptions } from \"child_process\";\nimport { sprintf } from \"sprintf-js\";\nimport { ArtifactStore } from \"../../../../spi/artifact/ArtifactStore\";\nimport { AppInfo } from \"../../../../spi/deploy/Deployment\";\nimport { InterpretLog, LogInterpretation } from \"../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport {\n    asSpawnCommand,\n    ChildProcessResult,\n    ErrorFinder,\n    spawnAndWatch,\n    SpawnCommand,\n    stringifySpawnCommand,\n} from \"../../../../util/misc/spawned\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { LocalBuilder, LocalBuildInProgress } from \"./LocalBuilder\";\n\nexport interface SpawnBuilderOptions {\n\n    name: string;\n\n    /**\n     * Commands we'll execute via Node spawn.\n     * Command execution will terminate on the first error.\n     */\n    commands?: SpawnCommand[];\n\n    /**\n     * Alternative to commands. File containing a list of\n     * newline-separated commands. May contain blank lines\n     * or comments beginning with #.\n     */\n    commandFile?: string;\n\n    /**\n     * Error finder: Necessary only if a spawned process\n     * can return non-zero on success.\n     */\n    errorFinder?: ErrorFinder;\n\n    /**\n     * Interpreter of command output\n     */\n    logInterpreter: InterpretLog;\n\n    options?: SpawnOptions;\n\n    /**\n     * Find artifact info from the sources of this project,\n     * for example by parsing a package.json or Maven POM file.\n     * @param {Project} p\n     * @return {Promise<AppInfo>}\n     */\n    projectToAppInfo(p: Project): Promise<AppInfo>;\n\n    /**\n     * Find the deploymentUnit after a successful build\n     * @param {Project} p\n     * @param {AppInfo} appId\n     * @return {Promise<string>}\n     */\n    deploymentUnitFor?(p: GitProject, appId: AppInfo): Promise<string>;\n\n}\n\n/**\n * Build using spawn on the automation client node.\n * Note it is NOT intended for use for multiple organizations. It's OK\n * for one organization to use inside its firewall, but there is potential\n * vulnerability in builds of unrelated tenants getting at each others\n * artifacts.\n */\nexport class SpawnBuilder extends LocalBuilder implements LogInterpretation {\n\n    private readonly options: SpawnBuilderOptions;\n\n    constructor(params: {\n        artifactStore?: ArtifactStore,\n        projectLoader: ProjectLoader,\n        options: SpawnBuilderOptions,\n    }) {\n        super(params.options.name, params.artifactStore, params.projectLoader);\n        this.options = params.options;\n        if (!this.options.commands && !this.options.commandFile) {\n            throw new Error(\"Please supply either commands or a path to a file in the project containing them\");\n        }\n    }\n\n    public get logInterpreter(): InterpretLog {\n        return this.options.logInterpreter;\n    }\n\n    protected async startBuild(credentials: ProjectOperationCredentials,\n                               id: RemoteRepoRef,\n                               team: string,\n                               log: ProgressLog): Promise<LocalBuildInProgress> {\n        const errorFinder = this.options.errorFinder;\n        logger.info(\"%s.startBuild on %s, buildCommands=[%j] or file=[%s]\", this.name, id.url, this.options.commands,\n            this.options.commandFile);\n        return this.projectLoader.doWithProject({credentials, id, readOnly: true}, async p => {\n\n            const commands: SpawnCommand[] = this.options.commands || await loadCommandsFromFile(p, this.options.commandFile);\n\n            const appId: AppInfo = await this.options.projectToAppInfo(p);\n            const opts = {\n                cwd: p.baseDir,\n                ...(this.options.options || {}),\n            };\n\n            function executeOne(buildCommand: SpawnCommand): Promise<ChildProcessResult> {\n                return spawnAndWatch(buildCommand,\n                    {\n                        ...opts,\n                        ...buildCommand.options,\n                    },\n                    log,\n                    {\n                        errorFinder,\n                        stripAnsi: true,\n                    })\n                    .then(br => {\n                        if (br.error) {\n                            const message = \"Stopping build commands due to error on \" + stringifySpawnCommand(buildCommand);\n                            log.write(message);\n                            return {error: true, code: br.code, message};\n                        }\n                        return br;\n                    });\n            }\n\n            let buildResult: Promise<ChildProcessResult> = executeOne(commands[0]);\n            for (const buildCommand of commands.slice(1)) {\n                buildResult = buildResult\n                    .then(br => {\n                        if (br.error) {\n                            throw new Error(\"Build failure: \" + br.error);\n                        }\n                        log.write(sprintf(\"Next after %j is...%s\", br, stringifySpawnCommand(buildCommand)));\n                        return executeOne(buildCommand);\n                    });\n            }\n            buildResult = buildResult.then(br => {\n                logger.info(\"Build RETURN: %j\", br);\n                return br;\n            });\n            const b = new SpawnedBuild(appId, id, buildResult, team, log.url,\n                !!this.options.deploymentUnitFor ? await this.options.deploymentUnitFor(p, appId) : undefined);\n            return b;\n        });\n    }\n\n}\n\nasync function loadCommandsFromFile(p: Project, path: string) {\n    const buildFile = await p.getFile(path);\n    if (!buildFile) {\n        return undefined;\n    }\n    const content = await buildFile.getContent();\n    const commands = content.split(\"\\n\")\n        .filter(l => !!l)\n        .filter(l => !l.startsWith(\"#\"))\n        .map(l => asSpawnCommand(l, {}));\n    logger.info(\"Found Atomist build file in project %j: Commands are %j\", p.id,\n        commands);\n\n    return commands;\n}\n\nclass SpawnedBuild implements LocalBuildInProgress {\n\n    constructor(public appInfo: AppInfo,\n                public repoRef: RemoteRepoRef,\n                public buildResult: Promise<ChildProcessResult>,\n                public team: string,\n                public url: string,\n                public deploymentUnitFile: string) {\n    }\n\n}\n"]}