{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/DelimitedWriteProgressLogDecorator.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/DelimitedWriteProgressLogDecorator.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH;;;GAGG;AACH;IAII,YAA6B,QAAqB,EACrB,aAAqB;QADrB,aAAQ,GAAR,QAAQ,CAAa;QACrB,kBAAa,GAAb,aAAa,CAAQ;QAH1C,eAAU,GAAW,EAAE,CAAC;IAIhC,CAAC;IAED,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;IAC7B,CAAC;IAEY,WAAW;;YACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACvC,CAAC;KAAA;IAEM,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7D,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACpD,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACvD;IACL,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAEO,cAAc;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;CACJ;AA7CD,gFA6CC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ProgressLog} from \"../../spi/log/ProgressLog\";\n\n/**\n * Sometimes new log lines are separated by a character rather than a call to write.\n * For example, when receiving data events from a child process newlines delimit log lines.\n */\nexport class DelimitedWriteProgressLogDecorator implements ProgressLog {\n\n    private lineBuffer: string = \"\";\n\n    constructor(private readonly delegate: ProgressLog,\n                private readonly lineDelimiter: string) {\n    }\n\n    get name() {\n        return this.delegate.name;\n    }\n\n    get url() {\n        return this.delegate.url;\n    }\n\n    public async isAvailable() {\n        return this.delegate.isAvailable();\n    }\n\n    public write(what: string) {\n        this.lineBuffer += what;\n        const splitLines = this.lineBuffer.split(this.lineDelimiter);\n        if (splitLines.length > 1) {\n            const completedLines = splitLines.slice(0, splitLines.length - 1);\n            this.lineBuffer = splitLines[splitLines.length - 1];\n            completedLines.forEach(l => this.delegate.write(l));\n        }\n    }\n\n    public flush(): Promise<any> {\n        this.writeRemainder();\n        return this.delegate.flush();\n    }\n\n    public close(): Promise<any> {\n        this.writeRemainder();\n        return this.delegate.close();\n    }\n\n    private writeRemainder() {\n        const remainder = this.lineBuffer;\n        this.lineBuffer = \"\";\n        this.delegate.write(remainder);\n    }\n}\n"]}