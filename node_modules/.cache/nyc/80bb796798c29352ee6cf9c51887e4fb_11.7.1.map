{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/support/commandSearch.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/support/commandSearch.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAGH,oFAAiG;AAEjG,yFAAqF;AAQrF;;;;;;;GAOG;AACH,gCAAuC,IAAoB,EAAE,GAAW;IACpE,OAAO,sBAAsB,CAAC,IAAI,CAAC;SAC9B,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;AAClE,CAAC;AAHD,wDAGC;AAED;;;;;GAKG;AACH,gCAAuC,IAAoB;IACvD,OAAO,IAAI,CAAC,eAAe;SACtB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAE,6BAAS,CAAC,KAAK,CAAC,EAAE,EAAC,CAAC,CAAC;SACrD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,mCAAwB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAkB,CAAC;AAC9E,CAAC;AAJD,wDAIC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand } from \"@atomist/automation-client\";\nimport { isCommandHandlerMetadata } from \"@atomist/automation-client/internal/metadata/metadata\";\nimport { CommandHandlerMetadata } from \"@atomist/automation-client/metadata/automationMetadata\";\nimport { Maker, toFactory } from \"@atomist/automation-client/util/constructionUtils\";\nimport { FunctionalUnit } from \"../../../blueprint/FunctionalUnit\";\n\nexport interface HandlerInfo {\n    maker: Maker<HandleCommand<any>>;\n    instance: HandleCommand<any> & CommandHandlerMetadata;\n}\n\n/**\n * Return command handlers with a given tag.\n * Note this may not find all, but it will find those that know their\n * own metadata, which is true of all those returned by generatorHandler\n * and the underlying commandHandlerFrom\n * @param {FunctionalUnit} unit\n * @param {string} tag\n */\nexport function commandHandlersWithTag(unit: FunctionalUnit, tag: string): HandlerInfo[] {\n    return selfDescribingHandlers(unit)\n        .filter(hi => hi.instance.tags.some(t => t.name === tag));\n}\n\n/**\n * Return command handlers along with their metadata\n * Note this may not find all, but it will find those that know their\n * own metadata\n * @param {FunctionalUnit} unit\n */\nexport function selfDescribingHandlers(unit: FunctionalUnit): HandlerInfo[] {\n    return unit.commandHandlers\n        .map(maker => ({maker, instance: toFactory(maker)()}))\n        .filter(hi => isCommandHandlerMetadata(hi.instance)) as HandlerInfo[];\n}\n"]}