{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/goalDsl.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/goalDsl.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAKH,6FAA8G;AAC9G,qEAAkE;AAClE,4FAAiF;AACjF,mDAAyD;AAEzD,uBAA+B,SAAQ,mBAAe;IAElD,YAAY,MAAgB,EAAE,MAAkB,EAAE,MAAe;QAC7D,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ,CAAC,KAAoB;QAChC,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,IAAI,CAAC,GAAG,CAAC,KAAc,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,uBAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACpC,CAAC;CAEJ;AAbD,8CAaC;AAED;;;;;GAKG;AACH,2BACI,MAAoD,EACpD,GAAG,MAA2D;IAC9D,OAAO,IAAI,iBAAiB,CAAC,yCAAkB,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAkB,CAAC,CAAC,CAAC;AAC7F,CAAC;AAJD,8CAIC;AAED;;;GAGG;AACU,QAAA,SAAS,GAAG,IAAI,iBAAiB,CAAC,yBAAO,EAAE,EAAE,EAAE,aAAa,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Goals } from \"../../common/delivery/goals/Goals\";\nimport { PushListenerInvocation } from \"../../common/listener/PushListener\";\nimport { PushTest } from \"../../common/listener/PushTest\";\nimport { PredicateMappingTerm, toPredicateMapping } from \"../../common/listener/support/PredicateMappingTerm\";\nimport { PushRule } from \"../../common/listener/support/PushRule\";\nimport { AnyPush } from \"../../common/listener/support/pushtest/commonPushTests\";\nimport { GoalComponent, toGoals } from \"./GoalComponent\";\n\nexport class GoalSetterMapping extends PushRule<Goals> {\n\n    constructor(guard1: PushTest, guards: PushTest[], reason?: string) {\n        super(guard1, guards, reason);\n    }\n\n    public setGoals(goals: GoalComponent): this {\n        if (!goals) {\n            return this.set(goals as Goals);\n        }\n        return this.set(toGoals(goals));\n    }\n\n}\n\n/**\n * Simple GoalSetter DSL. Allows use of booleans and functions\n * returning boolean in predicate expressions\n * @param {PushTest} guard1\n * @param {PushTest} guards\n */\nexport function whenPushSatisfies(\n    guard1: PredicateMappingTerm<PushListenerInvocation>,\n    ...guards: Array<PredicateMappingTerm<PushListenerInvocation>>): GoalSetterMapping {\n    return new GoalSetterMapping(toPredicateMapping(guard1), guards.map(toPredicateMapping));\n}\n\n/**\n * PushRule that matches every push\n * @type {GoalSetterMapping}\n */\nexport const onAnyPush = new GoalSetterMapping(AnyPush, [], \"On any push\");\n"]}