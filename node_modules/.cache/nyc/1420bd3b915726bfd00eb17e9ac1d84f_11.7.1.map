{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/node/tsLintFixTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/node/tsLintFixTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA2F;AAC3F,sFAAmF;AAEnF,iFAA2E;AAE3E,sGAAmG;AACnG,uCAAuC;AACvC,0GAAuG;AACvG,2FAA2F;AAC3F,iGAA8F;AAC9F,6FAA0F;AAE1F,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IAEvB,EAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;QACxC,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,EAAE,IAAI,6BAAa,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;QACzG,gCAAgC;QAChC,CAAC,CAAC,MAAM,GAAG,GAAS,EAAE;YAClB,OAAO,wBAAS,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAA,CAAC;QACF,CAAC,CAAC,IAAI,GAAG,GAAS,EAAE;YAChB,OAAO,wBAAS,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAA,CAAC;QACF,MAAM,CAAC,GAAG,IAAI,2BAAY,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QAC1D,MAAM,EAAE,GAAG,IAAI,yCAAmB,CAAC,CAAC,CAAC,CAAC;QACtC,mCAAmC;QACnC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjC,MAAM,mCAAgB,CAAC,EAAE,EAAE,CAAC,kBAAS,CAAC,CAAC,CAAC,6CAAqB,CAAC,CAAC,CAAC,EAAmB,CAAC,CAAC,CAAC;QACtF,MAAM,OAAO,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAClB,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAEtB,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\n\nimport { successOn } from \"@atomist/automation-client/action/ActionResult\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport * as assert from \"power-assert\";\nimport { executeAutofixes } from \"../../../../../../src/common/delivery/code/autofix/executeAutofixes\";\nimport { tslintFix } from \"../../../../../../src/common/delivery/code/autofix/node/tslint\";\nimport { fakeRunWithLogContext } from \"../../../../../../src/util/test/fakeRunWithLogContext\";\nimport { SingleProjectLoader } from \"../../../../../../src/util/test/SingleProjectLoader\";\n\ndescribe(\"tsLintFix\", () => {\n\n    it(\"should lint and make fixes\", async () => {\n        const p = await GitCommandGitProject.cloned({token: null}, new GitHubRepoRef(\"atomist\", \"tree-path-ts\"));\n        // Make commit and push harmless\n        p.commit = async () => {\n            return successOn(p);\n        };\n        p.push = async () => {\n            return successOn(p);\n        };\n        const f = new InMemoryFile(\"src/bad.ts\", \"const foo\\n\\n\");\n        const pl = new SingleProjectLoader(p);\n        // Now mess it up with a lint error\n        await p.addFile(f.path, f.content);\n        assert(!!p.findFileSync(f.path));\n\n        await executeAutofixes(pl, [tslintFix])(fakeRunWithLogContext(p.id as RemoteRepoRef));\n        const fileNow = p.findFileSync(f.path);\n        assert(!!fileNow);\n        assert(fileNow.getContentSync().startsWith(\"const foo;\"));\n    }).timeout(90000);\n\n});\n"]}