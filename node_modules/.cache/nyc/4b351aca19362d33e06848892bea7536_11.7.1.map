{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/node/relevantCodeActionsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/autofix/node/relevantCodeActionsTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,4FAAyF;AACzF,iCAA0B;AAE1B,uCAAuC;AACvC,gHAGgF;AAChF,2FAA2F;AAC3F,kHAA0G;AAG1G,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAEjC,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;QACnD,MAAM,GAAG,GAAiC,IAAI,CAAC;QAC/C,MAAM,SAAS,GAAwB,+CAAyB,CAAC;YAC7D,IAAI,EAAE,aAAa;YACnB,MAAM,EAAE,CAAM,CAAC,EAAC,EAAE;gBACd,MAAM,OAAO,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;gBACnF,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC,CAAA;SACJ,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,8CAAmB,CAAC,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC7D,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAS,EAAE;QACtC,MAAM,GAAG,GAAiC;YACtC,OAAO,EAAE,IAAI,iCAAe,EAAE;YAC9B,IAAI,EAAE;gBACF,EAAE,EAAE,GAAG;aACV;SACmC,CAAC;QACzC,MAAM,QAAQ,GAAG,MAAM,8CAAmB,CAAC,CAAC,kBAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC7D,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC,CAAA,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport axios from \"axios\";\n\nimport * as assert from \"power-assert\";\nimport {\n    AutofixRegistration,\n    editorAutofixRegistration,\n} from \"../../../../../../src/common/delivery/code/autofix/AutofixRegistration\";\nimport { tslintFix } from \"../../../../../../src/common/delivery/code/autofix/node/tslint\";\nimport { relevantCodeActions } from \"../../../../../../src/common/delivery/code/PushReactionRegistration\";\nimport { PushImpactListenerInvocation } from \"../../../../../../src/common/listener/PushImpactListener\";\n\ndescribe(\"relevantCodeActions\", () => {\n\n    it(\"should match action without push test\", async () => {\n        const pti: PushImpactListenerInvocation = null;\n        const autofixes: AutofixRegistration = editorAutofixRegistration({\n            name: \"License Fix\",\n            editor: async p => {\n                const license = await axios.get(\"https://www.apache.org/licenses/LICENSE-2.0.txt\");\n                return p.addFile(\"LICENSE\", license.data);\n            },\n        });\n        const relevant = await relevantCodeActions([autofixes], pti);\n        assert.equal(relevant.length, 1);\n    });\n\n    it(\"should ignore irrelevant\", async () => {\n        const pti: PushImpactListenerInvocation = {\n            project: new InMemoryProject(),\n            push: {\n                id: \"x\",\n            },\n        } as any as PushImpactListenerInvocation;\n        const relevant = await relevantCodeActions([tslintFix], pti);\n        assert.equal(relevant.length, 0);\n    });\n\n});\n"]}