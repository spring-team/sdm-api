/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *//*class TestableNpmBuilder extends SpawnBuilder {

    public runningBuild: LocalBuildInProgress;

    constructor(buildCommand: SpawnCommand, private readonly handleResult: (success: boolean) => any) {
        super(undefined, async () => new ConsoleProgressLog(), CloningProjectLoader, npmBuilderOptions([Install, buildCommand]));
    }

    protected async onStarted(runningBuild: LocalBuildInProgress, branch: string): Promise<LocalBuildInProgress> {
        this.runningBuild = runningBuild;
        return runningBuild;
    }

    protected async onExit(token: string, success: boolean, rb: LocalBuildInProgress, atomistTeam: string, branch: string): Promise<any> {
        this.handleResult(success);
        return true;
    }
}*//* describe("NpmBuilder", () => {

    // Not necessary when we're dog fooding...just slows down the test suite
    it.skip("should compile", async () => {
        const b = new TestableNpmBuilder(RunCompile,
            success => assert(success, "Build should have succeeded"));
        await b.initiateBuild({token: process.env.GITHUB_TOKEN},
            new GitHubRepoRef("spring-team", "github-sdm"),
            async () => true,  {branch: "master"}, new ConsoleProgressLog(), {} as HandlerContext);
    }); // .timeout(300000);

    // This is slow and unnecessary, as dog fooding usage tests this
    it.skip("should test", async () => {
        const b = new TestableNpmBuilder(NpmRunBuild,
            success => assert(success, "Build should have succeeded"));
        await b.initiateBuild({token: process.env.GITHUB_TOKEN},
            new GitHubRepoRef("spring-team", "github-sdm"),
            async () => true, {branch: "master"}, new ConsoleProgressLog(), {} as HandlerContext);
    }); // .timeout(300000);

});
*///# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvdGVzdC9oYW5kbGVycy9ldmVudHMvZGVsaXZlcnkvYnVpbGQvbG9jYWwvbnBtL25wbUJ1aWxkZXJUZXN0LnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy90ZXN0L2hhbmRsZXJzL2V2ZW50cy9kZWxpdmVyeS9idWlsZC9sb2NhbC9ucG0vbnBtQnVpbGRlclRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSDs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBcUJFIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCDCqSAyMDE4IEF0b21pc3QsIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLypjbGFzcyBUZXN0YWJsZU5wbUJ1aWxkZXIgZXh0ZW5kcyBTcGF3bkJ1aWxkZXIge1xuXG4gICAgcHVibGljIHJ1bm5pbmdCdWlsZDogTG9jYWxCdWlsZEluUHJvZ3Jlc3M7XG5cbiAgICBjb25zdHJ1Y3RvcihidWlsZENvbW1hbmQ6IFNwYXduQ29tbWFuZCwgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVSZXN1bHQ6IChzdWNjZXNzOiBib29sZWFuKSA9PiBhbnkpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBhc3luYyAoKSA9PiBuZXcgQ29uc29sZVByb2dyZXNzTG9nKCksIENsb25pbmdQcm9qZWN0TG9hZGVyLCBucG1CdWlsZGVyT3B0aW9ucyhbSW5zdGFsbCwgYnVpbGRDb21tYW5kXSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvblN0YXJ0ZWQocnVubmluZ0J1aWxkOiBMb2NhbEJ1aWxkSW5Qcm9ncmVzcywgYnJhbmNoOiBzdHJpbmcpOiBQcm9taXNlPExvY2FsQnVpbGRJblByb2dyZXNzPiB7XG4gICAgICAgIHRoaXMucnVubmluZ0J1aWxkID0gcnVubmluZ0J1aWxkO1xuICAgICAgICByZXR1cm4gcnVubmluZ0J1aWxkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBvbkV4aXQodG9rZW46IHN0cmluZywgc3VjY2VzczogYm9vbGVhbiwgcmI6IExvY2FsQnVpbGRJblByb2dyZXNzLCBhdG9taXN0VGVhbTogc3RyaW5nLCBicmFuY2g6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVzdWx0KHN1Y2Nlc3MpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59Ki9cblxuLyogZGVzY3JpYmUoXCJOcG1CdWlsZGVyXCIsICgpID0+IHtcblxuICAgIC8vIE5vdCBuZWNlc3Nhcnkgd2hlbiB3ZSdyZSBkb2cgZm9vZGluZy4uLmp1c3Qgc2xvd3MgZG93biB0aGUgdGVzdCBzdWl0ZVxuICAgIGl0LnNraXAoXCJzaG91bGQgY29tcGlsZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGIgPSBuZXcgVGVzdGFibGVOcG1CdWlsZGVyKFJ1bkNvbXBpbGUsXG4gICAgICAgICAgICBzdWNjZXNzID0+IGFzc2VydChzdWNjZXNzLCBcIkJ1aWxkIHNob3VsZCBoYXZlIHN1Y2NlZWRlZFwiKSk7XG4gICAgICAgIGF3YWl0IGIuaW5pdGlhdGVCdWlsZCh7dG9rZW46IHByb2Nlc3MuZW52LkdJVEhVQl9UT0tFTn0sXG4gICAgICAgICAgICBuZXcgR2l0SHViUmVwb1JlZihcInNwcmluZy10ZWFtXCIsIFwiZ2l0aHViLXNkbVwiKSxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHRydWUsICB7YnJhbmNoOiBcIm1hc3RlclwifSwgbmV3IENvbnNvbGVQcm9ncmVzc0xvZygpLCB7fSBhcyBIYW5kbGVyQ29udGV4dCk7XG4gICAgfSk7IC8vIC50aW1lb3V0KDMwMDAwMCk7XG5cbiAgICAvLyBUaGlzIGlzIHNsb3cgYW5kIHVubmVjZXNzYXJ5LCBhcyBkb2cgZm9vZGluZyB1c2FnZSB0ZXN0cyB0aGlzXG4gICAgaXQuc2tpcChcInNob3VsZCB0ZXN0XCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgYiA9IG5ldyBUZXN0YWJsZU5wbUJ1aWxkZXIoTnBtUnVuQnVpbGQsXG4gICAgICAgICAgICBzdWNjZXNzID0+IGFzc2VydChzdWNjZXNzLCBcIkJ1aWxkIHNob3VsZCBoYXZlIHN1Y2NlZWRlZFwiKSk7XG4gICAgICAgIGF3YWl0IGIuaW5pdGlhdGVCdWlsZCh7dG9rZW46IHByb2Nlc3MuZW52LkdJVEhVQl9UT0tFTn0sXG4gICAgICAgICAgICBuZXcgR2l0SHViUmVwb1JlZihcInNwcmluZy10ZWFtXCIsIFwiZ2l0aHViLXNkbVwiKSxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHRydWUsIHticmFuY2g6IFwibWFzdGVyXCJ9LCBuZXcgQ29uc29sZVByb2dyZXNzTG9nKCksIHt9IGFzIEhhbmRsZXJDb250ZXh0KTtcbiAgICB9KTsgLy8gLnRpbWVvdXQoMzAwMDAwKTtcblxufSk7XG4qL1xuIl19
var cov_lcthohqgg=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/build/local/npm/npmBuilderTest.ts",hash="08ef0210ec61a9e3a3db62efbe0ef3412c246185",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/build/local/npm/npmBuilderTest.ts",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();