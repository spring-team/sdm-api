{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/ProjectArchiver.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/ProjectArchiver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAGH,qCAAsC;AACtC,yBAAyB;AAKzB;IAEI,YAA6B,GAAgB;QAAhB,QAAG,GAAH,GAAG,CAAa;IAC7C,CAAC;IAEY,OAAO,CAAC,CAAa,EAAE,EAAsB;;YACtD,IAAI,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACf,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;gBAC/C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,WAAW,EAAE,CAAC,CAAC;gBAC/C,OAAO,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;aAC3C;iBAAM;gBACH,OAAO,IAAI,OAAO,CAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC/C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC9D,gDAAgD;oBAChD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;oBACjB,MAAM,eAAe,GAAG,CAAC,CAAC,OAAO,GAAG,gBAAgB,CAAC;oBACrD,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;oBACrD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;wBACpB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,2BAA2B,eAAe,EAAE,CAAC,CAAC;wBAC7D,MAAM,WAAW,GAAG,EAAE,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;wBACzD,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;oBACH,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE;wBAC5B,KAAK,EAAE,IAAI;qBACd,CAAC,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACrB,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBACpC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;wBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACvB,CAAC,CAAC,CAAC;aACN;QACL,CAAC;KAAA;CACJ;AAlCD,0CAkCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {GitProject} from \"@atomist/automation-client/project/git/GitProject\";\nimport archiver = require(\"archiver\");\nimport * as fs from \"fs\";\nimport {ReadStream} from \"fs\";\nimport {DeployableArtifact} from \"../../../../spi/artifact/ArtifactStore\";\nimport {ProgressLog} from \"../../../../spi/log/ProgressLog\";\n\nexport class ProjectArchiver {\n\n    constructor(private readonly log: ProgressLog) {\n    }\n\n    public async archive(p: GitProject, da: DeployableArtifact): Promise<ReadStream> {\n        if (!!da.filename) {\n            const archiveFile = `${da.cwd}/${da.filename}`;\n            this.log.write(`Using archive ${archiveFile}`);\n            return fs.createReadStream(archiveFile);\n        } else {\n            return new Promise<ReadStream>((resolve, reject) => {\n                this.log.write(`Creating archive for directory ${p.baseDir}`);\n                // tslint:disable-next-line:no-floating-promises\n                this.log.flush();\n                const packageFilePath = p.baseDir + \"/cfpackage.zip\";\n                const output = fs.createWriteStream(packageFilePath);\n                output.on(\"close\", () => {\n                    this.log.write(`Created project archive ${packageFilePath}`);\n                    const packageFile = fs.createReadStream(packageFilePath);\n                    return resolve(packageFile);\n                });\n                const archive = archiver(\"zip\", {\n                    store: true,\n                });\n                archive.pipe(output);\n                archive.directory(p.baseDir, false);\n                archive.on(\"error\", err => {\n                    reject(err);\n                });\n                archive.finalize();\n            });\n        }\n    }\n}\n"]}