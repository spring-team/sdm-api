"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_ewn9jg7gp=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/github/gitHubContext.ts",hash="90e2f2da88db86d438648fafec7f19b8da755710",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/github/gitHubContext.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:28},end:{line:18,column:65}},"2":{start:{line:19,column:0},end:{line:19,column:37}},"3":{start:{line:20,column:0},end:{line:20,column:45}},"4":{start:{line:21,column:0},end:{line:21,column:42}},"5":{start:{line:23,column:0},end:{line:23,column:42}},"6":{start:{line:24,column:0},end:{line:24,column:47}},"7":{start:{line:32,column:4},end:{line:57,column:5}},"8":{start:{line:33,column:30},end:{line:33,column:47}},"9":{start:{line:34,column:29},end:{line:34,column:57}},"10":{start:{line:35,column:27},end:{line:35,column:54}},"11":{start:{line:36,column:8},end:{line:38,column:9}},"12":{start:{line:37,column:12},end:{line:37,column:29}},"13":{start:{line:39,column:25},end:{line:39,column:38}},"14":{start:{line:40,column:25},end:{line:40,column:59}},"15":{start:{line:41,column:26},end:{line:41,column:55}},"16":{start:{line:42,column:8},end:{line:45,column:9}},"17":{start:{line:43,column:12},end:{line:43,column:117}},"18":{start:{line:44,column:12},end:{line:44,column:29}},"19":{start:{line:46,column:21},end:{line:46,column:33}},"20":{start:{line:47,column:26},end:{line:47,column:39}},"21":{start:{line:48,column:8},end:{line:56,column:10}},"22":{start:{line:59,column:0},end:{line:59,column:36}},"23":{start:{line:65,column:4},end:{line:69,column:5}},"24":{start:{line:66,column:23},end:{line:66,column:45}},"25":{start:{line:67,column:23},end:{line:67,column:45}},"26":{start:{line:68,column:8},end:{line:68,column:88}},"27":{start:{line:71,column:0},end:{line:71,column:40}},"28":{start:{line:73,column:19},end:{line:73,column:41}},"29":{start:{line:74,column:19},end:{line:74,column:41}},"30":{start:{line:75,column:4},end:{line:75,column:59}}},fnMap:{"0":{name:"splitContext",decl:{start:{line:31,column:9},end:{line:31,column:21}},loc:{start:{line:31,column:31},end:{line:58,column:1}},line:31},"1":{name:"contextIsAfter",decl:{start:{line:64,column:9},end:{line:64,column:23}},loc:{start:{line:64,column:44},end:{line:70,column:1}},line:64},"2":{name:"belongToSameSeriesOfGoals",decl:{start:{line:72,column:9},end:{line:72,column:34}},loc:{start:{line:72,column:55},end:{line:76,column:1}},line:72}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:57,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:57,column:5}},{start:{line:32,column:4},end:{line:57,column:5}}],line:32},"1":{loc:{start:{line:36,column:8},end:{line:38,column:9}},type:"if",locations:[{start:{line:36,column:8},end:{line:38,column:9}},{start:{line:36,column:8},end:{line:38,column:9}}],line:36},"2":{loc:{start:{line:42,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:42,column:8},end:{line:45,column:9}},{start:{line:42,column:8},end:{line:45,column:9}}],line:42},"3":{loc:{start:{line:42,column:12},end:{line:42,column:35}},type:"binary-expr",locations:[{start:{line:42,column:12},end:{line:42,column:22}},{start:{line:42,column:26},end:{line:42,column:35}}],line:42},"4":{loc:{start:{line:65,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:65,column:4},end:{line:69,column:5}},{start:{line:65,column:4},end:{line:69,column:5}}],line:65},"5":{loc:{start:{line:68,column:15},end:{line:68,column:87}},type:"binary-expr",locations:[{start:{line:68,column:15},end:{line:68,column:48}},{start:{line:68,column:52},end:{line:68,column:87}}],line:68},"6":{loc:{start:{line:75,column:11},end:{line:75,column:58}},type:"binary-expr",locations:[{start:{line:75,column:11},end:{line:75,column:17}},{start:{line:75,column:21},end:{line:75,column:27}},{start:{line:75,column:31},end:{line:75,column:58}}],line:75}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_ewn9jg7gp.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const automation_client_1=(cov_ewn9jg7gp.s[1]++,require("@atomist/automation-client"));cov_ewn9jg7gp.s[2]++;exports.BaseContext="sdm/atomist/";cov_ewn9jg7gp.s[3]++;exports.IndependentOfEnvironment="0-code/";cov_ewn9jg7gp.s[4]++;exports.StagingEnvironment="1-staging/";// should always be number dash name. The number may be a decimal
cov_ewn9jg7gp.s[5]++;exports.ProductionEnvironment="2-prod/";cov_ewn9jg7gp.s[6]++;exports.ProjectDisposalEnvironment="8-doom/";/**
 * if this is a context we created, then we can interpret it.
 * Otherwise returns undefined
 * @param {string} context
 * @returns {{base: string; env: string; stage: string}}
 */function splitContext(context){cov_ewn9jg7gp.f[0]++;cov_ewn9jg7gp.s[7]++;if(context.startsWith(exports.BaseContext)){cov_ewn9jg7gp.b[0][0]++;const numberAndName=(cov_ewn9jg7gp.s[8]++,/([0-9\.]+)-(.*)/);const wholeContext=(cov_ewn9jg7gp.s[9]++,/^sdm\/atomist\/(.*)\/(.*)$/);const matchWhole=(cov_ewn9jg7gp.s[10]++,context.match(wholeContext));cov_ewn9jg7gp.s[11]++;if(!matchWhole){cov_ewn9jg7gp.b[1][0]++;cov_ewn9jg7gp.s[12]++;return undefined;}else{cov_ewn9jg7gp.b[1][1]++;}const goalPart=(cov_ewn9jg7gp.s[13]++,matchWhole[2]);const matchEnv=(cov_ewn9jg7gp.s[14]++,matchWhole[1].match(numberAndName));const matchGoal=(cov_ewn9jg7gp.s[15]++,goalPart.match(numberAndName));cov_ewn9jg7gp.s[16]++;if((cov_ewn9jg7gp.b[3][0]++,!matchGoal)||(cov_ewn9jg7gp.b[3][1]++,!matchEnv)){cov_ewn9jg7gp.b[2][0]++;cov_ewn9jg7gp.s[17]++;automation_client_1.logger.debug(`Did not find number and name in ${matchWhole[1]} or ${matchWhole[2]}`);cov_ewn9jg7gp.s[18]++;return undefined;}else{cov_ewn9jg7gp.b[2][1]++;}const name=(cov_ewn9jg7gp.s[19]++,matchGoal[2]);const goalOrder=(cov_ewn9jg7gp.s[20]++,+matchGoal[1]);cov_ewn9jg7gp.s[21]++;return{base:exports.BaseContext,env:matchEnv[2],envOrder:+matchEnv[1],name,goalOrder,envPart:matchWhole[1],goalPart,goalName:name};}else{cov_ewn9jg7gp.b[0][1]++;}}cov_ewn9jg7gp.s[22]++;exports.splitContext=splitContext;/*
 * true if contextB is in the same series of goals as A,
 * and A comes before B
 */function contextIsAfter(contextA,contextB){cov_ewn9jg7gp.f[1]++;cov_ewn9jg7gp.s[23]++;if(belongToSameSeriesOfGoals(contextA,contextB)){cov_ewn9jg7gp.b[4][0]++;const splitA=(cov_ewn9jg7gp.s[24]++,splitContext(contextA));const splitB=(cov_ewn9jg7gp.s[25]++,splitContext(contextB));cov_ewn9jg7gp.s[26]++;return(cov_ewn9jg7gp.b[5][0]++,splitA.envOrder<splitB.envOrder)||(cov_ewn9jg7gp.b[5][1]++,splitA.goalOrder<splitB.goalOrder);}else{cov_ewn9jg7gp.b[4][1]++;}}cov_ewn9jg7gp.s[27]++;exports.contextIsAfter=contextIsAfter;function belongToSameSeriesOfGoals(contextA,contextB){cov_ewn9jg7gp.f[2]++;const splitA=(cov_ewn9jg7gp.s[28]++,splitContext(contextA));const splitB=(cov_ewn9jg7gp.s[29]++,splitContext(contextB));cov_ewn9jg7gp.s[30]++;return(cov_ewn9jg7gp.b[6][0]++,splitA)&&(cov_ewn9jg7gp.b[6][1]++,splitB)&&(cov_ewn9jg7gp.b[6][2]++,splitA.base===splitB.base);}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9nb2Fscy9zdXBwb3J0L2dpdGh1Yi9naXRIdWJDb250ZXh0LnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy9zcmMvY29tbW9uL2RlbGl2ZXJ5L2dvYWxzL3N1cHBvcnQvZ2l0aHViL2dpdEh1YkNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILGtFQUFvRDtBQW1CdkMsUUFBQSxXQUFXLEdBQUcsY0FBYyxDQUFDO0FBQzdCLFFBQUEsd0JBQXdCLEdBQW9CLFNBQVMsQ0FBQztBQUN0RCxRQUFBLGtCQUFrQixHQUFvQixZQUFZLENBQUM7QUFDaEUsaUVBQWlFO0FBQ3BELFFBQUEscUJBQXFCLEdBQW9CLFNBQVMsQ0FBQztBQUNuRCxRQUFBLDBCQUEwQixHQUFvQixTQUFTLENBQUM7QUFFckU7Ozs7O0dBS0c7QUFDSCxzQkFBNkIsT0FBNEI7SUFDckQsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLG1CQUFXLENBQUMsRUFBRTtRQUNqQyxNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQztRQUN4QyxNQUFNLFlBQVksR0FBRyw0QkFBNEIsQ0FBQztRQUVsRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUVELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN6QiwwQkFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckYsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFDRCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEMsT0FBTztZQUNILElBQUksRUFBRSxtQkFBVztZQUNqQixHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNoQixRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSTtZQUM1QixTQUFTO1lBQ1QsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUTtZQUNSLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQUM7S0FDTDtBQUNMLENBQUM7QUE5QkQsb0NBOEJDO0FBRUQ7OztHQUdHO0FBQ0gsd0JBQStCLFFBQTZCLEVBQUUsUUFBNkI7SUFDdkYsSUFBSSx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDL0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxPQUFPLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7S0FDbkY7QUFDTCxDQUFDO0FBTkQsd0NBTUM7QUFFRCxtQ0FBbUMsUUFBNkIsRUFBRSxRQUE2QjtJQUMzRixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgwqkgMjAxOCBBdG9taXN0LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJAYXRvbWlzdC9hdXRvbWF0aW9uLWNsaWVudFwiO1xuaW1wb3J0IHsgU3RhdHVzU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdHlwaW5ncy90eXBlc1wiO1xuXG4vLyBjb252ZW50aW9uOiBcInNkbS9hdG9taXN0LyMtZW52LyMtZ29hbFwiICh0aGUgbnVtYmVycyBhcmUgZm9yIG9yZGVyaW5nKVxuZXhwb3J0IHR5cGUgR2l0SHViU3RhdHVzQ29udGV4dCA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBHaXRIdWJTdGF0dXMge1xuICAgIGNvbnRleHQ/OiBHaXRIdWJTdGF0dXNDb250ZXh0O1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHN0YXRlPzogU3RhdHVzU3RhdGU7XG4gICAgdGFyZ2V0VXJsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YlN0YXR1c0FuZEZyaWVuZHMgZXh0ZW5kcyBHaXRIdWJTdGF0dXMge1xuICAgIHNpYmxpbmdzOiBHaXRIdWJTdGF0dXNbXTtcbn1cblxuZXhwb3J0IHR5cGUgR29hbEVudmlyb25tZW50ID0gXCIwLWNvZGUvXCIgfCBcIjEtc3RhZ2luZy9cIiB8IFwiMi1wcm9kL1wiIHwgXCI4LWRvb20vXCI7XG5cbmV4cG9ydCBjb25zdCBCYXNlQ29udGV4dCA9IFwic2RtL2F0b21pc3QvXCI7XG5leHBvcnQgY29uc3QgSW5kZXBlbmRlbnRPZkVudmlyb25tZW50OiBHb2FsRW52aXJvbm1lbnQgPSBcIjAtY29kZS9cIjtcbmV4cG9ydCBjb25zdCBTdGFnaW5nRW52aXJvbm1lbnQ6IEdvYWxFbnZpcm9ubWVudCA9IFwiMS1zdGFnaW5nL1wiO1xuLy8gc2hvdWxkIGFsd2F5cyBiZSBudW1iZXIgZGFzaCBuYW1lLiBUaGUgbnVtYmVyIG1heSBiZSBhIGRlY2ltYWxcbmV4cG9ydCBjb25zdCBQcm9kdWN0aW9uRW52aXJvbm1lbnQ6IEdvYWxFbnZpcm9ubWVudCA9IFwiMi1wcm9kL1wiO1xuZXhwb3J0IGNvbnN0IFByb2plY3REaXNwb3NhbEVudmlyb25tZW50OiBHb2FsRW52aXJvbm1lbnQgPSBcIjgtZG9vbS9cIjtcblxuLyoqXG4gKiBpZiB0aGlzIGlzIGEgY29udGV4dCB3ZSBjcmVhdGVkLCB0aGVuIHdlIGNhbiBpbnRlcnByZXQgaXQuXG4gKiBPdGhlcndpc2UgcmV0dXJucyB1bmRlZmluZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0XG4gKiBAcmV0dXJucyB7e2Jhc2U6IHN0cmluZzsgZW52OiBzdHJpbmc7IHN0YWdlOiBzdHJpbmd9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRDb250ZXh0KGNvbnRleHQ6IEdpdEh1YlN0YXR1c0NvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC5zdGFydHNXaXRoKEJhc2VDb250ZXh0KSkge1xuICAgICAgICBjb25zdCBudW1iZXJBbmROYW1lID0gLyhbMC05XFwuXSspLSguKikvO1xuICAgICAgICBjb25zdCB3aG9sZUNvbnRleHQgPSAvXnNkbVxcL2F0b21pc3RcXC8oLiopXFwvKC4qKSQvO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoV2hvbGUgPSBjb250ZXh0Lm1hdGNoKHdob2xlQ29udGV4dCk7XG4gICAgICAgIGlmICghbWF0Y2hXaG9sZSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdvYWxQYXJ0ID0gbWF0Y2hXaG9sZVsyXTtcbiAgICAgICAgY29uc3QgbWF0Y2hFbnYgPSBtYXRjaFdob2xlWzFdLm1hdGNoKG51bWJlckFuZE5hbWUpO1xuICAgICAgICBjb25zdCBtYXRjaEdvYWwgPSBnb2FsUGFydC5tYXRjaChudW1iZXJBbmROYW1lKTtcbiAgICAgICAgaWYgKCFtYXRjaEdvYWwgfHwgIW1hdGNoRW52KSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYERpZCBub3QgZmluZCBudW1iZXIgYW5kIG5hbWUgaW4gJHttYXRjaFdob2xlWzFdfSBvciAke21hdGNoV2hvbGVbMl19YCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWUgPSBtYXRjaEdvYWxbMl07XG4gICAgICAgIGNvbnN0IGdvYWxPcmRlciA9ICttYXRjaEdvYWxbMV07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IEJhc2VDb250ZXh0LFxuICAgICAgICAgICAgZW52OiBtYXRjaEVudlsyXSxcbiAgICAgICAgICAgIGVudk9yZGVyOiArbWF0Y2hFbnZbMV0sIG5hbWUsXG4gICAgICAgICAgICBnb2FsT3JkZXIsXG4gICAgICAgICAgICBlbnZQYXJ0OiBtYXRjaFdob2xlWzFdLFxuICAgICAgICAgICAgZ29hbFBhcnQsXG4gICAgICAgICAgICBnb2FsTmFtZTogbmFtZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qXG4gKiB0cnVlIGlmIGNvbnRleHRCIGlzIGluIHRoZSBzYW1lIHNlcmllcyBvZiBnb2FscyBhcyBBLFxuICogYW5kIEEgY29tZXMgYmVmb3JlIEJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRleHRJc0FmdGVyKGNvbnRleHRBOiBHaXRIdWJTdGF0dXNDb250ZXh0LCBjb250ZXh0QjogR2l0SHViU3RhdHVzQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGlmIChiZWxvbmdUb1NhbWVTZXJpZXNPZkdvYWxzKGNvbnRleHRBLCBjb250ZXh0QikpIHtcbiAgICAgICAgY29uc3Qgc3BsaXRBID0gc3BsaXRDb250ZXh0KGNvbnRleHRBKTtcbiAgICAgICAgY29uc3Qgc3BsaXRCID0gc3BsaXRDb250ZXh0KGNvbnRleHRCKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0QS5lbnZPcmRlciA8IHNwbGl0Qi5lbnZPcmRlciB8fCBzcGxpdEEuZ29hbE9yZGVyIDwgc3BsaXRCLmdvYWxPcmRlcjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJlbG9uZ1RvU2FtZVNlcmllc09mR29hbHMoY29udGV4dEE6IEdpdEh1YlN0YXR1c0NvbnRleHQsIGNvbnRleHRCOiBHaXRIdWJTdGF0dXNDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc3BsaXRBID0gc3BsaXRDb250ZXh0KGNvbnRleHRBKTtcbiAgICBjb25zdCBzcGxpdEIgPSBzcGxpdENvbnRleHQoY29udGV4dEIpO1xuICAgIHJldHVybiBzcGxpdEEgJiYgc3BsaXRCICYmIHNwbGl0QS5iYXNlID09PSBzcGxpdEIuYmFzZTtcbn1cbiJdfQ==