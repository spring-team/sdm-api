"use strict";var cov_4tdncwjs9=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/machineFactory.ts",hash="11e105f8aa45fda430cc325a188b52af2dda525d",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/machineFactory.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:10},end:{line:3,column:27}},"2":{start:{line:4,column:21},end:{line:4,column:70}},"3":{start:{line:5,column:25},end:{line:5,column:78}},"4":{start:{line:6,column:23},end:{line:6,column:67}},"5":{start:{line:7,column:37},end:{line:7,column:84}},"6":{start:{line:47,column:20},end:{line:47,column:91}},"7":{start:{line:48,column:4},end:{line:48,column:49}},"8":{start:{line:49,column:4},end:{line:49,column:176}},"9":{start:{line:51,column:0},end:{line:51,column:40}}},fnMap:{"0":{name:"defaultMachine",decl:{start:{line:46,column:9},end:{line:46,column:23}},loc:{start:{line:46,column:52},end:{line:50,column:1}},line:46}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_4tdncwjs9.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const _=(cov_4tdncwjs9.s[1]++,require("lodash"));const createRepo_1=(cov_4tdncwjs9.s[2]++,require("../common/command/generator/createRepo"));const listGenerators_1=(cov_4tdncwjs9.s[3]++,require("../common/command/generator/listGenerators"));const SelfDescribe_1=(cov_4tdncwjs9.s[4]++,require("../handlers/commands/SelfDescribe"));const TheSoftwareDeliveryMachine_1=(cov_4tdncwjs9.s[5]++,require("./support/TheSoftwareDeliveryMachine"));/**
 * Create a **Software Delivery Machine** with default predefined goals.
 * Combines commands and delivery event handling using _goals_.
 *
 * Goals and goal "implementations" can be defined by users.
 * However, certain well known goals are built into the DefaultSoftwareDeliveryMachine
 * for convenience, with their own associated listeners.
 *
 * Well known goal support is based around a delivery process spanning
 * common goals of fingerprinting, reacting to fingerprint diffs,
 * code review, build, deployment, endpoint verification and
 * promotion to a production environment.
 *
 * The most important element of a software delivery machine is setting
 * zero or more _push rules_ in the constructor.
 * This is normally done using the internal DSL as follows:
 *
 * ```
 * const sdm = defaultMachine(
 *    "MyMachine",
 *    options,
 *    whenPushSatisfies(IsMaven, HasSpringBootApplicationClass, not(MaterialChangeToJavaRepo))
 *      .itMeans("No material change to Java")
 *      .setGoals(NoGoals),
 *    whenPushSatisfies(ToDefaultBranch, IsMaven, HasSpringBootApplicationClass, HasCloudFoundryManifest)
 *      .itMeans("Spring Boot service to deploy")
 *      .setGoals(HttpServiceGoals));
 * ```
 *
 * Uses the builder pattern to allow fluent construction. For example:
 *
 * ```
 * softwareDeliveryMachine
 *    .addPushReactions(async pu => ...)
 *    .addNewIssueListeners(async i => ...)
 *    .add...;
 * ```
 */function defaultMachine(name,opts,...goalSetters){cov_4tdncwjs9.f[0]++;const machine=(cov_4tdncwjs9.s[6]++,new TheSoftwareDeliveryMachine_1.TheSoftwareDeliveryMachine(name,opts));cov_4tdncwjs9.s[7]++;machine.goalSetters=_.flatten(goalSetters);cov_4tdncwjs9.s[8]++;return machine.addSupportingCommands(SelfDescribe_1.selfDescribeHandler(machine),listGenerators_1.listGeneratorsHandler(machine),createRepo_1.createRepoHandler(machine));}cov_4tdncwjs9.s[9]++;exports.defaultMachine=defaultMachine;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2JsdWVwcmludC9tYWNoaW5lRmFjdG9yeS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2JsdWVwcmludC9tYWNoaW5lRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1Qix1RUFBMkU7QUFDM0UsK0VBQW1GO0FBRW5GLG9FQUF3RTtBQUd4RSxxRkFBa0Y7QUFFbEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQ0c7QUFDSCx3QkFBK0IsSUFBWSxFQUNaLElBQW9DLEVBQ3BDLEdBQUcsV0FBNkM7SUFDM0UsTUFBTSxPQUFPLEdBQUcsSUFBSSx1REFBMEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sT0FBTyxDQUFDLHFCQUFxQixDQUNoQyxrQ0FBbUIsQ0FBQyxPQUFPLENBQUMsRUFDNUIsc0NBQXFCLENBQUMsT0FBTyxDQUFDLEVBQzlCLDhCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUM3QixDQUFDO0FBQ04sQ0FBQztBQVZELHdDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXBvSGFuZGxlciB9IGZyb20gXCIuLi9jb21tb24vY29tbWFuZC9nZW5lcmF0b3IvY3JlYXRlUmVwb1wiO1xuaW1wb3J0IHsgbGlzdEdlbmVyYXRvcnNIYW5kbGVyIH0gZnJvbSBcIi4uL2NvbW1vbi9jb21tYW5kL2dlbmVyYXRvci9saXN0R2VuZXJhdG9yc1wiO1xuaW1wb3J0IHsgR29hbFNldHRlciB9IGZyb20gXCIuLi9jb21tb24vbGlzdGVuZXIvR29hbFNldHRlclwiO1xuaW1wb3J0IHsgc2VsZkRlc2NyaWJlSGFuZGxlciB9IGZyb20gXCIuLi9oYW5kbGVycy9jb21tYW5kcy9TZWxmRGVzY3JpYmVcIjtcbmltcG9ydCB7IFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lIH0gZnJvbSBcIi4vU29mdHdhcmVEZWxpdmVyeU1hY2hpbmVcIjtcbmltcG9ydCB7IFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9ucyB9IGZyb20gXCIuL1NvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9uc1wiO1xuaW1wb3J0IHsgVGhlU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUgfSBmcm9tIFwiLi9zdXBwb3J0L1RoZVNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lXCI7XG5cbi8qKlxuICogQ3JlYXRlIGEgKipTb2Z0d2FyZSBEZWxpdmVyeSBNYWNoaW5lKiogd2l0aCBkZWZhdWx0IHByZWRlZmluZWQgZ29hbHMuXG4gKiBDb21iaW5lcyBjb21tYW5kcyBhbmQgZGVsaXZlcnkgZXZlbnQgaGFuZGxpbmcgdXNpbmcgX2dvYWxzXy5cbiAqXG4gKiBHb2FscyBhbmQgZ29hbCBcImltcGxlbWVudGF0aW9uc1wiIGNhbiBiZSBkZWZpbmVkIGJ5IHVzZXJzLlxuICogSG93ZXZlciwgY2VydGFpbiB3ZWxsIGtub3duIGdvYWxzIGFyZSBidWlsdCBpbnRvIHRoZSBEZWZhdWx0U29mdHdhcmVEZWxpdmVyeU1hY2hpbmVcbiAqIGZvciBjb252ZW5pZW5jZSwgd2l0aCB0aGVpciBvd24gYXNzb2NpYXRlZCBsaXN0ZW5lcnMuXG4gKlxuICogV2VsbCBrbm93biBnb2FsIHN1cHBvcnQgaXMgYmFzZWQgYXJvdW5kIGEgZGVsaXZlcnkgcHJvY2VzcyBzcGFubmluZ1xuICogY29tbW9uIGdvYWxzIG9mIGZpbmdlcnByaW50aW5nLCByZWFjdGluZyB0byBmaW5nZXJwcmludCBkaWZmcyxcbiAqIGNvZGUgcmV2aWV3LCBidWlsZCwgZGVwbG95bWVudCwgZW5kcG9pbnQgdmVyaWZpY2F0aW9uIGFuZFxuICogcHJvbW90aW9uIHRvIGEgcHJvZHVjdGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBUaGUgbW9zdCBpbXBvcnRhbnQgZWxlbWVudCBvZiBhIHNvZnR3YXJlIGRlbGl2ZXJ5IG1hY2hpbmUgaXMgc2V0dGluZ1xuICogemVybyBvciBtb3JlIF9wdXNoIHJ1bGVzXyBpbiB0aGUgY29uc3RydWN0b3IuXG4gKiBUaGlzIGlzIG5vcm1hbGx5IGRvbmUgdXNpbmcgdGhlIGludGVybmFsIERTTCBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYFxuICogY29uc3Qgc2RtID0gZGVmYXVsdE1hY2hpbmUoXG4gKiAgICBcIk15TWFjaGluZVwiLFxuICogICAgb3B0aW9ucyxcbiAqICAgIHdoZW5QdXNoU2F0aXNmaWVzKElzTWF2ZW4sIEhhc1NwcmluZ0Jvb3RBcHBsaWNhdGlvbkNsYXNzLCBub3QoTWF0ZXJpYWxDaGFuZ2VUb0phdmFSZXBvKSlcbiAqICAgICAgLml0TWVhbnMoXCJObyBtYXRlcmlhbCBjaGFuZ2UgdG8gSmF2YVwiKVxuICogICAgICAuc2V0R29hbHMoTm9Hb2FscyksXG4gKiAgICB3aGVuUHVzaFNhdGlzZmllcyhUb0RlZmF1bHRCcmFuY2gsIElzTWF2ZW4sIEhhc1NwcmluZ0Jvb3RBcHBsaWNhdGlvbkNsYXNzLCBIYXNDbG91ZEZvdW5kcnlNYW5pZmVzdClcbiAqICAgICAgLml0TWVhbnMoXCJTcHJpbmcgQm9vdCBzZXJ2aWNlIHRvIGRlcGxveVwiKVxuICogICAgICAuc2V0R29hbHMoSHR0cFNlcnZpY2VHb2FscykpO1xuICogYGBgXG4gKlxuICogVXNlcyB0aGUgYnVpbGRlciBwYXR0ZXJuIHRvIGFsbG93IGZsdWVudCBjb25zdHJ1Y3Rpb24uIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogc29mdHdhcmVEZWxpdmVyeU1hY2hpbmVcbiAqICAgIC5hZGRQdXNoUmVhY3Rpb25zKGFzeW5jIHB1ID0+IC4uLilcbiAqICAgIC5hZGROZXdJc3N1ZUxpc3RlbmVycyhhc3luYyBpID0+IC4uLilcbiAqICAgIC5hZGQuLi47XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNYWNoaW5lKG5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzOiBTb2Z0d2FyZURlbGl2ZXJ5TWFjaGluZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZ29hbFNldHRlcnM6IEFycmF5PEdvYWxTZXR0ZXIgfCBHb2FsU2V0dGVyW10+KTogU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUge1xuICAgIGNvbnN0IG1hY2hpbmUgPSBuZXcgVGhlU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUobmFtZSwgb3B0cyk7XG4gICAgbWFjaGluZS5nb2FsU2V0dGVycyA9IF8uZmxhdHRlbihnb2FsU2V0dGVycyk7XG4gICAgcmV0dXJuIG1hY2hpbmUuYWRkU3VwcG9ydGluZ0NvbW1hbmRzKFxuICAgICAgICBzZWxmRGVzY3JpYmVIYW5kbGVyKG1hY2hpbmUpLFxuICAgICAgICBsaXN0R2VuZXJhdG9yc0hhbmRsZXIobWFjaGluZSksXG4gICAgICAgIGNyZWF0ZVJlcG9IYW5kbGVyKG1hY2hpbmUpLFxuICAgICk7XG59XG4iXX0=