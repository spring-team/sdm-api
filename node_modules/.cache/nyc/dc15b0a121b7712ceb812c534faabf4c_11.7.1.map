{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/generator/listGenerators.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/generator/listGenerators.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoE;AACpE,oEAAqF;AAGrF,oDAA0D;AAC1D,wDAAqD;AAErD;;;;GAIG;AACH,+BAAsC,GAA4B;IAC9D,OAAO,GAAG,EAAE,CAAC,8BAAkB,CAC3B,oBAAoB,CAAC,GAAG,CAAC,EACzB,iCAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;AAC9C,CAAC;AAPD,sDAOC;AAED,8BAA8B,GAA4B;IACtD,OAAO,CAAM,GAAG,EAAC,EAAE;QACf,MAAM,UAAU,GAAG,sCAAsB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC5D,IAAI,OAAO,GAAG,GAAG,UAAU,CAAC,MAAM,iDAAiD,CAAC;QACpF,UAAU,CAAC,OAAO,CAAC,CAAM,EAAE,EAAC,EAAE;YAC1B,OAAO,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACtF,CAAC,CAAA,CAAC,CAAC;QACH,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACzC,OAAO,2BAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand, Success } from \"@atomist/automation-client\";\nimport { commandHandlerFrom, OnCommand } from \"@atomist/automation-client/onCommand\";\nimport { Maker } from \"@atomist/automation-client/util/constructionUtils\";\nimport { SoftwareDeliveryMachine } from \"../../../blueprint/SoftwareDeliveryMachine\";\nimport { commandHandlersWithTag } from \"../commandSearch\";\nimport { EmptyParameters } from \"../EmptyParameters\";\n\n/**\n * Return a command handler that can list generators\n * @param {SoftwareDeliveryMachine} sdm\n * @return {HandleCommand<EmptyParameters>}\n */\nexport function listGeneratorsHandler(sdm: SoftwareDeliveryMachine): Maker<HandleCommand> {\n    return () => commandHandlerFrom(\n        handleListGenerators(sdm),\n        EmptyParameters,\n        \"listGenerators\",\n        \"List generators\",\n        \"list generators\", \"show generators\");\n}\n\nfunction handleListGenerators(sdm: SoftwareDeliveryMachine): OnCommand {\n    return async ctx => {\n        const generators = commandHandlersWithTag(sdm, \"generator\");\n        let message = `${generators.length} generators in this software delivery machine\\n`;\n        generators.forEach(async hi => {\n            message += `${hi.instance.intent.map(intent => \"`\" + intent + \"`\").join(\", \")}\\n`;\n        });\n        await ctx.messageClient.respond(message);\n        return Success;\n    };\n}\n"]}