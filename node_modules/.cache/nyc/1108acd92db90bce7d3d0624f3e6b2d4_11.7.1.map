{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/review/executeReviewTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/review/executeReviewTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DefaultReviewComment } from \"@atomist/automation-client/operations/review/ReviewResult\";\nimport { saveFromFiles } from \"@atomist/automation-client/project/util/projectUtils\";\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport { executeReview, PushReactionResponse, SingleProjectLoader } from \"../../../../../src\";\nimport { ReviewerRegistration } from \"../../../../../src/common/delivery/code/review/ReviewerRegistration\";\nimport { ReviewListener, ReviewListenerInvocation } from \"../../../../../src/common/listener/ReviewListener\";\nimport { fakeRunWithLogContext } from \"../../../../../src/util/test/fakeRunWithLogContext\";\nimport { TruePushTest } from \"../../../listener/support/pushTestUtilsTest\";\n\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport * as assert from \"power-assert\";\n\nconst HatesTheWorld: ReviewerRegistration = {\n    name: \"hatred\",\n    pushTest: TruePushTest,\n    action: async cri => ({\n        repoId: cri.project.id,\n        comments: await saveFromFiles(cri.project, \"**/*\", f =>\n            new DefaultReviewComment(\"info\", \"hater\",\n                `Found a file at \\`${f.path}\\`: We hate all files`,\n                {\n                    path: f.path,\n                    lineFrom1: 1,\n                    offset: -1,\n                })),\n    }),\n    options: {considerOnlyChangedFiles: false},\n};\n\nconst JustTheOne: ReviewerRegistration = {\n    name: \"justOne\",\n    pushTest: TruePushTest,\n    action: async cri => ({\n        repoId: cri.project.id,\n        comments: [\n            new DefaultReviewComment(\"info\", \"justOne\",\n                `One thing`,\n                {\n                    path: \"whatever\",\n                    lineFrom1: 1,\n                    offset: -1,\n                })],\n    }),\n    options: {considerOnlyChangedFiles: false},\n};\n\nfunction loggingReviewListenerWithApproval(saveTo: ReviewListenerInvocation[]): ReviewListener {\n    return async re => {\n        saveTo.push(re);\n        if (re.review.comments.length > 0) {\n            return PushReactionResponse.requireApprovalToProceed;\n        }\n    };\n}\n\nfunction loggingReviewListenerWithoutApproval(saveTo: ReviewListenerInvocation[]): ReviewListener {\n    return async re => {\n        saveTo.push(re);\n    };\n}\n\ndescribe(\"executeReview\", () => {\n\n    it(\"should be clean on empty\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id);\n        const reviewEvents: ReviewListenerInvocation[] = [];\n        const l = loggingReviewListenerWithApproval(reviewEvents);\n        const ge = executeReview(new SingleProjectLoader(p), [HatesTheWorld], [l]);\n        const r = await ge(fakeRunWithLogContext(id));\n        assert.equal(r.code, 0);\n        assert(!r.requireApproval);\n        assert.equal(reviewEvents.length, 1);\n        assert.equal(reviewEvents[0].review.comments.length, 0);\n    });\n\n    it(\"should hate anything it finds\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id, new InMemoryFile(\"thing\", \"1\"));\n        const reviewEvents: ReviewListenerInvocation[] = [];\n        const l = loggingReviewListenerWithApproval(reviewEvents);\n        const ge = executeReview(new SingleProjectLoader(p), [HatesTheWorld], [l]);\n        const rwlc = fakeRunWithLogContext(id);\n        const r = await ge(rwlc);\n        assert.equal(reviewEvents.length, 1);\n        assert.equal(reviewEvents[0].review.comments.length, 1);\n        assert.equal(reviewEvents[0].addressChannels, rwlc.addressChannels);\n        assert.equal(r.code, 0);\n        assert(r.requireApproval);\n    });\n\n    it(\"should hate anything it finds, without requiring approval\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id, new InMemoryFile(\"thing\", \"1\"));\n        const reviewEvents: ReviewListenerInvocation[] = [];\n        const l = loggingReviewListenerWithoutApproval(reviewEvents);\n        const ge = executeReview(new SingleProjectLoader(p), [HatesTheWorld], [l]);\n        const rwlc = fakeRunWithLogContext(id);\n        const r = await ge(rwlc);\n        assert.equal(reviewEvents.length, 1);\n        assert.equal(reviewEvents[0].review.comments.length, 1);\n        assert.equal(reviewEvents[0].addressChannels, rwlc.addressChannels);\n        assert.equal(r.code, 0);\n        assert(!r.requireApproval);\n    });\n\n    it(\"consolidate reviewers\", async () => {\n        const id = new GitHubRepoRef(\"a\", \"b\");\n        const p = InMemoryProject.from(id, new InMemoryFile(\"thing\", \"1\"));\n        const reviewEvents: ReviewListenerInvocation[] = [];\n        const l = loggingReviewListenerWithApproval(reviewEvents);\n        const ge = executeReview(new SingleProjectLoader(p), [HatesTheWorld, JustTheOne], [l]);\n        const rwlc = fakeRunWithLogContext(id);\n        const r = await ge(rwlc);\n        assert.equal(reviewEvents.length, 1);\n        assert.equal(reviewEvents[0].review.comments.length, 2);\n        assert.equal(reviewEvents[0].addressChannels, rwlc.addressChannels);\n        assert.equal(r.code, 0);\n    });\n\n});\n"]}