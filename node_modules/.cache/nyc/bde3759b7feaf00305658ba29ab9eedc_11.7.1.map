{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/git/filesChangedSince.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/git/filesChangedSince.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,mFAA+E;AAG/E;;;;;;GAMG;AACH,2BAAwC,OAAmB,EAAE,GAAW;;QACpE,IAAI,CAAC,GAAG,EAAE;YACN,0BAAM,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,0BAA0B,CAAC,CAAC;YACzF,OAAO,6BAA6B,CAAC,OAAO,CAAC,CAAC;SACjD;QAED,MAAM,OAAO,GAAG,wBAAwB,GAAG,EAAE,CAAC;QAC9C,IAAI;YACA,MAAM,EAAE,GAAG,MAAM,wBAAU,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,OAAO,CAAC,OAAO,EAAC,CAAC,CAAC;YAC7D,sDAAsD;YACtD,0BAAM,CAAC,KAAK,CAAC,kCAAkC,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;YACtG,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;iBACvB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACzB;QAAC,OAAO,GAAG,EAAE;YACV,0BAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YACnF,OAAO,SAAS,CAAC;SACpB;IACL,CAAC;CAAA;AAjBD,8CAiBC;AAED,kIAAkI;AAClI,wGAAwG;AACxG,uCAAoD,OAAmB;;QACnE,IAAI;YACA,MAAM,OAAO,GAAG,wBAAwB,CAAC,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,wBAAU,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,OAAO,CAAC,OAAO,EAAC,CAAC,CAAC;YAC7D,uCAAuC;YACvC,+EAA+E;YAC/E,0BAAM,CAAC,KAAK,CAAC,2CAA2C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;YACrG,MAAM,OAAO,GAAG,uBAAuB,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,OAAO,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;SAC1C;QAAC,OAAO,GAAG,EAAE;YACV,0BAAM,CAAC,IAAI,CAAC,6CAA6C,EAAE,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YACpF,OAAO,SAAS,CAAC;SACpB;IACL,CAAC;CAAA;AAdD,sEAcC;AASD;IAII,YAAmB,IAAY,EAAS,OAAe;QAApC,SAAI,GAAJ,IAAI,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAQ;QAFvC,QAAG,GAAQ,SAAS,CAAC;IAGrC,CAAC;CACJ;AAND,wBAMC;AAED,sBAAmC,OAAmB,EAAE,GAAW;;QAC/D,MAAM,OAAO,GAAG,0BAA0B,GAAG,EAAE,CAAC;QAChD,MAAM,EAAE,GAAG,MAAM,wBAAU,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,OAAO,CAAC,OAAO,EAAC,CAAC,CAAC;QAC7D,sDAAsD;QACtD,0BAAM,CAAC,KAAK,CAAC,kCAAkC,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,KAAK,CAAC,EAAG;YACV,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QACD,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;aACvB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;CAAA;AAVD,oCAUC;AAED;;;;;GAKG;AACH,gCAAuC,gBAA0B,EAAE,IAA+B;IAC9F,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAFD,wDAEC;AAED,qCAA4C,gBAA0B,EAAE,UAAoB;IACxF,OAAO,sBAAsB,CAAC,gBAAgB,EAC1C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC;AAHD,kEAGC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { runCommand } from \"@atomist/automation-client/action/cli/commandLine\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\n\n/**\n * Use git to list the files changed since the given sha\n * or undefined if we cannot determine it\n * @param {GitProject} project\n * @param {string} sha\n * @return {Promise<string[]>}\n */\nexport async function filesChangedSince(project: GitProject, sha: string): Promise<string[] | undefined> {\n    if (!sha) {\n        logger.info(`No sha passed in on ${JSON.stringify(project.id)}: Looking for parent sha`);\n        return filesChangedSinceParentCommit(project);\n    }\n\n    const command = `git diff --name-only ${sha}`;\n    try {\n        const cr = await runCommand(command, {cwd: project.baseDir});\n        // stdout is nothing but a list of files, one per line\n        logger.debug(`$Output from filesChangedSince ${sha} on ${JSON.stringify(project.id)}:\\n${cr.stdout}`);\n        return cr.stdout.split(\"\\n\")\n            .filter(n => !!n);\n    } catch (err) {\n        logger.warn(\"Error diffing project %j since %s: %s\", project.id, sha, err.message);\n        return undefined;\n    }\n}\n\n// TODO: we should use the earliest commit in the push, and find its parent. See: https://github.com/atomist/github-sdm/issues/293\n// we're using this to list changes for code reactions, and that should include all changes in the push.\nexport async function filesChangedSinceParentCommit(project: GitProject): Promise<string[] | undefined> {\n    try {\n        const command = `git show --name-only ${(await project.gitStatus()).sha}^`;\n        const cr = await runCommand(command, {cwd: project.baseDir});\n        // stdout starts with a line like this:\n        // commit acd5f89cb2c3e96fa47ef85b32b2028ea2e045fb (origin/master, origin/HEAD)\n        logger.debug(`$Output from filesChangedSinceParent on ${JSON.stringify(project.id)}:\\n${cr.stdout}`);\n        const matches = /commit ([a-f0-9]{40})/.exec(cr.stdout);\n        const sha = matches[1];\n        return filesChangedSince(project, sha);\n    } catch (err) {\n        logger.warn(\"Error diffing project %j finding parent: %s\", project.id, err.message);\n        return undefined;\n    }\n}\n\nexport type Mod = \"added\" | \"deleted\" | \"modified\" | \"renamed\";\n\nexport interface Change {\n    readonly name: string;\n    readonly how: Mod;\n}\n\nexport class Rename implements Change {\n\n    public readonly how: Mod = \"renamed\";\n\n    constructor(public name: string, public newName: string) {\n    }\n}\n\nexport async function changesSince(project: GitProject, sha: string): Promise<string[]> {\n    const command = `git diff --name-status ${sha}`;\n    const cr = await runCommand(command, {cwd: project.baseDir});\n    // stdout is nothing but a list of files, one per line\n    logger.debug(`$Output from filesChangedSince ${sha} on ${JSON.stringify(project.id)}:\\n${cr.stdout}`);\n    if (1 === 1 ) {\n        throw new Error(\"Not yet implemented\");\n    }\n    return cr.stdout.split(\"\\n\")\n        .filter(n => !!n);\n}\n\n/**\n * Does a file satisfying this text exist within the set of changed files?\n * @param {string[]} changedFilePaths\n * @param {string[]} test test for the file change\n * @return {boolean}\n */\nexport function anyFileChangedSuchThat(changedFilePaths: string[], test: (path: string) => boolean): boolean {\n    return changedFilePaths.some(test);\n}\n\nexport function anyFileChangedWithExtension(changedFilePaths: string[], extensions: string[]): boolean {\n    return anyFileChangedSuchThat(changedFilePaths,\n        path => extensions.some(ext => path.endsWith(\".\" + ext)));\n}\n"]}