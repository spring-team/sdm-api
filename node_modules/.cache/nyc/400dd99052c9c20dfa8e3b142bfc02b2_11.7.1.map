{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/executePublish.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/executePublish.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { TokenCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport * as fs from \"fs-extra\";\nimport * as p from \"path\";\nimport { createStatus } from \"../../../../../util/github/ghub\";\nimport { spawnAndWatch } from \"../../../../../util/misc/spawned\";\nimport { ProjectLoader } from \"../../../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../../../goals/ExecuteGoalResult\";\nimport {\n    ExecuteGoalWithLog,\n    PrepareForGoalExecution,\n    RunWithLogContext,\n} from \"../../../goals/support/reportGoalError\";\nimport { ProjectIdentifier } from \"../projectIdentifier\";\nimport { NpmPreparations } from \"./npmBuilder\";\n\n/**\n * Execute npm publish\n * @param {ProjectLoader} projectLoader\n * @param {ProjectIdentifier} projectIdentifier\n * @param {PrepareForGoalExecution[]} preparations\n * @return {ExecuteGoalWithLog}\n */\nexport function executePublish(projectLoader: ProjectLoader,\n                               projectIdentifier: ProjectIdentifier,\n                               preparations: PrepareForGoalExecution[] = NpmPreparations,\n                               options: NpmOptions): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const { credentials, id, context } = rwlc;\n        return projectLoader.doWithProject({ credentials, id, context, readOnly: false }, async project => {\n            for (const preparation of preparations) {\n                const pResult = await preparation(project, rwlc);\n                if (pResult.code !== 0) {\n                    return pResult;\n                }\n            }\n\n            await configure(options);\n\n            const result: ExecuteGoalResult = await spawnAndWatch({\n                    command: \"bash\",\n                    args: [p.join(__dirname, \"..\", \"..\", \"..\", \"..\", \"..\", \"scripts\", \"npm-publish.bash\"),\n                        `--registry=${options.registry}`,\n                        \"--access\",\n                        options.access ? options.access : \"restricted\"],\n                },\n                {\n                    cwd: project.baseDir,\n                },\n                rwlc.progressLog,\n                {\n                    errorFinder: code => code !== 0,\n                });\n\n            if (result.code === 0) {\n                const pi = await projectIdentifier(project);\n                const url = `${options.registry}/${pi.name}/-/${pi.name}-${pi.version}.tgz`;\n                await createStatus(\n                    (credentials as TokenCredentials).token,\n                    id as GitHubRepoRef,\n                    {\n                        context: \"npm/atomist/package\",\n                        description: \"NPM package\",\n                        target_url: url,\n                        state: \"success\",\n                    });\n                result.targetUrl = url;\n            }\n\n            await deleteNpmrc();\n            return result;\n        });\n    };\n}\n\nasync function configure(options: NpmOptions): Promise<NpmOptions> {\n    const npmrc = p.join(process.env.HOME || process.env.USER_DIR, \".npmrc\");\n    let npm = \"\";\n    if (fs.existsSync(npmrc))  {\n        npm = fs.readFileSync(npmrc).toString();\n    }\n\n    if (!npm.includes(options.npmrc)) {\n        npm = `${npm}\n${options.npmrc}`;\n    }\n\n    await fs.writeFile(npmrc, npm);\n    return options;\n}\n\nasync function deleteNpmrc() {\n    const npmrc = p.join(process.env.HOME || process.env.USER_DIR, \".npmrc\");\n    return fs.unlink(npmrc);\n}\n\nexport interface NpmOptions {\n    npmrc: string;\n    registry: string;\n    access: string;\n}\n"]}