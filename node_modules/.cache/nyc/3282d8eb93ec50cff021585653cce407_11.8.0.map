{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/InvokeListenersOnBuildComplete.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/InvokeListenersOnBuildComplete.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AAExE,8EAA+F;AAE/F,0DAA+D;AAG/D;;;GAGG;AAEH,IAAa,8BAA8B,GAA3C;IAEI,YAA6B,SAA0B,EAC1B,kBAAuC;QADvC,cAAS,GAAT,SAAS,CAAiB;QAC1B,uBAAkB,GAAlB,kBAAkB,CAAqB;IACpE,CAAC;IAEY,MAAM,CAAC,KAA+C,EAC/C,OAAuB,EACvB,MAAY;;YAC5B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;YAC/B,MAAM,EAAE,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,MAAM,eAAe,GAAoB,oCAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC3E,MAAM,GAAG,GAA4B;gBACjC,OAAO;gBACP,EAAE;gBACF,WAAW;gBACX,eAAe;gBACf,KAAK;aACR,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS;iBAC7B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CACpB,CAAC;YACF,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AA3BY,8BAA8B;IAD1C,gCAAY,CAAC,oCAAoC,EAAE,sBAAY,CAAC,iBAAiB,CAAC,CAAC;;GACvE,8BAA8B,CA2B1C;AA3BY,wEAA8B","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { BuildListener, BuildListenerInvocation } from \"../../../../common/listener/BuildListener\";\nimport { AddressChannels, addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { OnBuildComplete } from \"../../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\n\n/**\n * Invoke listeners on complete build. Not a part of our delivery flow:\n * just observational.\n */\n@EventHandler(\"Invoke listeners on build complete\", subscription(\"OnBuildComplete\"))\nexport class InvokeListenersOnBuildComplete implements HandleEvent<OnBuildComplete.Subscription> {\n\n    constructor(private readonly listeners: BuildListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<OnBuildComplete.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const build = event.data.Build[0];\n        const repo = build.commit.repo;\n        const id = toRemoteRepoRef(repo);\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        const addressChannels: AddressChannels = addressChannelsFor(repo, context);\n        const bli: BuildListenerInvocation = {\n            context,\n            id,\n            credentials,\n            addressChannels,\n            build,\n        };\n        await Promise.all(params.listeners\n            .map(l => l(bli)),\n        );\n        return Success;\n    }\n}\n"]}