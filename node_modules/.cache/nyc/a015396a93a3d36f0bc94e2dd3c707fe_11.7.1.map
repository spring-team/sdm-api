{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/command/support/java/javaPatternsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/command/support/java/javaPatternsTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,uCAAuC;AACvC,8FAA0I;AAE1I,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAE1B,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAElC,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACtC,MAAM,WAAW,GAAG;gBAChB,GAAG;gBACH,IAAI;gBACJ,gBAAgB;gBAChB,OAAO;gBACP,UAAU;gBACV,qBAAqB;gBACrB,WAAW;gBACX,YAAY;aACf,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,mCAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YACzC,MAAM,WAAW,GAAG;gBAChB,IAAI;gBACJ,OAAO;gBACP,eAAe;gBACf,IAAI;gBACJ,OAAO;aACV,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,mCAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACnC,MAAM,QAAQ,GAAG;gBACb,EAAE;gBACF,KAAK;gBACL,aAAa;gBACb,MAAM;gBACN,QAAQ;aACX,CAAC;YACF,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,gCAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACtC,MAAM,QAAQ,GAAG;gBACb,IAAI;gBACJ,OAAO;gBACP,eAAe;gBACf,IAAI;aACP,CAAC;YACF,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,gCAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAEhC,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAC9B,MAAM,GAAG,GAAG;gBACR,SAAS;gBACT,eAAe;gBACf,aAAa;gBACb,QAAQ;aACX,CAAC;YACF,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,iCAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACjC,MAAM,GAAG,GAAG;gBACR,MAAM;gBACN,KAAK;gBACL,IAAI;aACP,CAAC;YACF,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACZ,MAAM,CAAC,CAAC,iCAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,wBAAwB,GAAG,CAAC,CAAC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from \"power-assert\";\nimport { JavaIdentifierRegExp, JavaPackageRegExp, MavenGroupIdRegExp } from \"../../../../../src/common/command/support/java/javaPatterns\";\n\ndescribe(\"javaPatterns\", () => {\n\n    describe(\"JavaIdentifierRegExp\", () => {\n\n        it(\"should match valid identifiers\", () => {\n            const identifiers = [\n                \"x\",\n                \"x3\",\n                \"comfoBarBazbar\",\n                \"BAR_Z\",\n                \"_article\",\n                \"barnacle_17_644_foo\",\n                \"ClassName\",\n                \"$className\",\n            ];\n            identifiers.forEach(b => assert(JavaIdentifierRegExp.pattern.test(b)));\n        });\n\n        it(\"should reject invalid identifiers\", () => {\n            const identifiers = [\n                \"1x\",\n                \"com-1\",\n                \"com.foo-1.bar\",\n                \"c%\",\n                \"com.f\",\n            ];\n            identifiers.forEach(b => assert(!JavaIdentifierRegExp.pattern.test(b)));\n        });\n\n    });\n\n    describe(\"JavaPackageRegExp\", () => {\n\n        it(\"should match valid packages\", () => {\n            const packages = [\n                \"\",\n                \"com\",\n                \"com.foo.bar\",\n                \"com1\",\n                \"Fuga21\",\n            ];\n            packages.forEach(b => assert(JavaPackageRegExp.pattern.test(b)));\n        });\n\n        it(\"should reject invalid packages\", () => {\n            const packages = [\n                \"1x\",\n                \"com-1\",\n                \"com.foo-1.bar\",\n                \"c%\",\n            ];\n            packages.forEach(b => assert(!JavaPackageRegExp.pattern.test(b)));\n        });\n\n    });\n\n    describe(\"MavenGroupIdRegExp\", () => {\n\n        it(\"should match valid ids\", () => {\n            const ids = [\n                \"atomist\",\n                \"atomist-seeds\",\n                \"com.foo.bar\",\n                \"test_1\",\n            ];\n            ids.forEach(b => assert(MavenGroupIdRegExp.pattern.test(b)));\n        });\n\n        it(\"should reject invalid ids\", () => {\n            const ids = [\n                \"&345\",\n                \"'66\",\n                \"c%\",\n            ];\n            ids.forEach(b =>\n                assert(!MavenGroupIdRegExp.pattern.test(b), \"Should have failed on \" + b));\n        });\n\n    });\n\n});\n"]}