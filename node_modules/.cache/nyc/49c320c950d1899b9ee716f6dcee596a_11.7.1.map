{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/BitBucketServerRepoRef.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/BitBucketServerRepoRef.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ActionResult, successOn } from \"@atomist/automation-client/action/ActionResult\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { ProviderType } from \"@atomist/automation-client/operations/common/RepoId\";\n\nimport { isBasicAuthCredentials } from \"@atomist/automation-client/operations/common/BasicAuthCredentials\";\nimport { Configurable } from \"@atomist/automation-client/project/git/Configurable\";\nimport axios from \"axios\";\nimport { encode } from \"../../util/misc/base64\";\nimport { AbstractRemoteRepoRef } from \"./AbstractRemoteRepoRef\";\n\n/**\n * RemoteRepoRef implementation for BitBucket server (not BitBucket Cloud)\n *\n * This should ultimately move to automation-client-ts\n */\nexport class BitBucketServerRepoRef extends AbstractRemoteRepoRef {\n\n    public readonly ownerType: \"projects\" | \"users\";\n\n    /**\n     * Construct a new BitBucketServerRepoRef\n     * @param {string} remoteBase remote base, including scheme\n     * @param {string} owner\n     * @param {string} repo\n     * @param {boolean} isProject\n     * @param {string} sha\n     * @param {string} path\n     */\n    constructor(remoteBase: string,\n                owner: string,\n                repo: string,\n                private readonly isProject: boolean = true,\n                sha: string = \"master\",\n                path?: string) {\n        super(ProviderType.bitbucket, remoteBase, owner, repo, sha, path);\n        this.ownerType = isProject ? \"projects\" : \"users\";\n        logger.info(\"Constructed BitBucketServerRepoRef: %j\", this);\n    }\n\n    public createRemote(creds: ProjectOperationCredentials, description: string, visibility): Promise<ActionResult<this>> {\n        const url = `${this.scheme}${this.apiBase}/${this.apiBasePathComponent}`;\n        const data = {\n            name: this.repo,\n            scmId: \"git\",\n            forkable: \"true\",\n        };\n        const hdrs = headers(creds);\n        logger.info(\"Making request to BitBucket '%s' to create repo, data=%j, headers=%j\", url, data, hdrs);\n        return axios.post(url, data, hdrs)\n            .then(axiosResponse => {\n                return {\n                    target: this,\n                    success: true,\n                    axiosResponse,\n                };\n            })\n            .catch(error => {\n                logger.error(\"Error attempting to create repository %j: %s\", this, error);\n                return Promise.reject(error);\n            });\n    }\n\n    public deleteRemote(creds: ProjectOperationCredentials): Promise<ActionResult<this>> {\n        const url = `${this.scheme}${this.apiBase}/${this.apiPathComponent}`;\n        logger.debug(`Making request to '${url}' to delete repo`);\n        return axios.delete(url, headers(creds))\n            .then(axiosResponse => {\n                return {\n                    target: this,\n                    success: true,\n                    axiosResponse,\n                };\n            })\n            .catch(err => {\n                logger.error(`Error attempting to delete repository: ${err}`);\n                return Promise.reject(err);\n            });\n    }\n\n    public setUserConfig(credentials: ProjectOperationCredentials, project: Configurable): Promise<ActionResult<any>> {\n        return Promise.resolve(successOn(this));\n    }\n\n    public raisePullRequest(credentials: ProjectOperationCredentials,\n                            title: string, body: string, head: string, base: string): Promise<ActionResult<this>> {\n        const url = `${this.apiBase}${this.apiPathComponent}/pull-requests`;\n        logger.debug(`Making request to '${url}' to raise PR`);\n        return axios.post(url, {\n            title,\n            description: body,\n            fromRef: {\n                id: head,\n            },\n            toRef: {\n                id: base,\n            },\n        }, headers(credentials))\n            .then(axiosResponse => {\n                return {\n                    target: this,\n                    success: true,\n                    axiosResponse,\n                };\n            })\n            .catch(err => {\n                logger.error(`Error attempting to raise PR: ${err}`);\n                return Promise.reject(err);\n            });\n    }\n\n    get url() {\n        let url: string = `projects/${this.owner}/repos`;\n        if (!this.isProject) {\n            url = `users/${this.owner}/repos`;\n        }\n        return `${this.scheme}${this.remoteBase}/${url}/${this.repo}`;\n    }\n\n    get pathComponent(): string {\n        return `scm/${this.maybeTilde}${this.owner}/${this.repo}`;\n    }\n\n    private get maybeTilde() {\n        return this.isProject ? \"\" : \"~\";\n    }\n\n    private get apiBasePathComponent(): string {\n        return `rest/api/1.0/projects/${this.maybeTilde}${this.owner}/repos/`;\n    }\n\n    get apiPathComponent(): string {\n        return this.apiBasePathComponent + this.repo;\n    }\n\n}\n\nfunction headers(creds: ProjectOperationCredentials) {\n    if (!isBasicAuthCredentials(creds)) {\n        throw new Error(\"Only Basic auth supported: Had \" + JSON.stringify(creds));\n    }\n    const upwd = `${creds.username}:${creds.password}`;\n    const encoded = encode(upwd);\n    return {\n        headers: {\n            Authorization: `Basic ${encoded}`,\n        },\n    };\n}\n"]}