{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/misc/LruCache.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/misc/LruCache.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAIH;;;GAGG;AACH;IAOI,YAA6B,aAAqB,GAAG;QAAxB,eAAU,GAAV,UAAU,CAAc;QAL7C,SAAI,GAAG,CAAC,CAAC;QACT,SAAI,GAAG,CAAC,CAAC;QAEA,WAAM,GAAmB,IAAI,GAAG,EAAa,CAAC;IAG/D,CAAC;IAED,IAAI,KAAK;QACL,OAAO,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;IAC9C,CAAC;IAEM,GAAG,CAAC,GAAW;QAClB,EAAE,IAAI,CAAC,IAAI,CAAC;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,KAAQ,CAAC;QACb,IAAI,MAAM,EAAE;YACR,EAAE,IAAI,CAAC,IAAI,CAAC;YACZ,6CAA6C;YAC7C,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC/B;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,KAAQ;QAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YACrC,8CAA8C;YAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SACnC;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;CAEJ;AAzCD,4BAyCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SimpleCache } from \"./SimpleCache\";\n\n/**\n * Simple Map-based cache.\n * Based on https://medium.com/spektrakel-blog/a-simple-lru-cache-in-typescript-cba0d9807c40\n */\nexport class LruCache<T> implements SimpleCache<T> {\n\n    private gets = 0;\n    private hits = 0;\n\n    private readonly values: Map<string, T> = new Map<string, T>();\n\n    constructor(private readonly maxEntries: number = 200) {\n    }\n\n    get stats() {\n        return {hits: this.hits, gets: this.gets};\n    }\n\n    public get(key: string): T {\n        ++this.gets;\n        const hasKey = this.values.has(key);\n        let entry: T;\n        if (hasKey) {\n            ++this.hits;\n            // Peek the entry, re-insert for LRU strategy\n            entry = this.values.get(key);\n            this.values.delete(key);\n            this.values.set(key, entry);\n        }\n        return entry;\n    }\n\n    public put(key: string, value: T) {\n        if (this.values.size >= this.maxEntries) {\n            // least-recently used cache eviction strategy\n            const keyToDelete = this.values.keys().next().value;\n            this.values.delete(keyToDelete);\n        }\n        this.values.set(key, value);\n    }\n\n    public evict(key: string) {\n        return this.values.delete(key);\n    }\n\n}\n"]}