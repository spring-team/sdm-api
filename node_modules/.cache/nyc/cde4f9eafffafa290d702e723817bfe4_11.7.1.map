{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/summarizeGoalsInGitHubStatus.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/summarizeGoalsInGitHubStatus.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAIpD,wEAA0F;AAC1F,oDAAyD;AAEzD,4CAAmD,kBAAuC;IACtF,OAAO,CAAO,GAA+B,EAAE,EAAE;QAC7C,MAAM,EAAC,EAAE,EAAE,WAAW,EAAC,GAAG,GAAG,CAAC;QAC9B,OAAO,mBAAY,CAAC,WAAW,EAAE,EAAmB,EAAE;YAClD,OAAO,EAAE,aAAa;YACtB,WAAW,EAAE,+BAA+B;YAC5C,UAAU,EAAE,yBAAyB;YACrC,KAAK,EAAE,SAAS;SACnB,CAAC,CAAC;IACP,CAAC,CAAA,CAAC;AACN,CAAC;AAVD,gFAUC;AAED;IACI,OAAO,CAAO,GAAqC,EAAE,EAAE;QACnD,MAAM,EAAC,EAAE,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAC,GAAG,GAAG,CAAC;QACvD,0BAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE,+BAAa,CAAC,aAAa,CAAC,EAAE,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;QAChI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,0BAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,+BAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEhF,IAAI,aAAa,CAAC,KAAK,KAAK,SAAS,EAAE;YACnC,0BAAM,CAAC,IAAI,CAAC,uCAAuC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YAC9D,OAAO,mBAAY,CAAC,WAAW,EAAE,EAAmB,EAAE;gBAClD,OAAO,EAAE,aAAa;gBACtB,WAAW,EAAE,sBAAsB,aAAa,CAAC,WAAW,EAAE;gBAC9D,UAAU,EAAE,yBAAyB;gBACrC,KAAK,EAAE,SAAS;aACnB,CAAC,CAAC;SACN;QACD,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;YACzB,0BAAM,CAAC,IAAI,CAAC,wCAAwC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;YAC9D,OAAO,mBAAY,CAAC,WAAW,EAAE,EAAmB,EAAE;gBAClD,OAAO,EAAE,aAAa;gBACtB,WAAW,EAAE,kCAAkC;gBAC/C,UAAU,EAAE,yBAAyB;gBACrC,KAAK,EAAE,SAAS;aACnB,CAAC,CAAC;SACN;IACL,CAAC,CAAA,CAAC;AACN,CAAC;AAzBD,0EAyBC;AAED,uBAAuB,KAAgB;IACnC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,0BAAM,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACnE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;AACnD,CAAC;AAED,yCAAgD,SAAuB;IACnE,QAAQ,SAAS,EAAE;QACf,KAAK,SAAS,CAAC;QACf,KAAK,WAAW,CAAC;QACjB,KAAK,YAAY;YACb,OAAO,SAAwB,CAAC;QACpC,KAAK,sBAAsB,CAAC;QAC5B,KAAK,SAAS;YACV,OAAO,SAAwB,CAAC;QACpC,KAAK,SAAS,CAAC;QACf,KAAK,SAAS;YACV,OAAO,SAAwB,CAAC;QACpC;YACI,MAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,SAAS,CAAC,CAAC;KAC1D;AACL,CAAC;AAfD,0EAeC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { GoalCompletionListener, GoalCompletionListenerInvocation, GoalsSetListener, GoalsSetListenerInvocation, StatusState } from \"../../..\";\nimport { CredentialsResolver } from \"../../../handlers/common/CredentialsResolver\";\nimport { goalKeyString, SdmGoal, SdmGoalState } from \"../../../ingesters/sdmGoalIngester\";\nimport { createStatus } from \"../../../util/github/ghub\";\n\nexport function CreatePendingGitHubStatusOnGoalSet(credentialsFactory: CredentialsResolver): GoalsSetListener {\n    return async (inv: GoalsSetListenerInvocation) => {\n        const {id, credentials} = inv;\n        return createStatus(credentials, id as GitHubRepoRef, {\n            context: \"sdm/atomist\",\n            description: \"Atomist SDM Goals in progress\",\n            target_url: \"https://app.atomist.com\", // TODO: deep link!\n            state: \"pending\",\n        });\n    };\n}\n\nexport function SetGitHubStatusOnGoalCompletion(): GoalCompletionListener {\n    return async (inv: GoalCompletionListenerInvocation) => {\n        const {id, completedGoal, allGoals, credentials} = inv;\n        logger.info(\"Completed goal: %s with %s in set %s\", goalKeyString(completedGoal), completedGoal.state, completedGoal.goalSetId);\n        allGoals.forEach(g => logger.info(\" goal %s is %s\", goalKeyString(g), g.state));\n\n        if (completedGoal.state === \"failure\") {\n            logger.info(\"Setting GitHub status to failed on %s\" + id.sha);\n            return createStatus(credentials, id as GitHubRepoRef, {\n                context: \"sdm/atomist\",\n                description: `Atomist SDM Goals: ${completedGoal.description}`,\n                target_url: \"https://app.atomist.com\", // TODO: deep link!\n                state: \"failure\",\n            });\n        }\n        if (allSuccessful(allGoals)) {\n            logger.info(\"Setting GitHub status to success on %s\", id.sha);\n            return createStatus(credentials, id as GitHubRepoRef, {\n                context: \"sdm/atomist\",\n                description: `Atomist SDM Goals: all succeeded`,\n                target_url: \"https://app.atomist.com\", // TODO: deep link!\n                state: \"success\",\n            });\n        }\n    };\n}\n\nfunction allSuccessful(goals: SdmGoal[]): boolean {\n    goals.forEach(g => logger.debug(\"goal %s is %s\", g.name, g.state));\n    return !goals.some(g => g.state !== \"success\");\n}\n\nexport function sdmGoalStateToGitHubStatusState(goalState: SdmGoalState): StatusState {\n    switch (goalState) {\n        case \"planned\":\n        case \"requested\":\n        case \"in_process\":\n            return \"pending\" as StatusState;\n        case \"waiting_for_approval\":\n        case \"success\":\n            return \"success\" as StatusState;\n        case \"failure\":\n        case \"skipped\":\n            return \"failure\" as StatusState;\n        default:\n            throw new Error(\"Unknown goal state \" + goalState);\n    }\n}\n"]}