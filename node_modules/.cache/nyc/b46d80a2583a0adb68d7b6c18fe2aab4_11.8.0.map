{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/pushTestUtilsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/pushTestUtilsTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\n\nimport * as assert from \"power-assert\";\nimport { PushListenerInvocation } from \"../../../../src/common/listener/PushListener\";\nimport { ProjectPredicate, PushTest, pushTest } from \"../../../../src/common/listener/PushTest\";\nimport { allSatisfied, anySatisfied, not } from \"../../../../src/common/listener/support/pushtest/pushTestUtils\";\n\nexport const TruePushTest: PushTest = pushTest(\"true\", async () => true);\n\nexport const FalsePushTest: PushTest = pushTest(\"false\", async () => false);\n\nexport const TrueProjectPredicate: ProjectPredicate = async () => true;\n\nexport const FalseProjectPredicate: ProjectPredicate = async () => false;\n\nconst id = new GitHubRepoRef(\"atomist\", \"github-sdm\");\n\ndescribe(\"pushTestUtilsTest\", () => {\n\n    describe(\"not\", () => {\n\n        it(\"should handle one true\", async () => {\n            const r = await not(TruePushTest).mapping({id} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should handle one false\", async () => {\n            const r = await not(FalsePushTest).mapping({id} as any as PushListenerInvocation);\n            assert(r);\n        });\n\n    });\n\n    describe(\"allPredicatesSatisfied\", () => {\n\n        describe(\"with PushTest\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await allSatisfied(TruePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await allSatisfied(TruePushTest, TruePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await allSatisfied(TruePushTest, FalsePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(!r);\n            });\n        });\n\n        describe(\"with ProjectPredicate\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await allSatisfied(TrueProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await allSatisfied(TrueProjectPredicate, TrueProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await allSatisfied(TrueProjectPredicate, FalseProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(!r);\n            });\n        });\n\n    });\n\n    describe(\"anyPredicateSatisfied\", () => {\n\n        describe(\"with PushTest\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await anySatisfied(TruePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await anySatisfied(TruePushTest, TruePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await anySatisfied(TruePushTest, FalsePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two false\", async () => {\n                const r = await anySatisfied(FalsePushTest, FalsePushTest).mapping({id} as any as PushListenerInvocation);\n                assert(!r);\n            });\n\n        });\n\n        describe(\"with ProjectPredicate\", () => {\n\n            it(\"should handle one true\", async () => {\n                const r = await anySatisfied(TrueProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two true\", async () => {\n                const r = await anySatisfied(TrueProjectPredicate, TrueProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle one true and one false\", async () => {\n                const r = await anySatisfied(TrueProjectPredicate, FalseProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(r);\n            });\n\n            it(\"should handle two false\", async () => {\n                const r = await anySatisfied(FalseProjectPredicate, FalseProjectPredicate).mapping({id} as any as PushListenerInvocation);\n                assert(!r);\n            });\n\n        });\n\n    });\n\n});\n"]}