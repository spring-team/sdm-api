{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/review/support/patternMatchReviewerTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/code/review/support/patternMatchReviewerTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllFiles } from \"@atomist/automation-client/project/fileGlobs\";\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport * as assert from \"power-assert\";\nimport { ReviewerRegistration } from \"../../../../../../src/common/delivery/code/review/ReviewerRegistration\";\nimport { patternMatchReviewer } from \"../../../../../../src/common/delivery/code/review/support/patternMatchReviewer\";\nimport { PushImpactListenerInvocation } from \"../../../../../../src/common/listener/PushImpactListener\";\n\ndescribe(\"patternMatchReviewer\", () => {\n\n    it(\"should not find anything\", async () => {\n        const rer: ReviewerRegistration = patternMatchReviewer(\"name\",\n            {globPattern: AllFiles},\n            {\n                name: \"t thing\",\n                antiPattern: /t.*/,\n                comment: \"something else\",\n            });\n        const project = InMemoryProject.of(new InMemoryFile(\"a\", \"b\"));\n        const rr = await rer.action({project} as any as PushImpactListenerInvocation);\n        assert.equal(rr.comments.length, 0);\n    });\n\n    it(\"should find regex\", async () => {\n        const rer: ReviewerRegistration = patternMatchReviewer(\"name\",\n            {globPattern: AllFiles},\n            {\n                name: \"t thing\",\n                antiPattern: /t.*/,\n                comment: \"something else\",\n            });\n        const project = InMemoryProject.of(new InMemoryFile(\"thing\", \"b test\"));\n        const rr = await rer.action({project} as any as PushImpactListenerInvocation);\n        assert.equal(rr.comments.length, 1);\n        assert.equal(rr.comments[0].sourceLocation.path, \"thing\");\n    });\n\n    it(\"should not find string\", async () => {\n        const rer: ReviewerRegistration = patternMatchReviewer(\"name\",\n            {globPattern: AllFiles},\n            {\n                name: \"t thing\",\n                antiPattern: \"frogs suck\",\n                comment: \"something else\",\n            });\n        const project = InMemoryProject.of(new InMemoryFile(\"thing\", \"b test\"));\n        const rr = await rer.action({project} as any as PushImpactListenerInvocation);\n        assert.equal(rr.comments.length, 0);\n    });\n\n    it(\"should find string\", async () => {\n        const rer: ReviewerRegistration = patternMatchReviewer(\"name\",\n            {globPattern: AllFiles},\n            {\n                name: \"t thing\",\n                antiPattern: \"frogs suck\",\n                comment: \"something else\",\n            });\n        const project = InMemoryProject.of(new InMemoryFile(\"thing\", \"b frogs suck test\"));\n        const rr = await rer.action({project} as any as PushImpactListenerInvocation);\n        assert.equal(rr.comments.length, 1);\n        assert.equal(rr.comments[0].sourceLocation.path, \"thing\");\n    });\n\n    it(\"should find complex string\", async () => {\n        const rer: ReviewerRegistration = patternMatchReviewer(\"name\",\n            {globPattern: AllFiles},\n            {\n                name: \"t thing\",\n                antiPattern: \"frogs /[&(* suck\",\n                comment: \"something else\",\n            });\n        const project = InMemoryProject.of(new InMemoryFile(\"thing\", \"b frogs /[&(* suck test\"));\n        const rr = await rer.action({project} as any as PushImpactListenerInvocation);\n        assert.equal(rr.comments.length, 1);\n        assert.equal(rr.comments[0].sourceLocation.path, \"thing\");\n    });\n\n});\n"]}