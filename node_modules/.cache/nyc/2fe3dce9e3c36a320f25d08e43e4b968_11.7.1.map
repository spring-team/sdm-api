{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/editorCommand.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/editorCommand.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAMH,qIAAkI;AAClI,oFAAmF;AACnF,gGAAiH;AAGjH,yFAAqF;AACrF,uCAAuC;AACvC,0EAAuE;AACvE,gFAA6E;AAC7E,wDAAqD;AACrD,qDAAkD;AAElD,qDAAuD;AAEvD;;;;;;;;;GASG;AACH,uBAAwD,GAAyC,EACzC,IAAY,EACZ,cAA6B,iCAAgC,EAC7D,UAAyC,EAAE;IAE/F,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC;IAChD,MAAM,YAAY,mBACd,WAAW,EACX,MAAM,EAAE,QAAQ,IAAI,EAAE,EACtB,UAAU,EAAE,+BAAc,EAAE,EAC5B,UAAU,EACN,CAAC,CAAC,EAAE,CAAC,iDAAuB,CAAC,IAAI,2CAAoB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EACnF,QAAQ,EAAE,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,IAAI,uBAAW,CACzC,MAAoC,CAAC,iBAAiB,IAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,EACtF,MAAoC,CAAC,uBAAuB,IAAI,WAAW,CAAC,CAAC,IAC/E,OAAO,CACb,CAAC;IAEF,OAAO,+BAAa,CAChB,oCAAmB,CAAC,IAAI,EAAE,GAAG,CAAQ,EACrC,iCAAiC,CAAS,WAAW,CAAC,EACtD,IAAI,EACJ,YAAY,CAAC,CAAC;AACtB,CAAC;AAvBD,sCAuBC;AAED;;;;GAIG;AACH,2CAA0D,WAA0B;IAChF,MAAM,YAAY,GAAG,6BAAS,CAAC,WAAW,CAAC,EAAE,CAAC;IAC9C,OAAO,4BAA4B,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/C,WAAyD,CAAC,CAAC;QAC3D,GAAG,EAAE;YACD,MAAM,QAAQ,GAAW,6BAAS,CAAC,WAAW,CAAC,EAAE,CAAC;YAClD,MAAM,QAAQ,GAAG,QAAiE,CAAC;YACnF,MAAM,OAAO;YACT,gCAAgC;YACjC,IAAI,6DAA6B,EAAE,CAAC;YACvC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;YAC3B,QAAQ,CAAC,eAAe,GAAG,GAAG,EAAE;gBAC5B,QAAQ,CAAC,OAAO,CAAC,CAAC;YACtB,CAAC,CAAC;YACF,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC;AACV,CAAC;AAhBD,8EAgBC;AAED,sCAAsC,CAAM;IACxC,OAAO,CAAC,CAAE,CAAgC,CAAC,OAAO,CAAC;AACvD,CAAC;AAED,kBAAkB,OAAuB;IACrC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACf,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;QAClD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;KAChC;AACL,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand } from \"@atomist/automation-client\";\nimport { EditorOrReviewerParameters } from \"@atomist/automation-client/operations/common/params/BaseEditorOrReviewerParameters\";\nimport { EditOneOrAllParameters } from \"@atomist/automation-client/operations/common/params/EditOneOrAllParameters\";\nimport { FallbackParams } from \"@atomist/automation-client/operations/common/params/FallbackParams\";\nimport { GitHubFallbackReposParameters } from \"@atomist/automation-client/operations/common/params/GitHubFallbackReposParameters\";\nimport { PullRequest } from \"@atomist/automation-client/operations/edit/editModes\";\nimport { EditorCommandDetails, editorHandler } from \"@atomist/automation-client/operations/edit/editorToCommand\";\nimport { AnyProjectEditor } from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { SmartParameters } from \"@atomist/automation-client/SmartParameters\";\nimport { Maker, toFactory } from \"@atomist/automation-client/util/constructionUtils\";\nimport * as assert from \"power-assert\";\nimport { CachingProjectLoader } from \"../../repo/CachingProjectLoader\";\nimport { projectLoaderRepoLoader } from \"../../repo/projectLoaderRepoLoader\";\nimport { EmptyParameters } from \"../EmptyParameters\";\nimport { allReposInTeam } from \"./allReposInTeam\";\nimport { EditModeSuggestion } from \"./EditModeSuggestion\";\nimport { chattyEditorFactory } from \"./editorWrappers\";\n\n/**\n * Wrap an editor in a command handler, allowing use of custom parameters.\n * Targeting (targets property) is handled automatically if the parameters\n * do not implement TargetsParams\n * @param edd function to make a fresh editor instance from the params\n * @param name editor name\n * @param paramsMaker parameters factory, typically the name of a class with a no arg constructor\n * @param details optional details to customize behavior\n * Add intent \"edit <name>\"\n */\nexport function editorCommand<PARAMS = EmptyParameters>(edd: (params: PARAMS) => AnyProjectEditor,\n                                                        name: string,\n                                                        paramsMaker: Maker<PARAMS> = EmptyParameters as Maker<PARAMS>,\n                                                        details: Partial<EditorCommandDetails> = {}): HandleCommand<EditOneOrAllParameters> {\n\n    const description = details.description || name;\n    const detailsToUse: EditorCommandDetails = {\n        description,\n        intent: `edit ${name}`,\n        repoFinder: allReposInTeam(),\n        repoLoader:\n            p => projectLoaderRepoLoader(new CachingProjectLoader(), p.targets.credentials),\n        editMode: ((params: PARAMS) => new PullRequest(\n            (params as any as EditModeSuggestion).desiredBranchName || `edit-${name}-${Date.now()}`,\n            (params as any as EditModeSuggestion).desiredPullRequestTitle || description)),\n        ...details,\n    };\n\n    return editorHandler(\n        chattyEditorFactory(name, edd) as any,\n        toEditorOrReviewerParametersMaker<PARAMS>(paramsMaker),\n        name,\n        detailsToUse);\n}\n\n/**\n * Return a parameters maker that is targeting aware\n * @param {Maker<PARAMS>} paramsMaker\n * @return {Maker<EditorOrReviewerParameters & PARAMS>}\n */\nexport function toEditorOrReviewerParametersMaker<PARAMS>(paramsMaker: Maker<PARAMS>): Maker<EditorOrReviewerParameters & PARAMS> {\n    const sampleParams = toFactory(paramsMaker)();\n    return isEditorOrReviewerParameters(sampleParams) ?\n        paramsMaker as Maker<EditorOrReviewerParameters & PARAMS> :\n        () => {\n            const rawParms: PARAMS = toFactory(paramsMaker)();\n            const allParms = rawParms as EditorOrReviewerParameters & PARAMS & SmartParameters;\n            const targets: FallbackParams =\n                // new BitBucketTargetsParams();\n               new GitHubFallbackReposParameters();\n            allParms.targets = targets;\n            allParms.bindAndValidate = () => {\n                validate(targets);\n            };\n            return allParms;\n        };\n}\n\nfunction isEditorOrReviewerParameters(p: any): p is EditorOrReviewerParameters {\n    return !!(p as EditorOrReviewerParameters).targets;\n}\n\nfunction validate(targets: FallbackParams) {\n    if (!targets.repo) {\n        assert(!!targets.repos, \"Must set repos or repo\");\n        targets.repo = targets.repos;\n    }\n}\n"]}