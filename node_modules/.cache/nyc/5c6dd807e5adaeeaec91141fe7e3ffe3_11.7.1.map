{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/node/PackageLockFingerprinter.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/node/PackageLockFingerprinter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,sDAA4D;AAG5D,4FAAkF;AAGlF;;;;GAIG;AACH;IAAA;QAEoB,SAAI,GAAG,0BAA0B,CAAC;QAElC,aAAQ,GAAa,sBAAM,CAAC;IAwBhD,CAAC;IAtBgB,MAAM,CAAC,GAAiC;;YACjD,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAChE,IAAI,CAAC,QAAQ,EAAE;gBACX,OAAO,EAAE,CAAC;aACb;YACD,IAAI;gBACA,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;gBAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACjC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAClC,OAAO;oBACH,IAAI,EAAE,cAAc;oBACpB,YAAY,EAAE,MAAM;oBACpB,OAAO,EAAE,KAAK;oBACd,GAAG,EAAE,kBAAY,CAAC,IAAI,CAAC;oBACvB,IAAI,EAAE,IAAI;iBACb,CAAC;aACL;YAAC,OAAO,GAAG,EAAE;gBACV,0BAAM,CAAC,IAAI,CAAC,qDAAqD,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;gBAChF,OAAO,EAAE,CAAC;aACb;QACL,CAAC;KAAA;CACJ;AA5BD,4DA4BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { computeShaOf } from \"../../../../../util/misc/sha\";\nimport { PushImpactListenerInvocation } from \"../../../../listener/PushImpactListener\";\nimport { PushTest } from \"../../../../listener/PushTest\";\nimport { IsNode } from \"../../../../listener/support/pushtest/node/nodePushTests\";\nimport { FingerprinterRegistration, FingerprinterResult } from \"../FingerprinterRegistration\";\n\n/**\n * Compute a fingerprint from a package-lock.json file.\n * Unlike a Maven POM, we can rely on ordering in a package lock file\n * so do not need to sort the data ourselves before sha-ing.\n */\nexport class PackageLockFingerprinter implements FingerprinterRegistration {\n\n    public readonly name = \"PackageLockFingerprinter\";\n\n    public readonly pushTest: PushTest = IsNode;\n\n    public async action(cri: PushImpactListenerInvocation): Promise<FingerprinterResult> {\n        const lockFile = await cri.project.getFile(\"package-lock.json\");\n        if (!lockFile) {\n            return [];\n        }\n        try {\n            const content = await lockFile.getContent();\n            const json = JSON.parse(content);\n            const deps = json.dependencies;\n            const dstr = JSON.stringify(deps);\n            return {\n                name: \"dependencies\",\n                abbreviation: \"deps\",\n                version: \"0.1\",\n                sha: computeShaOf(dstr),\n                data: json,\n            };\n        } catch (err) {\n            logger.warn(\"Unable to compute package-lock.json fingerprint: %s\", err.message);\n            return [];\n        }\n    }\n}\n"]}