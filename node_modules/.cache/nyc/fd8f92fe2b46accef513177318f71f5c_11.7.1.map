{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/sloc/slocReport.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/sloc/slocReport.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Project } from \"@atomist/automation-client/project/Project\";\n\nimport { File } from \"@atomist/automation-client/project/File\";\nimport { saveFromFilesAsync } from \"@atomist/automation-client/project/util/projectUtils\";\nimport * as _ from \"lodash\";\nimport * as sloc from \"sloc\";\nimport { AllLanguages } from \"./languages\";\n\nexport interface Language {\n    name: string;\n    extensions: string[];\n}\n\nexport interface CodeStats {\n    language: Language;\n    total: number;\n    source: number;\n    comment: number;\n    single: number;\n    block: number;\n}\n\nexport interface FileReport {\n\n    stats: CodeStats;\n\n    file: File;\n\n}\n\n/**\n * Report about a project's files in a given language\n */\nexport class LanguageReport {\n\n    constructor(public language: Language, public fileReports: FileReport[]) {\n    }\n\n    /**\n     * Return stats for each language\n     * @return {CodeStats[]}\n     */\n    get stats(): CodeStats {\n        return {\n            language: this.language,\n            total: _.sum(this.fileReports.map(r => r.stats.total)),\n            source: _.sum(this.fileReports.map(r => r.stats.source)),\n            comment: _.sum(this.fileReports.map(r => r.stats.comment)),\n            single: _.sum(this.fileReports.map(r => r.stats.single)),\n            block: _.sum(this.fileReports.map(r => r.stats.block)),\n        };\n    }\n\n}\n\n/**\n * Report about lines of code in various languages.\n */\nexport class LanguagesReport {\n\n    constructor(public languageReports: LanguageReport[]) {\n    }\n\n    get languagesScanned(): Language[] {\n        return _.uniq(this.languageReports.map(lr => lr.language));\n    }\n\n    /**\n     * Return only the found languages\n     * @return {CodeStats[]}\n     */\n    get relevantLanguageReports(): LanguageReport[] {\n        return this.languageReports.filter(lr => lr.stats.total > 0);\n    }\n\n}\n\nexport interface LanguageReportRequest {\n\n    language: Language;\n\n    /**\n     * Narrow down search--eg to exclude test\n     */\n    glob?: string;\n}\n\n/**\n * Use the sloc library to compute code statistics\n * @param {Project} p\n * @param {string} request\n * @return {Promise<LanguageReport>}\n */\nexport async function reportForLanguage(p: Project, request: LanguageReportRequest): Promise<LanguageReport> {\n    if (request.language.extensions.length > 1) {\n        throw new Error(\"Only one extension supported in \" + JSON.stringify(request.language));\n    }\n    const extension = request.language.extensions[0];\n    const globToUse = request.glob || `**/*.${extension}`;\n    const fileReports = await saveFromFilesAsync<FileReport>(p, globToUse, async f => {\n        const content = await f.getContent();\n        const stats = sloc(content, extension);\n        return {\n            stats,\n            file: f,\n            language: request.language,\n        };\n    });\n    return new LanguageReport(request.language, fileReports);\n}\n\nexport async function reportForLanguages(p: Project,\n                                         requests: LanguageReportRequest[] = AllLanguages.map(language => ({language}))): Promise<LanguagesReport> {\n    const languageReports = await Promise.all(requests.map(r => reportForLanguage(p, r)));\n    return new LanguagesReport(languageReports);\n}\n"]}