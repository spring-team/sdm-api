{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/fetchGoalsOnCommit.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/fetchGoalsOnCommit.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    HandlerContext,\n    logger,\n} from \"@atomist/automation-client\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { QueryNoCacheOptions } from \"@atomist/automation-client/spi/graph/GraphClient\";\nimport * as stringify from \"json-stringify-safe\";\nimport * as _ from \"lodash\";\nimport {\n    goalKeyString,\n    SdmGoal,\n} from \"../../../../ingesters/sdmGoalIngester\";\nimport {\n    CommitForSdmGoal,\n    SdmGoalFields,\n    SdmGoalRepo,\n    SdmGoalsForCommit,\n} from \"../../../../typings/types\";\nimport { Goal } from \"../Goal\";\nimport { goalCorrespondsToSdmGoal } from \"../storeGoals\";\n\nexport async function findSdmGoalOnCommit(ctx: HandlerContext, id: RemoteRepoRef, providerId: string, goal: Goal): Promise<SdmGoal> {\n    const sdmGoals = await fetchGoalsForCommit(ctx, id, providerId) as SdmGoal[];\n    const matches = sdmGoals.filter(g => goalCorrespondsToSdmGoal(goal, g));\n    if (matches && matches.length > 1) {\n        logger.warn(\"FindSdmGoal: More than one match found for %s/%s; they are %j\", goal.environment, goal.name, matches);\n    }\n    if (matches.length === 0) {\n        logger.debug(\"Did not find goal %s on commit %s#%s\", goalKeyString(goal), id.repo, id.sha);\n        return undefined;\n    }\n    return matches[0];\n}\n\nexport async function fetchCommitForSdmGoal(ctx: HandlerContext,\n                                            goal: SdmGoalFields.Fragment & SdmGoalRepo.Fragment): Promise<CommitForSdmGoal.Commit> {\n    const variables = {sha: goal.sha, repo: goal.repo.name, owner: goal.repo.owner, branch: goal.branch};\n    const result = await ctx.graphClient.query<CommitForSdmGoal.Query, CommitForSdmGoal.Variables>(\n        {\n            options: QueryNoCacheOptions,\n            name: \"CommitForSdmGoal\",\n            variables: {sha: goal.sha, repo: goal.repo.name, owner: goal.repo.owner, branch: goal.branch},\n        });\n    if (!result || !result.Commit || result.Commit.length === 0) {\n        throw new Error(\"No commit found for goal \" + stringify(variables));\n    }\n    return result.Commit[0];\n}\n\nexport async function fetchGoalsForCommit(ctx: HandlerContext, id: RemoteRepoRef, providerId: string): Promise<SdmGoalsForCommit.SdmGoal[]> {\n    const result = await ctx.graphClient.query<SdmGoalsForCommit.Query, SdmGoalsForCommit.Variables>({\n        name: \"SdmGoalsForCommit\",\n        variables: {\n            owner: id.owner,\n            repo: id.repo,\n            branch: id.branch,\n            sha: id.sha,\n            providerId,\n            qty: 200,\n        },\n        options: QueryNoCacheOptions,\n    });\n    if (!result || !result.SdmGoal) {\n        throw new Error(`No result finding goals for commit ${providerId}/${id.owner}/${id.repo}#${id.sha} on ${id.branch}`);\n    }\n    if (result.SdmGoal.length === 0) {\n        logger.warn(\"0 goals found for commit %j, provider %s\", id, providerId);\n    }\n    if (result.SdmGoal.some(g => !g)) {\n        logger.warn(\"Internal error: Null or undefined goal found for commit %j, provider %s\", id, providerId);\n    }\n    if (result.SdmGoal.length === 200) {\n        logger.warn(\"Watch out! There may be more goals than this. We only retrieve 200.\");\n        // automation-api#399 paging is not well-supported yet\n    }\n\n    // only maintain latest version of SdmGoals\n    const goals: SdmGoalsForCommit.SdmGoal[] = sumSdmGoalEvents(result.SdmGoal as SdmGoal[]);\n    logger.debug(\"summed goals: \", stringify(goals));\n\n    return goals;\n}\n\nexport function sumSdmGoalEvents(some: SdmGoal[]): SdmGoal[] {\n    // For some reason this won't compile with the obvious fix\n    // tslint:disable-next-line:no-unnecessary-callback-wrapper\n    const byKey = _.groupBy(some, sg => goalKeyString(sg));\n    const summedGoals = Object.keys(byKey).map(k => sumEventsForOneSdmGoal(byKey[k]));\n    return summedGoals;\n}\n\nfunction sumEventsForOneSdmGoal(events: SdmGoal[]): SdmGoal {\n    if (events.length === 1) {\n        return events[0];\n    }\n    // SUCCESS OVERRIDES ALL\n    const success = events.find(e => e.state === \"success\");\n    return success || _.maxBy(events, e => e.ts);\n}\n"]}