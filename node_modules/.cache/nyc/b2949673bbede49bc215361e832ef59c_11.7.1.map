{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/CloudFoundryBlueGreenDeployer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/CloudFoundryBlueGreenDeployer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport * as yaml from \"js-yaml\";\n\nimport * as _ from \"lodash\";\n\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { DeployableArtifact } from \"../../../../spi/artifact/ArtifactStore\";\nimport { Deployer } from \"../../../../spi/deploy/Deployer\";\nimport { InterpretedLog } from \"../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { CloudFoundryApi, initializeCloudFoundry } from \"./CloudFoundryApi\";\nimport {BlueGreenNamer, CloudFoundryBlueGreener} from \"./CloudFoundryBlueGreener\";\nimport {Manifest} from \"./CloudFoundryManifest\";\nimport { CloudFoundryPusher } from \"./CloudFoundryPusher\";\nimport { CloudFoundryDeployment, CloudFoundryInfo, CloudFoundryManifestPath } from \"./CloudFoundryTarget\";\nimport { ProjectArchiver } from \"./ProjectArchiver\";\n\n/**\n * Use the Cloud Foundry API to orchestrae a blue green deployment.\n */\nexport class CloudFoundryBlueGreenDeployer implements Deployer<CloudFoundryInfo, CloudFoundryDeployment> {\n\n    constructor(private readonly projectLoader: ProjectLoader) {\n    }\n\n    private async getManifest(p: Project): Promise<Manifest> {\n        const manifestFile = await p.findFile(CloudFoundryManifestPath);\n        const manifestContent = await manifestFile.getContent();\n        return yaml.load(manifestContent);\n    }\n\n    public async deploy(da: DeployableArtifact,\n                        cfi: CloudFoundryInfo,\n                        log: ProgressLog,\n                        credentials: ProjectOperationCredentials,\n                        team: string): Promise<CloudFoundryDeployment[]> {\n        log.write(`Deploying ${da.id.url} to Cloud Foundry space '${cfi.space}'.`);\n        if (!cfi.api || !cfi.username || !cfi.password || !cfi.space) {\n            const msg = \"Cloud Foundry authentication information missing. See CloudFoundryTarget.ts\";\n            log.write(msg);\n            throw new Error(msg);\n        }\n        return this.projectLoader.doWithProject({credentials, id: da.id, readOnly: !da.cwd}, async project => {\n            const archiver = new ProjectArchiver(log);\n            const packageFile = await archiver.archive(project, da);\n            const manifest = await this.getManifest(project);\n            const cfClient = await initializeCloudFoundry(cfi);\n            const cfApi = new CloudFoundryApi(cfClient);\n            const pusher = new CloudFoundryPusher(cfApi, cfi.space);\n            const deployments: Array<Promise<CloudFoundryDeployment>> = manifest.applications.map(async manifestApp => {\n                const namer = new BlueGreenNamer(manifestApp.name);\n                const bger = new CloudFoundryBlueGreener(cfApi, pusher, namer, log);\n                await bger.cleanUpExistingBlueGreenApps();\n                const deployment = await bger.createNextAppWithRoutes(manifestApp, packageFile);\n                await bger.retireCurrentApp();\n                return deployment;\n            });\n            const deploymentsPromise = Promise.all(deployments);\n            // tslint:disable-next-line:no-floating-promises\n            deploymentsPromise.then(ds => {\n                log.write(`Successfully deployed ${ds.map(d => d.appName).join(\", \")}.`);\n                // tslint:disable-next-line:no-floating-promises\n                log.flush();\n            });\n            deploymentsPromise.catch(reason => {\n                log.write(`Failed to deploy: ${reason}`);\n                // tslint:disable-next-line:no-floating-promises\n                log.flush();\n            });\n            return deploymentsPromise;\n        });\n    }\n\n    public async findDeployments(id: RemoteRepoRef,\n                                 cfi: CloudFoundryInfo,\n                                 credentials: ProjectOperationCredentials): Promise<CloudFoundryDeployment[]> {\n        if (!cfi.api || !cfi.username || !cfi.password || !cfi.space) {\n            throw new Error(\"cloud foundry authentication information missing. See CloudFoundryTarget.ts\");\n        }\n        return this.projectLoader.doWithProject({credentials, id, readOnly: true}, async project => {\n            const manifest = await this.getManifest(project);\n            const cfClient = await initializeCloudFoundry(cfi);\n            const cfApi = new CloudFoundryApi(cfClient);\n            const pusher = new CloudFoundryPusher(cfApi, cfi.space);\n            const spaceGuid = await pusher.getSpaceGuid();\n            const appNames = manifest.applications.map( manifestApp => {\n                const namer = new BlueGreenNamer(manifestApp.name);\n                return [namer.getCurrentAppName(), namer.getPreviousAppName(), namer.getNextAppName()];\n            });\n            const existingAppNames = _.flatten(appNames).map(async n => {\n                const app = await cfApi.getApp(spaceGuid, n);\n                return !!app ? n : undefined;\n            });\n            const onlyExistingAppNames: string[] = _.compact(await Promise.all(existingAppNames));\n            return onlyExistingAppNames.map(appName => {\n                return {\n                    appName,\n                } as CloudFoundryDeployment;\n            });\n        });\n    }\n\n    public async undeploy(cfi: CloudFoundryInfo,\n                          deployment: CloudFoundryDeployment,\n                          log: ProgressLog): Promise<any> {\n        log.write(`Undeploying app ${cfi.space}:${deployment.appName} from Cloud Foundry ${cfi.description}`);\n        if (!cfi.api || !cfi.org || !cfi.username || !cfi.password || !cfi.space) {\n            const msg = \"Cloud Foundry authentication information missing. See CloudFoundryTarget.ts\";\n            log.write(msg);\n            throw new Error(msg);\n        }\n        const cfClient = await initializeCloudFoundry(cfi);\n        const cfApi = new CloudFoundryApi(cfClient);\n        const space = await cfApi.getSpaceByName(cfi.space);\n        const spaceGuid = space.metadata.guid;\n        const app = await cfApi.getApp(spaceGuid, deployment.appName);\n        if (app) {\n            return cfApi.deleteApp(app.metadata.guid);\n        }\n    }\n\n   public logInterpreter(log: string): InterpretedLog {\n        return {\n            relevantPart: log.split(\"\\n\").slice(-10).join(\"\\n\"),\n            message: \"Oh no!\",\n        };\n   }\n}\n"]}