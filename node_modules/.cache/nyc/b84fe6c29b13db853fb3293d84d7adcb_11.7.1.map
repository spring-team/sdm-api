{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/dry-run/OnDryRunBuildComplete.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/dry-run/OnDryRunBuildComplete.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAAoJ;AACpJ,sEAAwE;AAExE,mEAAoE;AACpE,sFAAoF;AAEpF,uDAA4D;AAC5D,oDAAyD;AAEzD;;GAEG;AAEH,IAAa,qBAAqB,GAAlC;IAKiB,MAAM,CAAC,KAAwD,EACxD,GAAmB,EACnB,MAAY;;YAC5B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAE5B,6BAA6B;YAC7B,MAAM,EAAE,GAAG,yBAAe,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAkB,CAAC;YAC9E,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAE7C,0BAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC3E,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,4BAAa,CAAC,CAAC;YAC5E,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,KAAK,KAAK,SAAS,EAAE,EAAE,2CAA2C;gBAChG,0BAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC5E,OAAO,2BAAO,CAAC;aAClB;YAED,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC3B,0BAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE,EAAE,CAAC,CAAC;gBAC3D,MAAM,EAAE,CAAC,gBAAgB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,WAAW,EAAC,EACjD,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,WAAW,EACxB,MAAM,EACN,QAAQ,CAAC,CAAC;gBACd,MAAM,mBAAY,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE;oBACvC,OAAO,EAAE,4BAAa;oBACtB,UAAU,EAAE,YAAY,CAAC,SAAS;oBAClC,WAAW,EAAE,YAAY,CAAC,WAAW;oBACrC,KAAK,EAAE,SAAS;iBACnB,CAAC,CAAC;aACN;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC/D,0BAAM,CAAC,IAAI,CAAC,sDAAsD,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;gBAChF,IAAI,IAAI,GAAG,cAAc,CAAC;gBAC1B,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,wBAAwB,CAAC;gBACvF,IAAI,IAAI,6BAA6B,EAAE,CAAC,GAAG,SAAS,MAAM,oBAAoB,MAAM,IAAI,CAAC;gBACzF,MAAM,mBAAU,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE;oBACrC,KAAK,EAAE,aAAa,YAAY,CAAC,WAAW,EAAE;oBAC9C,IAAI;iBACP,CAAC,CAAC;gBACH,MAAM,mBAAY,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE;oBACvC,OAAO,EAAE,4BAAa;oBACtB,UAAU,EAAE,YAAY,CAAC,SAAS;oBAClC,WAAW,EAAE,YAAY,CAAC,WAAW;oBACrC,KAAK,EAAE,SAAS;iBACnB,CAAC,CAAC;aACN;YACD,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAlDG;IADC,0BAAM,CAAC,2BAAO,CAAC,QAAQ,CAAC;;0DACY;AAH5B,qBAAqB;IADjC,gCAAY,CAAC,oCAAoC,EAAE,sBAAY,CAAC,0BAA0B,CAAC,CAAC;GAChF,qBAAqB,CAqDjC;AArDY,sDAAqB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Secret, Secrets, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { raiseIssue } from \"@atomist/automation-client/util/gitHub\";\nimport { DryRunContext } from \"../../../common/command/editor/dry-run/dryRunEditor\";\nimport { OnBuildCompleteForDryRun } from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { createStatus } from \"../../../util/github/ghub\";\n\n/**\n * React to to result of a dry run build to raise a PR or issue\n */\n@EventHandler(\"React to result of a dry run build\", subscription(\"OnBuildCompleteForDryRun\"))\nexport class OnDryRunBuildComplete implements HandleEvent<OnBuildCompleteForDryRun.Subscription> {\n\n    @Secret(Secrets.OrgToken)\n    private readonly githubToken: string;\n\n    public async handle(event: EventFired<OnBuildCompleteForDryRun.Subscription>,\n                        ctx: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const build = event.data.Build[0];\n        const commit = build.commit;\n\n        // TODO currently Github only\n        const id = toRemoteRepoRef(commit.repo, { sha: commit.sha }) as GitHubRepoRef;\n        const branch = build.commit.pushes[0].branch;\n\n        logger.debug(\"Assessing dry run for %j: Statuses=%j\", id, commit.statuses);\n        const dryRunStatus = commit.statuses.find(s => s.context === DryRunContext);\n        if (!dryRunStatus || dryRunStatus.state !== \"pending\") { // this could be any kind of pending, dunno\n            logger.debug(\"Not a dry run build on %j: Statuses=%j\", id, commit.statuses);\n            return Success;\n        }\n\n        if (build.status === \"passed\") {\n            logger.info(\"Raising PR for successful dry run on %j\", id);\n            await id.raisePullRequest({token: params.githubToken},\n                dryRunStatus.description,\n                dryRunStatus.description,\n                branch,\n                \"master\");\n            await createStatus(params.githubToken, id, {\n                context: DryRunContext,\n                target_url: dryRunStatus.targetUrl,\n                description: dryRunStatus.description,\n                state: \"success\",\n            });\n        } else if (build.status === \"failed\" || build.status === \"broken\") {\n            logger.info(\"Raising issue for failed dry run on %j on branch %s,\", id, branch);\n            let body = \"Details:\\n\\n\";\n            body += !!build.buildUrl ? `[Build log](${build.buildUrl})` : \"No build log available\";\n            body += `\\n\\n[Branch with failure](${id.url}/tree/${branch} \"Failing branch ${branch}\")`;\n            await raiseIssue(params.githubToken, id, {\n                title: `Failed to ${dryRunStatus.description}`,\n                body,\n            });\n            await createStatus(params.githubToken, id, {\n                context: DryRunContext,\n                target_url: dryRunStatus.targetUrl,\n                description: dryRunStatus.description,\n                state: \"failure\",\n            });\n        }\n        return Success;\n    }\n}\n"]}