{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/commands/disposeCommand.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/commands/disposeCommand.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAUoC;AACpC,sEAAmE;AACnE,oEAA0E;AAC1E,8FAA2F;AAC3F,oEAA6G;AAC7G,4EAAoG;AAGpG,IAAa,iBAAiB,GAA9B;CAgBC,CAAA;AAbG;IADC,0BAAM,CAAC,2BAAO,CAAC,SAAS,CAAC;;sDACC;AAG3B;IADC,mCAAe,CAAC,oCAAgB,CAAC,WAAW,CAAC;;gDACzB;AAGrB;IADC,mCAAe,CAAC,oCAAgB,CAAC,gBAAgB,CAAC;;+CAC/B;AAGpB;IADC,mCAAe,CAAC,oCAAgB,CAAC,wBAAwB,CAAC;;qDACjC;AAG1B;IADC,6BAAS,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;;qDACF;AAfjB,iBAAiB;IAD7B,uBAAU,EAAE;GACA,iBAAiB,CAgB7B;AAhBY,8CAAiB;AAkB9B,wBAA+B,KAA6B;IACxD,OAAO,8BAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAC7C,iBAAiB,EACjB,kBAAkB,EAClB,oCAAoC,EACpC,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC,CAAC;AACpD,CAAC;AAND,wCAMC;AAED,0BAA0B,KAA6B;IACnD,OAAO,CAAO,GAAmB,EAAE,aAAgC,EAAE,EAAE;QACnE,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;YAClD,OAAO,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,iEAAiE,CAAC;iBAC9F,IAAI,CAAC,2BAAO,CAAC,CAAC;SACtB;QACD,MAAM,QAAQ,GAAG,MAAM,kCAAqB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACjE,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC;QACtC,MAAM,GAAG,GAAG,wBAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE1C,MAAM,EAAE,GAAG,6BAAa,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAC,CAAC,CAAC;QACnG,MAAM,IAAI,GAAG,MAAM,+BAAkB,CAAC,GAAG,EAAE,EAAE,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;QAEzE,MAAM,eAAe,GAAG,MAAM,kCAAiB,CAAC,KAAK,EAAE;YACnD,OAAO,EAAE,GAAG;YACZ,WAAW,EAAE,EAAC,KAAK,EAAE,aAAa,CAAC,WAAW,EAAC;YAC/C,IAAI;SACP,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,8CAA8C,CAAC,CAAC;SACnF;QACD,OAAO,2BAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    HandleCommand,\n    HandlerContext,\n    MappedParameter,\n    MappedParameters,\n    Parameter,\n    Secret,\n    Secrets,\n    success,\n    Success,\n} from \"@atomist/automation-client\";\nimport { Parameters } from \"@atomist/automation-client/decorators\";\nimport { commandHandlerFrom } from \"@atomist/automation-client/onCommand\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { fetchDefaultBranchTip, fetchPushForCommit, tipOfBranch } from \"../events/delivery/goals/resetGoals\";\nimport { chooseAndSetGoals, ChooseAndSetGoalsRules } from \"../events/delivery/goals/SetGoalsOnPush\";\n\n@Parameters()\nexport class DisposeParameters {\n\n    @Secret(Secrets.UserToken)\n    public githubToken: string;\n\n    @MappedParameter(MappedParameters.GitHubOwner)\n    public owner: string;\n\n    @MappedParameter(MappedParameters.GitHubRepository)\n    public repo: string;\n\n    @MappedParameter(MappedParameters.GitHubRepositoryProvider)\n    public providerId: string;\n\n    @Parameter({required: true})\n    public areYouSure: string;\n}\n\nexport function disposeCommand(rules: ChooseAndSetGoalsRules): HandleCommand {\n    return commandHandlerFrom(disposeOfProject(rules),\n        DisposeParameters,\n        \"DisposeOfProject\",\n        \"Remove this project from existence\",\n        [\"dispose of this project\", \"exterminate\"]);\n}\n\nfunction disposeOfProject(rules: ChooseAndSetGoalsRules) {\n    return async (ctx: HandlerContext, commandParams: DisposeParameters) => {\n        if (commandParams.areYouSure.toLowerCase() !== \"yes\") {\n            return ctx.messageClient.respond(\"You didn't say 'yes' to 'are you sure?' so I won't do anything.\")\n                .then(success);\n        }\n        const repoData = await fetchDefaultBranchTip(ctx, commandParams);\n        const branch = repoData.defaultBranch;\n        const sha = tipOfBranch(repoData, branch);\n\n        const id = GitHubRepoRef.from({owner: commandParams.owner, repo: commandParams.repo, sha, branch});\n        const push = await fetchPushForCommit(ctx, id, commandParams.providerId);\n\n        const determinedGoals = await chooseAndSetGoals(rules, {\n            context: ctx,\n            credentials: {token: commandParams.githubToken},\n            push,\n        });\n        if (!determinedGoals) {\n            await ctx.messageClient.respond(\"I don't know how to dispose of this project.\");\n        }\n        return Success;\n    };\n}\n"]}