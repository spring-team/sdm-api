{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/local/jar/executableJarDeployer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/local/jar/executableJarDeployer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { spawn } from \"child_process\";\nimport { DeployableArtifact } from \"../../../../../spi/artifact/ArtifactStore\";\nimport { Deployer } from \"../../../../../spi/deploy/Deployer\";\nimport { Deployment } from \"../../../../../spi/deploy/Deployment\";\nimport { ProgressLog } from \"../../../../../spi/log/ProgressLog\";\nimport {DelimitedWriteProgressLogDecorator} from \"../../../../log/DelimitedWriteProgressLogDecorator\";\nimport { lastLinesLogInterpreter } from \"../../../goals/support/logInterpreters\";\nimport { DefaultLocalDeployerOptions, LocalDeployerOptions, SpawnedDeployment, StartupInfo } from \"../LocalDeployerOptions\";\nimport { LookupStrategy, ManagedDeployments, ManagedDeploymentTargetInfo } from \"../ManagedDeployments\";\n\n/**\n * Managed deployments\n */\nexport let managedExecutableJarDeployments: ManagedDeployments;\n\n/**\n * Start up an executable Jar on the same node as the automation client.\n * Not intended as a Paas, but for use during demos and development.\n * Always uses the same URL, whatever the branch and sha.\n * @param opts options\n */\nexport function executableJarDeployer(opts: LocalDeployerOptions): Deployer<ManagedDeploymentTargetInfo> {\n    if (!managedExecutableJarDeployments) {\n        logger.debug(\"Created new deployments record\");\n        managedExecutableJarDeployments = new ManagedDeployments(opts.lowerPort);\n    }\n    return new ExecutableJarDeployer({\n        ...DefaultLocalDeployerOptions,\n        ...opts,\n    });\n}\n\nclass ExecutableJarDeployer implements Deployer<ManagedDeploymentTargetInfo, Deployment> {\n\n    constructor(public opts: LocalDeployerOptions) {\n    }\n\n    public async findDeployments(id: RemoteRepoRef,\n                                 ti: ManagedDeploymentTargetInfo,\n                                 creds: ProjectOperationCredentials) {\n        const thisDeployment = this.deploymentFor(ti);\n        return thisDeployment ? [thisDeployment] : [];\n    }\n\n    public async undeploy(id: ManagedDeploymentTargetInfo, deployment: Deployment, log: ProgressLog): Promise<any> {\n        return managedExecutableJarDeployments.terminateIfRunning(id.managedDeploymentKey, LookupStrategy.service);\n    }\n\n    private deploymentFor(ti: ManagedDeploymentTargetInfo): Deployment {\n        const managed = managedExecutableJarDeployments.findDeployment(ti.managedDeploymentKey, LookupStrategy.service);\n        if (!managed) {\n            return undefined;\n        }\n        const port = managed.port;\n        const baseUrl = this.opts.baseUrl;\n        return {\n            endpoint: `${baseUrl}:${port}/${this.contextRoot(ti.managedDeploymentKey)}`,\n        };\n    }\n\n    private contextRoot(id: RemoteRepoRef) {\n        return `/${id.owner}/${id.repo}/staging`;\n    }\n\n    public async deploy(da: DeployableArtifact,\n                        ti: ManagedDeploymentTargetInfo,\n                        log: ProgressLog,\n                        credentials: ProjectOperationCredentials,\n                        atomistTeam: string): Promise<SpawnedDeployment[]> {\n        if (!da.filename) {\n            throw new Error(\"No filename in deployable artifact!\");\n        }\n        const port = await managedExecutableJarDeployments.findPort(ti.managedDeploymentKey, LookupStrategy.service, this.opts.baseUrl);\n        logger.info(\"Deploying app [%j] on port [%d] for team %s\", da, port, atomistTeam);\n        const startupInfo: StartupInfo = {\n            port,\n            atomistTeam,\n            contextRoot: this.contextRoot(da.id),\n        };\n        await managedExecutableJarDeployments.terminateIfRunning(ti.managedDeploymentKey, LookupStrategy.service);\n        const childProcess = spawn(\"java\",\n            [\n                \"-jar\",\n                da.filename,\n            ].concat(this.opts.commandLineArgumentsFor(startupInfo)),\n            {\n                cwd: da.cwd,\n            });\n        const newLineDelimitedLog = new DelimitedWriteProgressLogDecorator(log, \"\\n\");\n        childProcess.stdout.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n        childProcess.stderr.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n\n        const deployment = {\n            childProcess,\n            endpoint: `${this.opts.baseUrl}:${port}/${this.contextRoot(ti.managedDeploymentKey)}`,\n        };\n        managedExecutableJarDeployments.recordDeployment({\n            id: ti.managedDeploymentKey,\n            port,\n            childProcess,\n            deployment,\n            lookupStrategy: LookupStrategy.service,\n        });\n\n        return [await new Promise<SpawnedDeployment>((resolve, reject) => {\n            childProcess.stdout.addListener(\"data\", async what => {\n                if (!!what && this.opts.successPatterns.some(successPattern => successPattern.test(what.toString()))) {\n                    resolve(deployment);\n                }\n            });\n            childProcess.addListener(\"exit\", () => {\n                reject(new Error(\"ExecutableJarDeployer: We should have found success message pattern by now!!\"));\n            });\n            childProcess.addListener(\"error\", reject);\n        })];\n    }\n\n    public logInterpreter = lastLinesLogInterpreter(\"Executable jar deployment\");\n}\n"]}