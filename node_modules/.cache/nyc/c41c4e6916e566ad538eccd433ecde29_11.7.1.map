{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/slackProgressLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/slackProgressLog.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH,8DAA2E;AAE3E;;;;;;;GAOG;AACH,0BAAiC,IAAY,EAAE,WAAwB,EAAE,GAAmB;IACxF,MAAM,GAAG,GAAG,oCAAkB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IACjD,OAAO;QACH,IAAI;QACJ,WAAW,EAAE,GAAS,EAAE,gDAAC,OAAA,CAAC,CAAC,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA,GAAA;QAClF,KAAK,CAAC,GAAG;YACL,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QACD,KAAK,KAAK,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACrC,KAAK,KAAK,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;KACxC,CAAC;AACN,CAAC;AAXD,4CAWC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext } from \"@atomist/automation-client\";\nimport { ProgressLog } from \"../../spi/log/ProgressLog\";\nimport { addressChannelsFor, HasChannels } from \"../slack/addressChannels\";\n\n/**\n * Stream the ProgressLog output to any Slack channels associated\n * with the current model element (such a repo)\n * @param name name for the log. Should relate to the activity we're logging\n * @param {HasChannels} hasChannels\n * @param {HandlerContext} ctx\n * @return {ProgressLog}\n */\nexport function slackProgressLog(name: string, hasChannels: HasChannels, ctx: HandlerContext): ProgressLog {\n    const add = addressChannelsFor(hasChannels, ctx);\n    return {\n        name,\n        isAvailable: async () => !!hasChannels.channels && hasChannels.channels.length > 0,\n        write(msg) {\n            return add(msg);\n        },\n        flush() { return Promise.resolve(); },\n        close() { return Promise.resolve(); },\n    };\n}\n"]}