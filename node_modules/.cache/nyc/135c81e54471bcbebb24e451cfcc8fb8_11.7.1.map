{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/docker/executeDockerBuild.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/docker/executeDockerBuild.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    HandlerContext,\n} from \"@atomist/automation-client\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { StatusForExecuteGoal } from \"../../../typings/types\";\nimport { spawnAndWatch } from \"../../../util/misc/spawned\";\nimport { postLinkImageWebhook } from \"../../../util/webhook/ImageLink\";\nimport { ProjectLoader } from \"../../repo/ProjectLoader\";\nimport { branchFromCommit } from \"../build/executeBuild\";\nimport { readSdmVersion } from \"../build/local/projectVersioner\";\nimport { ExecuteGoalResult } from \"../goals/ExecuteGoalResult\";\nimport {\n    ExecuteGoalWithLog,\n    PrepareForGoalExecution,\n    RunWithLogContext,\n} from \"../goals/support/reportGoalError\";\n\nexport interface DockerOptions {\n    registry: string;\n    user: string;\n    password: string;\n\n    dockerfileFinder?: (p: GitProject) => Promise<string>;\n}\n\nexport type DockerImageNameCreator = (p: GitProject,\n                                      status: StatusForExecuteGoal.Fragment,\n                                      options: DockerOptions,\n                                      ctx: HandlerContext) => Promise<{ registry: string, name: string, version: string }>;\n\n/**\n * Execute a Docker build for the project available from provided projectLoader\n * @param {ProjectLoader} projectLoader\n * @param {DockerImageNameCreator} imageNameCreator\n * @param {DockerOptions} options\n * @returns {ExecuteGoalWithLog}\n */\nexport function executeDockerBuild(projectLoader: ProjectLoader,\n                                   imageNameCreator: DockerImageNameCreator,\n                                   preparations: PrepareForGoalExecution[] = [],\n                                   options: DockerOptions): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const { status, credentials, id, context, progressLog } = rwlc;\n\n        return projectLoader.doWithProject({ credentials, id, context, readOnly: false }, async p => {\n\n            for (const preparation of preparations) {\n                const pResult = await preparation(p, rwlc);\n                if (pResult.code !== 0) {\n                    return pResult;\n                }\n            }\n\n            const opts = {\n                cwd: p.baseDir,\n            };\n\n            const spOpts = {\n                errorFinder: code => code !== 0,\n            };\n\n            const imageName = await imageNameCreator(p, status, options, context);\n            const image = `${imageName.registry}/${imageName.name}:${imageName.version}`;\n            const dockerfilePath = await (options.dockerfileFinder ? options.dockerfileFinder(p) : \"Dockerfile\");\n\n            const loginArgs: string[] = [\"login\", \"--username\", options.user, \"--password\", options.password];\n            if (/[^A-Za-z0-9]/.test(options.registry)) {\n                loginArgs.push(options.registry);\n            }\n\n            // 1. run docker login\n            let result = await spawnAndWatch(\n                {\n                    command: \"docker\",\n                    args: loginArgs,\n                },\n                opts,\n                progressLog,\n                spOpts);\n\n            if (result.code !== 0) {\n                return result;\n            }\n\n            // 2. run docker build\n            result = await spawnAndWatch(\n                {\n                    command: \"docker\",\n                    args: [\"build\", \".\", \"-f\", dockerfilePath, \"-t\", image],\n                },\n                opts,\n                progressLog,\n                spOpts);\n\n            if (result.code !== 0) {\n                return result;\n            }\n\n            // 3. run docker push\n            result = await spawnAndWatch(\n                {\n                    command: \"docker\",\n                    args: [\"push\", image],\n                },\n                opts,\n                progressLog,\n                spOpts);\n\n            if (result.code !== 0) {\n                return result;\n            }\n\n            // 4. create image link\n            if (await postLinkImageWebhook(\n                status.commit.repo.owner,\n                status.commit.repo.name,\n                status.commit.sha,\n                image,\n                context.teamId)) {\n                return result;\n            } else {\n                return { code: 1, message: \"Image link failed\" };\n            }\n        });\n    };\n}\n\nexport const DefaultDockerImageNameCreator: DockerImageNameCreator = async (p, status, options, context) => {\n    const name = p.name;\n    const commit = status.commit;\n    const version = await readSdmVersion(commit.repo.owner, commit.repo.name,\n        commit.repo.org.provider.providerId, commit.sha, branchFromCommit(commit), context);\n    return {\n        registry: options.registry,\n        name,\n        version,\n    };\n};\n"]}