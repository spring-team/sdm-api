{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/deployPushTestsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/deployPushTestsTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { guid } from \"@atomist/automation-client/internal/util/string\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\n\nimport * as assert from \"power-assert\";\nimport { PushListenerInvocation } from \"../../../../src/common/listener/PushListener\";\nimport { IsDeployEnabled } from \"../../../../src/common/listener/support/pushtest/deployPushTests\";\n\ndescribe(\"deployPushTests tests thing\", () => {\n\n    describe(\"IsDeployEnabled\", () => {\n\n        it(\"should be disabled by default and correctly set parameters on the query\", async () => {\n             const pi = {\n                 context: {\n                     graphClient: {\n                         query(options: { query: string, variables: any, options: any } ) {\n                             assert.equal(options.variables.owner, \"atomist\");\n                             assert.equal(options.variables.repo, \"github-sdm\");\n                             return {\n                                 SdmDeployEnablement: [],\n                             };\n                         },\n                     },\n                 },\n                 push: {\n                     repo: {\n                         owner: \"atomist\",\n                         name: \"github-sdm\",\n                     },\n                 },\n                 id: GitHubRepoRef.from({owner: \"atomist\", repo: \"github-sdm\"}),\n             };\n             const result = await IsDeployEnabled.mapping(pi as any as PushListenerInvocation);\n             assert(!result);\n        });\n\n        it(\"should be enabled correctly via setting\", async () => {\n            const pi = {\n                context: {\n                    graphClient: {\n                        query(options: { query: string, variables: any, options: any } ) {\n                            return {\n                                SdmDeployEnablement: [ {\n                                    id: guid(),\n                                    state: \"requested\",\n                                    owner: \"atomist\",\n                                    repo: \"github-sdm\",\n                                    providerId: \"123456\",\n                                }],\n                            };\n                        },\n                    },\n                },\n                push: {\n                    repo: {\n                        owner: \"atomist\",\n                        name: \"github-sdm\",\n                    },\n                },\n                id: GitHubRepoRef.from({owner: \"atomist\", repo: \"github-sdm\"}),\n\n            };\n            const result = await IsDeployEnabled.mapping(pi as any as PushListenerInvocation);\n            assert(result);\n        });\n\n        it(\"should be disabled correctly via setting\", async () => {\n            const pi = {\n                context: {\n                    graphClient: {\n                        query(options: { query: string, variables: any, options: any } ) {\n                            return {\n                                SdmDeployEnablement: [ {\n                                    id: guid(),\n                                    state: \"disabled\",\n                                    owner: \"atomist\",\n                                    repo: \"github-sdm\",\n                                    providerId: \"123456\",\n                                }],\n                            };\n                        },\n                    },\n                },\n                push: {\n                    repo: {\n                        owner: \"atomist\",\n                        name: \"github-sdm\",\n                    },\n                },\n                id: GitHubRepoRef.from({owner: \"atomist\", repo: \"github-sdm\"}),\n            };\n            const result = await IsDeployEnabled.mapping(pi as any as PushListenerInvocation);\n            assert(!result);\n        });\n    });\n\n});\n"]}