{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/computeFingerprints.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/computeFingerprints.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAEpD,4BAA4B;AAK5B,6BAA0C,GAAiC,EACjC,cAAwD;;QAC9F,MAAM,OAAO,GAAoB,MAAM,OAAO,CAAC,GAAG,CAC9C,cAAc,CAAC,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;YAC1B,0BAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;YACxB,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAA,CAAC,CACL,CAAC;QACF,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;CAAA;AAVD,kDAUC;AAED,uBAA8B,CAAM;IAChC,MAAM,EAAE,GAAG,CAAgB,CAAC;IAC5B,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC;AACpC,CAAC;AAHD,sCAGC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { Fingerprint } from \"@atomist/automation-client/project/fingerprint/Fingerprint\";\nimport * as _ from \"lodash\";\nimport { PushImpactListenerInvocation } from \"../../../..\";\nimport { PushReaction } from \"../PushReactionRegistration\";\nimport { FingerprinterResult } from \"./FingerprinterRegistration\";\n\nexport async function computeFingerprints(cri: PushImpactListenerInvocation,\n                                          fingerprinters: Array<PushReaction<FingerprinterResult>>): Promise<Fingerprint[]> {\n    const results: Fingerprint[][] = await Promise.all(\n        fingerprinters.map(async fp => {\n            logger.info(\"Using fingerprinter %s to fingerprint %j\", fp.name, cri.id);\n            const f = await fp(cri);\n            return isFingerprint(f) ? [f] : f;\n        }),\n    );\n    return _.flatten(results);\n}\n\nexport function isFingerprint(a: any): a is Fingerprint {\n    const fq = a as Fingerprint;\n    return !!fq.sha && !!fq.version;\n}\n"]}