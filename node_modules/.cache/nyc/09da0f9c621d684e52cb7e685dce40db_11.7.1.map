{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/commonPushTestsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/commonPushTestsTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,4FAAyF;AAEzF,uCAAuC;AACvC,yCAAuD;AAEvD,sGAA8G;AAE9G,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAE7B,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QAErB,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;YAChD,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,CAAC,GAAG,MAAM,yBAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YACxF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE,GAAS,EAAE;YAC9B,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,MAAM,yBAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YACvF,MAAM,CAAC,CAAC,CAAC,CAAC;QACd,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;YAC3C,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,CAAC,GAAG,MAAM,mCAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YAChG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAS,EAAE;YACpC,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,0BAA0B,EAAE,OAAO,EAAE,uBAAuB,EAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,GAAG,MAAM,mCAAiB,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YAC3H,MAAM,CAAC,CAAC,CAAC,CAAC;QACd,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAS,EAAE;YACvD,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,wBAAwB,EAAE,OAAO,EAAE,uBAAuB,EAAC,CAAC,CAAC;YACxG,MAAM,CAAC,GAAG,MAAM,mCAAiB,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YAC5H,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAElC,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;YAChD,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,CAAC,GAAG,MAAM,0BAAoB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YACjG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,GAAS,EAAE;YAClC,MAAM,OAAO,GAAG,iCAAe,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,MAAM,0BAAoB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YAChG,MAAM,CAAC,CAAC,CAAC,CAAC;YACV,MAAM,EAAE,GAAG,MAAM,0BAAoB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,OAAO,EAAkC,CAAC,CAAC;YAClG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\n\nimport * as assert from \"power-assert\";\nimport { hasFileWithExtension } from \"../../../../src\";\nimport { PushListenerInvocation } from \"../../../../src/common/listener/PushListener\";\nimport { hasFile, hasFileContaining } from \"../../../../src/common/listener/support/pushtest/commonPushTests\";\n\ndescribe(\"commonPushTests\", () => {\n\n    describe(\"hasFile\", () => {\n\n        it(\"should not find file in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await hasFile(\"whatever\").mapping({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find file\", async () => {\n            const project = InMemoryProject.of({ path: \"pom.xml\", content: \"<xml>\"});\n            const r = await hasFile(\"pom.xml\").mapping({project} as any as PushListenerInvocation);\n            assert(r);\n        });\n    });\n\n    describe(\"hasFileContaining\", () => {\n\n        it(\"should not find in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await hasFileContaining(\"x\", /y/).mapping({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find containing\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.java\", content: \"public class Thing {}\"});\n            const r = await hasFileContaining(\"src/main/java/Thing.java\", /class/).mapping({project} as any as PushListenerInvocation);\n            assert(r);\n        });\n\n        it(\"should not find whe file does not contain\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.kt\", content: \"public class Thing {}\"});\n            const r = await hasFileContaining(\"src/main/java/Thing.java\", /xclass/).mapping({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n    });\n\n    describe(\"hasFileWithExtension\", () => {\n\n        it(\"should not find file in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await hasFileWithExtension(\"java\").mapping({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find one file\", async () => {\n            const project = InMemoryProject.of({ path: \"pom.xml\", content: \"<xml>\"});\n            const r = await hasFileWithExtension(\"xml\").mapping({project} as any as PushListenerInvocation);\n            assert(r);\n            const r2 = await hasFileWithExtension(\"java\").mapping({project} as any as PushListenerInvocation);\n            assert(!r2);\n        });\n    });\n\n});\n"]}