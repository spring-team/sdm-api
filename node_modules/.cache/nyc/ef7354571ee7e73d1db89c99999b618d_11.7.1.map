{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/PushReactionRegistration.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/PushReactionRegistration.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAKH;;;GAGG;AACH,IAAY,oBAGX;AAHD,WAAY,oBAAoB;IAC5B,0CAAkB,CAAA;IAClB,oEAA4C,CAAA;AAChD,CAAC,EAHW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAG/B;AAwBD,oCAAuC,CAAgC;IACnE,MAAM,KAAK,GAAG,CAA0B,CAAC;IACzC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;AAC1C,CAAC;AAED,oCAA2C,GAAkC;IACzE,OAAO,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,IAAI,EAAE,mBAAmB;QACzB,MAAM,EAAE,GAAG;KACd,CAAC;AACN,CAAC;AALD,gEAKC;AAaD;;GAEG;AACH,6BAAuC,aAAiD,EACjD,GAAiC;IACpE,OAAO,OAAO,CAAC,GAAG,CACd,aAAa,CAAC,GAAG,CAAC,CAAM,CAAC,EAAC,EAAE,gDAAC,OAAA,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAI,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA,GAAA,CAAC,CAAC;SAC5F,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC;AALD,kDAKC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PushImpactListenerInvocation } from \"../../listener/PushImpactListener\";\nimport { PushRegistration } from \"../../listener/PushRegistration\";\n\n/**\n * A code action response that affects delivery:\n * failing the current flow or requiring approval.\n */\nexport enum PushReactionResponse {\n    failGoals = \"fail\",\n    requireApprovalToProceed = \"requireApproval\",\n}\n\n/**\n * Optional PushReactionResponse included in a return value.\n */\nexport interface HasCodeActionResponse {\n    response?: PushReactionResponse;\n}\n\n/**\n * Reaction on a push, with the code available.\n * Can optionally return a response that\n * determines whether to ask for approval or terminate current delivery flow.\n */\nexport type PushReaction<R> = (i: PushImpactListenerInvocation) => Promise<R & HasCodeActionResponse>;\n\n/**\n * Used to register actions on a push that can return any type.\n * Use ReviewerRegistration if you want to return a structured type.\n */\nexport type PushReactionRegistration<R = any> = PushRegistration<PushReaction<R>>;\n\nexport type PushReactionRegisterable<R = any> = PushReactionRegistration | PushReaction<R>;\n\nfunction isPushReactionRegistration<R>(a: PushReactionRegisterable<any>): a is PushReactionRegistration {\n    const maybe = a as PushRegistration<any>;\n    return !!maybe.name && !!maybe.action;\n}\n\nexport function toPushReactionRegistration(prr: PushReactionRegisterable<any>): PushReactionRegistration {\n    return isPushReactionRegistration(prr) ? prr : {\n        name: \"Raw push reaction\",\n        action: prr,\n    };\n}\n\n/**\n * Base options object for registrations that process selective files\n */\nexport interface SelectiveCodeActionOptions {\n\n    /**\n     * Run only on affected files?\n     */\n    considerOnlyChangedFiles: boolean;\n}\n\n/**\n * Compute the relevant actions for this push\n */\nexport function relevantCodeActions<R>(registrations: Array<PushReactionRegistration<R>>,\n                                       cri: PushImpactListenerInvocation): Promise<Array<PushReactionRegistration<R>>> {\n    return Promise.all(\n        registrations.map(async t => (!t.pushTest || await t.pushTest.mapping(cri)) ? t : undefined))\n        .then(elts => elts.filter(x => !!x));\n}\n"]}