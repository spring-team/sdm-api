{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/LoggingProgressLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/LoggingProgressLog.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD;;GAEG;AACH;IAII,YAAmB,IAAY,EAAmB,QAA0B,OAAO;QAAhE,SAAI,GAAJ,IAAI,CAAQ;QAAmB,UAAK,GAAL,KAAK,CAA4B;QAF5E,QAAG,GAAW,EAAE,CAAC;IAGxB,CAAC;IAEM,KAAK,CAAC,KAAa;QACtB,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAChD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC5B;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC5B;QACD,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;QACjB,QAAQ,IAAI,CAAC,KAAK,EAAE;YAChB,KAAK,MAAM;gBACP,0BAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClB,MAAM;YACV;gBACI,0BAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACnB,MAAM;SACb;IACL,CAAC;IAEY,WAAW;;YACpB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;CAEJ;AAtCD,gDAsCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProgressLog } from \"../../spi/log/ProgressLog\";\n\n/**\n * Progress log to logger\n */\nexport class LoggingProgressLog implements ProgressLog {\n\n    public log: string = \"\";\n\n    constructor(public name: string, private readonly level: \"debug\" | \"info\" = \"debug\") {\n    }\n\n    public write(pWhat: string) {\n        let what = pWhat;\n        if (what.endsWith(\"\\n\\r\") || what.endsWith(\"\\r\\n\")) {\n            what = what.slice(0, -2);\n        }\n        if (what.endsWith(\"\\n\")) {\n            what = what.slice(0, -1);\n        }\n        this.log += what;\n        switch (this.level) {\n            case \"info\" :\n                logger.info(what);\n                break;\n            default:\n                logger.debug(what);\n                break;\n        }\n    }\n\n    public async isAvailable() {\n        return true;\n    }\n\n    public flush() {\n        return Promise.resolve();\n    }\n\n    public close() {\n        return Promise.resolve();\n    }\n\n}\n"]}