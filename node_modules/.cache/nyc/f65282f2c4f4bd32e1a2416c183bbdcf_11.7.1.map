{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/executeFingerprinting.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/executeFingerprinting.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AACpD,kEAA8D;AAG9D,8EAA2E;AAI3E,8FAA2F;AAC3F,0EAAkE;AAClE,+DAA4D;AAG5D;;;;;GAKG;AACH,+BAAsC,aAA4B,EAC5B,cAA2C,EAC3C,SAAgC;IAClE,OAAO,CAAO,IAAuB,EAAE,EAAE;QACrC,MAAM,EAAC,EAAE,EAAE,WAAW,EAAE,OAAO,EAAC,GAAG,IAAI,CAAC;QACxC,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,OAAO,kBAAO,CAAC;SAClB;QAED,0BAAM,CAAC,KAAK,CAAC,iDAAiD,EAAE,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3F,MAAM,aAAa,CAAC,aAAa,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,CAAM,OAAO,EAAC,EAAE;YACjF,MAAM,GAAG,GAAG,MAAM,uEAAkC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,sBAAsB,GAAgC,MAAM,8CAAmB,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC3G,0BAAM,CAAC,IAAI,CAAC,oDAAoD,EAC5D,sBAAsB,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC1E,MAAM,YAAY,GAAkB,MAAM,yCAAmB,CAAC,GAAG,EAAE,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAChH,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,iCAAe,CAAC,EAAmB,EAAE,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACnG,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/E,EAAE;gBACF,OAAO;gBACP,WAAW;gBACX,eAAe,EAAE,GAAG,CAAC,eAAe;gBACpC,WAAW;aACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAA,CAAC,CAAC;QACH,OAAO,kBAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC;AA3BD,sDA2BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { Success } from \"@atomist/automation-client/Handlers\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { Fingerprint } from \"@atomist/automation-client/project/fingerprint/Fingerprint\";\nimport { sendFingerprint } from \"../../../../util/webhook/sendFingerprint\";\nimport { FingerprintListener } from \"../../../listener/FingerprintListener\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../../goals/support/reportGoalError\";\nimport { createPushImpactListenerInvocation } from \"../createPushImpactListenerInvocation\";\nimport { relevantCodeActions } from \"../PushReactionRegistration\";\nimport { computeFingerprints } from \"./computeFingerprints\";\nimport { FingerprinterRegistration } from \"./FingerprinterRegistration\";\n\n/**\n * Execute fingerprinting\n * @param projectLoader project loader\n * @param {FingerprinterRegistration} fingerprinters\n * @param listeners listeners to fingerprints\n */\nexport function executeFingerprinting(projectLoader: ProjectLoader,\n                                      fingerprinters: FingerprinterRegistration[],\n                                      listeners: FingerprintListener[]): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext) => {\n        const {id, credentials, context} = rwlc;\n        if (fingerprinters.length === 0) {\n            return Success;\n        }\n\n        logger.debug(\"About to fingerprint %j using %d fingerprinters\", id, fingerprinters.length);\n        await projectLoader.doWithProject({credentials, id, readOnly: true}, async project => {\n            const cri = await createPushImpactListenerInvocation(rwlc, project);\n            const relevantFingerprinters: FingerprinterRegistration[] = await relevantCodeActions(fingerprinters, cri);\n            logger.info(\"Will invoke %d eligible fingerprinters of %d to %j\",\n                relevantFingerprinters.length, fingerprinters.length, cri.project.id);\n            const fingerprints: Fingerprint[] = await computeFingerprints(cri, relevantFingerprinters.map(fp => fp.action));\n            fingerprints.map(fingerprint => sendFingerprint(id as GitHubRepoRef, fingerprint, context.teamId));\n            await Promise.all(listeners.map(l => Promise.all(fingerprints.map(fingerprint => l({\n                id,\n                context,\n                credentials,\n                addressChannels: cri.addressChannels,\n                fingerprint,\n            })))));\n        });\n        return Success;\n    };\n}\n"]}