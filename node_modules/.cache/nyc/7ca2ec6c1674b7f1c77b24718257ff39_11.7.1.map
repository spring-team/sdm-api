{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/mavenLogInterpreter.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/maven/mavenLogInterpreter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { Microgrammar } from \"@atomist/microgrammar/Microgrammar\";\nimport { Float, Integer } from \"@atomist/microgrammar/Primitives\";\nimport { InterpretLog } from \"../../../../../spi/log/InterpretedLog\";\nimport { BuildInfo, TestStatus } from \"../../BuildInfo\";\n\nexport const MavenLogInterpreter: InterpretLog<MavenInfo> = log => {\n    const timingInfo = timingGrammar.firstMatch(log);\n    const data: MavenInfo = {\n        timeMillis: timingInfo ? timingInfo.seconds * 1000 : undefined,\n        success: log.includes(\"BUILD SUCCESS\\----\"),\n        testInfo: testSummaryGrammar.firstMatch(log) || undefined,\n    };\n    if (!log) {\n        logger.warn(\"Log was empty\");\n        return {\n            relevantPart: \"\",\n            message: \"Failed with empty log\",\n            includeFullLog: false,\n            data,\n        };\n    }\n\n    const maybeFailedToStart = appFailedToStart(log);\n    if (maybeFailedToStart) {\n        return {\n            relevantPart: maybeFailedToStart,\n            message: \"Application failed to start\",\n            includeFullLog: false,\n            data,\n        };\n    }\n\n    // default to maven errors\n    const maybeMavenErrors = mavenErrors(log);\n    if (maybeMavenErrors) {\n        logger.info(\"Recognized Maven error\");\n        return {\n            relevantPart: maybeMavenErrors,\n            message: \"Maven errors\",\n            includeFullLog: false,\n            data,\n        };\n    }\n\n    // or it could be this problem here\n    if (log.match(/Error checking out artifact/)) {\n        logger.info(\"Recognized artifact error\");\n        return {\n            relevantPart: log,\n            message: \"I lost the local cache. Please rebuild\",\n            includeFullLog: false,\n            data,\n        };\n    }\n\n    logger.info(\"Did not find anything to recognize in the log\");\n    return {\n        relevantPart: \"\",\n        message: \"Unknown error\",\n        data,\n    };\n};\n\nfunction appFailedToStart(log: string) {\n    const lines = log.split(\"\\n\");\n    const failedToStartLine = lines.indexOf(\"APPLICATION FAILED TO START\");\n    if (failedToStartLine < 1) {\n        return undefined;\n    }\n    const likelyLines = lines.slice(failedToStartLine + 3, failedToStartLine + 10);\n    return likelyLines.join(\"\\n\");\n}\n\nexport type MavenInfo = BuildInfo;\n\nfunction mavenErrors(log: string): string | undefined {\n    const relevantPart = log.split(\"\\n\")\n        .filter(l => l.startsWith(\"[ERROR]\"))\n        .map(l => l.replace(\"[ERROR] \", \"\"))\n        .join(\"\\n\");\n    if (!relevantPart) {\n        return;\n    }\n    return relevantPart;\n}\n\n// Microgrammars...\n\nconst timingGrammar = Microgrammar.fromString<{ seconds: number }>(\"Total time: ${seconds} s\", {\n    seconds: Float,\n});\n\n/**\n * Microgrammar for Maven test output\n * @type {Microgrammar<MavenInfo>}\n */\nconst testSummaryGrammar = Microgrammar.fromString<TestStatus>(\n    \"Tests run: ${testsRun}, Failures: ${failingTests}, Errors: ${errors}, Skipped: ${pendingTests}\",\n    {\n        testsRun: Integer,\n        failingTests: Integer,\n        pendingTests: Integer,\n        errors: Integer,\n    });\n"]}