{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/NewBranchWithStatus.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/NewBranchWithStatus.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAQpD,uDAAoE;AAEpE;;GAEG;AACH;IAEI,YAAmB,MAAc,EACd,OAAe,EACL,KAAkC,EAClC,MAAc;QAHxB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAQ;QACL,UAAK,GAAL,KAAK,CAA6B;QAClC,WAAM,GAAN,MAAM,CAAQ;QACvC,0BAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAEY,YAAY,CAAC,CAAU;;YAChC,IAAI;gBACA,MAAM,SAAS,GAAG,MAAO,CAAgB,CAAC,SAAS,EAAE,CAAC;gBACtD,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;gBAC1B,IAAI,CAAC,GAAG,EAAE;oBACN,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;iBAC3C;gBACD,0BAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC1E,OAAO,mBAAY,CAAC,IAAI,CAAC,KAAK,EAAE,kBACrB,CAAC,CAAC,EAAE,IACP,GAAG,GACW,EAClB,IAAI,CAAC,MAAM,CAAC,CAAC;aACpB;YAAC,OAAO,GAAG,EAAE;gBACV,0BAAM,CAAC,IAAI,CAAC,0DAA0D,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;aACjF;QACL,CAAC;KAAA;CACJ;AA1BD,kDA0BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport {\n    ProjectOperationCredentials,\n} from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { BranchCommit } from \"@atomist/automation-client/operations/edit/editModes\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { createStatus, Status } from \"../../../../util/github/ghub\";\n\n/**\n * Create a new branch, setting a GitHub commit status\n */\nexport class NewBranchWithStatus implements BranchCommit {\n\n    constructor(public branch: string,\n                public message: string,\n                private readonly creds: ProjectOperationCredentials,\n                private readonly status: Status) {\n        logger.info(\"Created NewBranchWithStatus: %j\", this);\n    }\n\n    public async afterPersist(p: Project): Promise<any> {\n        try {\n            const gitStatus = await (p as GitProject).gitStatus();\n            const sha = gitStatus.sha;\n            if (!sha) {\n                throw new Error(\"Sha is not available\");\n            }\n            logger.info(\"Setting status %j on sha %s for %j\", this.status, sha, p.id);\n            return createStatus(this.creds, {\n                    ...p.id,\n                    sha,\n                } as GitHubRepoRef,\n                this.status);\n        } catch (err) {\n            logger.warn(\"Unable to get git status for %j. Possibly a deleted repo\", p.id);\n        }\n    }\n}\n"]}