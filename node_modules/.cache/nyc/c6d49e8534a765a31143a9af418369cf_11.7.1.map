{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/WriteToAllProgressLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/log/WriteToAllProgressLog.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAGpD;;GAEG;AACH;IAII,YAAmB,IAAY,EAAE,IAAiB,EAAE,IAAiB,EAAE,GAAG,MAAqB;QAA5E,SAAI,GAAJ,IAAI,CAAQ;QAC3B,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAEY,WAAW;;YACpB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEM,KAAK,CAAC,IAAY;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,0BAAM,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;YACrE,OAAO;SACV;QACD,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,GAAG;QACH,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC;QACxD,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;IAC7C,CAAC;IAED,IAAI,GAAG;QACH,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5C,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;IAC7C,CAAC;CACJ;AArCD,sDAqCC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { ProgressLog } from \"../../spi/log/ProgressLog\";\n\n/**\n * Write to multiple progress logs, exposing them as one.\n */\nexport class WriteToAllProgressLog implements ProgressLog {\n\n    private readonly logs: ProgressLog[];\n\n    constructor(public name: string, log1: ProgressLog, log2: ProgressLog, ...others: ProgressLog[]) {\n        this.logs = [log1, log2].concat(others);\n    }\n\n    public async isAvailable() {\n        return true;\n    }\n\n    public write(what: string) {\n        this.logs.forEach(log => log.write(what));\n    }\n\n    public flush() {\n        return Promise.all(this.logs.map(log => log.flush()));\n    }\n\n    public close() {\n        if (!this.logs) {\n            logger.error(\"This is unexpected! How did I get here without logs?\");\n            return;\n        }\n        return Promise.all(this.logs.map(log => log.close()));\n    }\n\n    get log(): string {\n        const hasLog = this.logs.find(l => l.log !== undefined);\n        return !!hasLog ? hasLog.log : undefined;\n    }\n\n    get url(): string {\n        const hasUrl = this.logs.find(l => !!l.url);\n        return !!hasUrl ? hasUrl.url : undefined;\n    }\n}\n"]}