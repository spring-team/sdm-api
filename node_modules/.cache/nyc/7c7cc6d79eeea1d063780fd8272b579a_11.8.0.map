{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/machineFactory.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/machineFactory.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,uEAA2E;AAC3E,+EAAmF;AAEnF,oEAAwE;AAGxE,qFAAkF;AAElF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,wBAA+B,IAAY,EACZ,IAAoC,EACpC,GAAG,WAA6C;IAC3E,MAAM,OAAO,GAAG,IAAI,uDAA0B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3D,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC7C,OAAO,OAAO,CAAC,qBAAqB,CAChC,kCAAmB,CAAC,OAAO,CAAC,EAC5B,sCAAqB,CAAC,OAAO,CAAC,EAC9B,8BAAiB,CAAC,OAAO,CAAC,CAC7B,CAAC;AACN,CAAC;AAVD,wCAUC","sourcesContent":["import * as _ from \"lodash\";\nimport { createRepoHandler } from \"../common/command/generator/createRepo\";\nimport { listGeneratorsHandler } from \"../common/command/generator/listGenerators\";\nimport { GoalSetter } from \"../common/listener/GoalSetter\";\nimport { selfDescribeHandler } from \"../handlers/commands/SelfDescribe\";\nimport { SoftwareDeliveryMachine } from \"./SoftwareDeliveryMachine\";\nimport { SoftwareDeliveryMachineOptions } from \"./SoftwareDeliveryMachineOptions\";\nimport { TheSoftwareDeliveryMachine } from \"./support/TheSoftwareDeliveryMachine\";\n\n/**\n * Create a **Software Delivery Machine** with default predefined goals.\n * Combines commands and delivery event handling using _goals_.\n *\n * Goals and goal \"implementations\" can be defined by users.\n * However, certain well known goals are built into the DefaultSoftwareDeliveryMachine\n * for convenience, with their own associated listeners.\n *\n * Well known goal support is based around a delivery process spanning\n * common goals of fingerprinting, reacting to fingerprint diffs,\n * code review, build, deployment, endpoint verification and\n * promotion to a production environment.\n *\n * The most important element of a software delivery machine is setting\n * zero or more _push rules_ in the constructor.\n * This is normally done using the internal DSL as follows:\n *\n * ```\n * const sdm = defaultMachine(\n *    \"MyMachine\",\n *    options,\n *    whenPushSatisfies(IsMaven, HasSpringBootApplicationClass, not(MaterialChangeToJavaRepo))\n *      .itMeans(\"No material change to Java\")\n *      .setGoals(NoGoals),\n *    whenPushSatisfies(ToDefaultBranch, IsMaven, HasSpringBootApplicationClass, HasCloudFoundryManifest)\n *      .itMeans(\"Spring Boot service to deploy\")\n *      .setGoals(HttpServiceGoals));\n * ```\n *\n * Uses the builder pattern to allow fluent construction. For example:\n *\n * ```\n * softwareDeliveryMachine\n *    .addPushReactions(async pu => ...)\n *    .addNewIssueListeners(async i => ...)\n *    .add...;\n * ```\n */\nexport function defaultMachine(name: string,\n                               opts: SoftwareDeliveryMachineOptions,\n                               ...goalSetters: Array<GoalSetter | GoalSetter[]>): SoftwareDeliveryMachine {\n    const machine = new TheSoftwareDeliveryMachine(name, opts);\n    machine.goalSetters = _.flatten(goalSetters);\n    return machine.addSupportingCommands(\n        selfDescribeHandler(machine),\n        listGeneratorsHandler(machine),\n        createRepoHandler(machine),\n    );\n}\n"]}