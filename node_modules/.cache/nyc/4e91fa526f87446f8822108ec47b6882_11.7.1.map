{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/executeTag.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/executeTag.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAqD;AAIrD,oDAA+E;AAI/E,+DAA0D;AAE1D,oBAA2B,aAA4B;IACnD,OAAO,CAAO,IAAuB,EAA8B,EAAE;QACjE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAElD,OAAO,aAAa,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAM,CAAC,EAAC,EAAE;YACvF,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAE7B,MAAM,OAAO,GAAG,MAAM,iCAAc,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EACpE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACzE,MAAM,kBAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;YAE/E,OAAO,2BAAO,CAAC;QACnB,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAA,CAAC;AACN,CAAC;AAdD,gCAcC;AAED,4BAAyC,EAAiB,EACjB,GAAW,EACX,OAAe,EACf,OAAe,EACf,WAAwC;;QAC7E,MAAM,GAAG,GAAQ;YACb,GAAG,EAAE,OAAO;YACZ,OAAO;YACP,MAAM,EAAE,GAAG;YACX,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE;gBACJ,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACjC;SACJ,CAAC;QAEF,MAAM,gBAAS,CAAC,WAAW,EAAE,EAAmB,EAAE,GAAG,CAAC,CAAC;QACvD,MAAM,yBAAkB,CAAC,WAAW,EAAE,EAAmB,EAAE,GAAG,CAAC,CAAC;IACpE,CAAC;CAAA;AAnBD,gDAmBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Success } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { createTag, createTagReference, Tag } from \"../../../util/github/ghub\";\nimport { ProjectLoader } from \"../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../goals/ExecuteGoalResult\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../goals/support/reportGoalError\";\nimport { readSdmVersion } from \"./local/projectVersioner\";\n\nexport function executeTag(projectLoader: ProjectLoader): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const { status, credentials, id, context } = rwlc;\n\n        return projectLoader.doWithProject({ credentials, id, context, readOnly: true }, async p => {\n            const commit = status.commit;\n\n            const version = await readSdmVersion(commit.repo.owner, commit.repo.name,\n                commit.repo.org.provider.providerId, commit.sha, id.branch, context);\n            await createTagForStatus(id, commit.sha, commit.message, version, credentials);\n\n            return Success;\n        });\n    };\n}\n\nexport async function createTagForStatus(id: RemoteRepoRef,\n                                         sha: string,\n                                         message: string,\n                                         version: string,\n                                         credentials: ProjectOperationCredentials) {\n    const tag: Tag = {\n        tag: version,\n        message,\n        object: sha,\n        type: \"commit\",\n        tagger: {\n            name: \"Atomist\",\n            email: \"info@atomist.com\",\n            date: new Date().toISOString(),\n        },\n    };\n\n    await createTag(credentials, id as GitHubRepoRef, tag);\n    await createTagReference(credentials, id as GitHubRepoRef, tag);\n}\n"]}