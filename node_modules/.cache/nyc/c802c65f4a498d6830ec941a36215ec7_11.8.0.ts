"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_ku5yzvrp=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/support/TheSoftwareDeliveryMachine.ts",hash="5ad6ad11a53276da5ee0780f8f0e88c2424e1c63",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/support/TheSoftwareDeliveryMachine.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:10},end:{line:18,column:27}},"2":{start:{line:19,column:21},end:{line:19,column:73}},"3":{start:{line:20,column:25},end:{line:20,column:81}},"4":{start:{line:21,column:27},end:{line:21,column:89}},"5":{start:{line:22,column:31},end:{line:22,column:89}},"6":{start:{line:23,column:32},end:{line:23,column:103}},"7":{start:{line:24,column:24},end:{line:24,column:82}},"8":{start:{line:25,column:26},end:{line:25,column:81}},"9":{start:{line:26,column:26},end:{line:26,column:88}},"10":{start:{line:27,column:23},end:{line:27,column:70}},"11":{start:{line:28,column:25},end:{line:28,column:87}},"12":{start:{line:29,column:25},end:{line:29,column:53}},"13":{start:{line:30,column:42},end:{line:30,column:86}},"14":{start:{line:43,column:8},end:{line:43,column:26}},"15":{start:{line:44,column:8},end:{line:44,column:50}},"16":{start:{line:45,column:8},end:{line:45,column:161}},"17":{start:{line:46,column:8},end:{line:56,column:158}},"18":{start:{line:57,column:8},end:{line:57,column:80}},"19":{start:{line:60,column:0},end:{line:60,column:64}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:44},end:{line:58,column:5}},line:42}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_ku5yzvrp.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const _=(cov_ku5yzvrp.s[1]++,require("lodash"));const createRepo_1=(cov_ku5yzvrp.s[2]++,require("../../common/command/generator/createRepo"));const listGenerators_1=(cov_ku5yzvrp.s[3]++,require("../../common/command/generator/listGenerators"));const executeAutofixes_1=(cov_ku5yzvrp.s[4]++,require("../../common/delivery/code/autofix/executeAutofixes"));const executePushReactions_1=(cov_ku5yzvrp.s[5]++,require("../../common/delivery/code/executePushReactions"));const executeFingerprinting_1=(cov_ku5yzvrp.s[6]++,require("../../common/delivery/code/fingerprint/executeFingerprinting"));const executeReview_1=(cov_ku5yzvrp.s[7]++,require("../../common/delivery/code/review/executeReview"));const executeUndeploy_1=(cov_ku5yzvrp.s[8]++,require("../../common/delivery/deploy/executeUndeploy"));const logInterpreters_1=(cov_ku5yzvrp.s[9]++,require("../../common/delivery/goals/support/logInterpreters"));const SelfDescribe_1=(cov_ku5yzvrp.s[10]++,require("../../handlers/commands/SelfDescribe"));const SetGoalsOnPush_1=(cov_ku5yzvrp.s[11]++,require("../../handlers/events/delivery/goals/SetGoalsOnPush"));const wellKnownGoals_1=(cov_ku5yzvrp.s[12]++,require("../wellKnownGoals"));const AbstractSoftwareDeliveryMachine_1=(cov_ku5yzvrp.s[13]++,require("./AbstractSoftwareDeliveryMachine"));/**
 * Implementation of SoftwareDeliveryMachine
 */class TheSoftwareDeliveryMachine extends(AbstractSoftwareDeliveryMachine_1.AbstractSoftwareDeliveryMachine){/**
     * Construct a new software delivery machine, with zero or
     * more goal setters.
     * @param {string} name
     * @param {SoftwareDeliveryMachineOptions} opts
     * @param {GoalSetter} goalSetters tell me what to do on a push. Hint: start with "whenPushSatisfies(...)"
     */constructor(name,opts,...goalSetters){cov_ku5yzvrp.f[0]++;cov_ku5yzvrp.s[14]++;super(name,opts);cov_ku5yzvrp.s[15]++;this.goalSetters=_.flatten(goalSetters);cov_ku5yzvrp.s[16]++;this.addSupportingCommands(SelfDescribe_1.selfDescribeHandler(this),listGenerators_1.listGeneratorsHandler(this),createRepo_1.createRepoHandler(this));cov_ku5yzvrp.s[17]++;this.addGoalImplementation("Autofix",wellKnownGoals_1.AutofixGoal,executeAutofixes_1.executeAutofixes(this.options.projectLoader,this.autofixRegistrations),{// Autofix errors should not be reported to the user
logInterpreter:logInterpreters_1.LogSuppressor}).addGoalImplementation("DoNothing",wellKnownGoals_1.NoGoal,SetGoalsOnPush_1.executeImmaterial).addGoalImplementation("FingerprinterRegistration",wellKnownGoals_1.FingerprintGoal,executeFingerprinting_1.executeFingerprinting(this.options.projectLoader,this.fingerprinterRegistrations,this.fingerprintListeners)).addGoalImplementation("CodeReactions",wellKnownGoals_1.PushReactionGoal,executePushReactions_1.executePushReactions(this.options.projectLoader,this.pushReactionRegistrations)).addGoalImplementation("Reviews",wellKnownGoals_1.ReviewGoal,executeReview_1.executeReview(this.options.projectLoader,this.reviewerRegistrations,this.reviewListeners)).addVerifyImplementation().addGoalImplementation("OfferToDeleteRepo",wellKnownGoals_1.DeleteRepositoryGoal,executeUndeploy_1.offerToDeleteRepository()).addGoalImplementation("OfferToDeleteRepoAfterUndeploys",wellKnownGoals_1.DeleteAfterUndeploysGoal,executeUndeploy_1.offerToDeleteRepository());cov_ku5yzvrp.s[18]++;this.knownSideEffect(wellKnownGoals_1.ArtifactGoal,"from ImageLinked");}}cov_ku5yzvrp.s[19]++;exports.TheSoftwareDeliveryMachine=TheSoftwareDeliveryMachine;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2JsdWVwcmludC9zdXBwb3J0L1RoZVNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lLnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy9zcmMvYmx1ZXByaW50L3N1cHBvcnQvVGhlU29mdHdhcmVEZWxpdmVyeU1hY2hpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILDRCQUE0QjtBQUM1QiwwRUFBOEU7QUFDOUUsa0ZBQXNGO0FBQ3RGLDBGQUF1RjtBQUN2RiwwRkFBdUY7QUFDdkYsd0dBQXFHO0FBQ3JHLG1GQUFnRjtBQUNoRixrRkFBdUY7QUFDdkYseUZBQW9GO0FBRXBGLHVFQUEyRTtBQUMzRSx3RkFBd0Y7QUFFeEYsc0RBUzJCO0FBQzNCLHVGQUFvRjtBQUVwRjs7R0FFRztBQUNILGdDQUF3QyxTQUFRLGlFQUErQjtJQUUzRTs7Ozs7O09BTUc7SUFDSCxZQUFZLElBQVksRUFDWixJQUFvQyxFQUNwQyxHQUFHLFdBQTZDO1FBQ3hELEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxxQkFBcUIsQ0FDdEIsa0NBQW1CLENBQUMsSUFBSSxDQUFDLEVBQ3pCLHNDQUFxQixDQUFDLElBQUksQ0FBQyxFQUMzQiw4QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FDMUIsQ0FBQztRQUVGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsNEJBQVcsRUFDN0MsbUNBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDckUsb0RBQW9EO1lBQ3BELGNBQWMsRUFBRSwrQkFBYTtTQUNoQyxDQUFDO2FBQ0QscUJBQXFCLENBQUMsV0FBVyxFQUFFLHVCQUFNLEVBQUUsa0NBQWlCLENBQUM7YUFDN0QscUJBQXFCLENBQUMsMkJBQTJCLEVBQUUsZ0NBQWUsRUFDL0QsNkNBQXFCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2FBQ2pILHFCQUFxQixDQUFDLGVBQWUsRUFBRSxpQ0FBZ0IsRUFDcEQsMkNBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7YUFDcEYscUJBQXFCLENBQUMsU0FBUyxFQUFFLDJCQUFVLEVBQ3hDLDZCQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUMvRix1QkFBdUIsRUFBRTthQUN6QixxQkFBcUIsQ0FBQyxtQkFBbUIsRUFBRSxxQ0FBb0IsRUFDNUQseUNBQXVCLEVBQUUsQ0FBQzthQUM3QixxQkFBcUIsQ0FBQyxpQ0FBaUMsRUFBRSx5Q0FBd0IsRUFDOUUseUNBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsNkJBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FFSjtBQXhDRCxnRUF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggQXRvbWlzdCwgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IGNyZWF0ZVJlcG9IYW5kbGVyIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb21tYW5kL2dlbmVyYXRvci9jcmVhdGVSZXBvXCI7XG5pbXBvcnQgeyBsaXN0R2VuZXJhdG9yc0hhbmRsZXIgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbW1hbmQvZ2VuZXJhdG9yL2xpc3RHZW5lcmF0b3JzXCI7XG5pbXBvcnQgeyBleGVjdXRlQXV0b2ZpeGVzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9kZWxpdmVyeS9jb2RlL2F1dG9maXgvZXhlY3V0ZUF1dG9maXhlc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZVB1c2hSZWFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2RlbGl2ZXJ5L2NvZGUvZXhlY3V0ZVB1c2hSZWFjdGlvbnNcIjtcbmltcG9ydCB7IGV4ZWN1dGVGaW5nZXJwcmludGluZyB9IGZyb20gXCIuLi8uLi9jb21tb24vZGVsaXZlcnkvY29kZS9maW5nZXJwcmludC9leGVjdXRlRmluZ2VycHJpbnRpbmdcIjtcbmltcG9ydCB7IGV4ZWN1dGVSZXZpZXcgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2RlbGl2ZXJ5L2NvZGUvcmV2aWV3L2V4ZWN1dGVSZXZpZXdcIjtcbmltcG9ydCB7IG9mZmVyVG9EZWxldGVSZXBvc2l0b3J5IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9kZWxpdmVyeS9kZXBsb3kvZXhlY3V0ZVVuZGVwbG95XCI7XG5pbXBvcnQgeyBMb2dTdXBwcmVzc29yIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9kZWxpdmVyeS9nb2Fscy9zdXBwb3J0L2xvZ0ludGVycHJldGVyc1wiO1xuaW1wb3J0IHsgR29hbFNldHRlciB9IGZyb20gXCIuLi8uLi9jb21tb24vbGlzdGVuZXIvR29hbFNldHRlclwiO1xuaW1wb3J0IHsgc2VsZkRlc2NyaWJlSGFuZGxlciB9IGZyb20gXCIuLi8uLi9oYW5kbGVycy9jb21tYW5kcy9TZWxmRGVzY3JpYmVcIjtcbmltcG9ydCB7IGV4ZWN1dGVJbW1hdGVyaWFsIH0gZnJvbSBcIi4uLy4uL2hhbmRsZXJzL2V2ZW50cy9kZWxpdmVyeS9nb2Fscy9TZXRHb2Fsc09uUHVzaFwiO1xuaW1wb3J0IHsgU29mdHdhcmVEZWxpdmVyeU1hY2hpbmVPcHRpb25zIH0gZnJvbSBcIi4uL1NvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9uc1wiO1xuaW1wb3J0IHtcbiAgICBBcnRpZmFjdEdvYWwsXG4gICAgQXV0b2ZpeEdvYWwsXG4gICAgRGVsZXRlQWZ0ZXJVbmRlcGxveXNHb2FsLFxuICAgIERlbGV0ZVJlcG9zaXRvcnlHb2FsLFxuICAgIEZpbmdlcnByaW50R29hbCxcbiAgICBOb0dvYWwsXG4gICAgUHVzaFJlYWN0aW9uR29hbCxcbiAgICBSZXZpZXdHb2FsLFxufSBmcm9tIFwiLi4vd2VsbEtub3duR29hbHNcIjtcbmltcG9ydCB7IEFic3RyYWN0U29mdHdhcmVEZWxpdmVyeU1hY2hpbmUgfSBmcm9tIFwiLi9BYnN0cmFjdFNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lXCI7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgU29mdHdhcmVEZWxpdmVyeU1hY2hpbmVcbiAqL1xuZXhwb3J0IGNsYXNzIFRoZVNvZnR3YXJlRGVsaXZlcnlNYWNoaW5lIGV4dGVuZHMgQWJzdHJhY3RTb2Z0d2FyZURlbGl2ZXJ5TWFjaGluZSB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgc29mdHdhcmUgZGVsaXZlcnkgbWFjaGluZSwgd2l0aCB6ZXJvIG9yXG4gICAgICogbW9yZSBnb2FsIHNldHRlcnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge1NvZnR3YXJlRGVsaXZlcnlNYWNoaW5lT3B0aW9uc30gb3B0c1xuICAgICAqIEBwYXJhbSB7R29hbFNldHRlcn0gZ29hbFNldHRlcnMgdGVsbCBtZSB3aGF0IHRvIGRvIG9uIGEgcHVzaC4gSGludDogc3RhcnQgd2l0aCBcIndoZW5QdXNoU2F0aXNmaWVzKC4uLilcIlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBvcHRzOiBTb2Z0d2FyZURlbGl2ZXJ5TWFjaGluZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4uZ29hbFNldHRlcnM6IEFycmF5PEdvYWxTZXR0ZXIgfCBHb2FsU2V0dGVyW10+KSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIG9wdHMpO1xuICAgICAgICB0aGlzLmdvYWxTZXR0ZXJzID0gXy5mbGF0dGVuKGdvYWxTZXR0ZXJzKTtcbiAgICAgICAgdGhpcy5hZGRTdXBwb3J0aW5nQ29tbWFuZHMoXG4gICAgICAgICAgICBzZWxmRGVzY3JpYmVIYW5kbGVyKHRoaXMpLFxuICAgICAgICAgICAgbGlzdEdlbmVyYXRvcnNIYW5kbGVyKHRoaXMpLFxuICAgICAgICAgICAgY3JlYXRlUmVwb0hhbmRsZXIodGhpcyksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5hZGRHb2FsSW1wbGVtZW50YXRpb24oXCJBdXRvZml4XCIsIEF1dG9maXhHb2FsLFxuICAgICAgICAgICAgZXhlY3V0ZUF1dG9maXhlcyh0aGlzLm9wdGlvbnMucHJvamVjdExvYWRlciwgdGhpcy5hdXRvZml4UmVnaXN0cmF0aW9ucyksIHtcbiAgICAgICAgICAgICAgICAvLyBBdXRvZml4IGVycm9ycyBzaG91bGQgbm90IGJlIHJlcG9ydGVkIHRvIHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgbG9nSW50ZXJwcmV0ZXI6IExvZ1N1cHByZXNzb3IsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIkRvTm90aGluZ1wiLCBOb0dvYWwsIGV4ZWN1dGVJbW1hdGVyaWFsKVxuICAgICAgICAgICAgLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIkZpbmdlcnByaW50ZXJSZWdpc3RyYXRpb25cIiwgRmluZ2VycHJpbnRHb2FsLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVGaW5nZXJwcmludGluZyh0aGlzLm9wdGlvbnMucHJvamVjdExvYWRlciwgdGhpcy5maW5nZXJwcmludGVyUmVnaXN0cmF0aW9ucywgdGhpcy5maW5nZXJwcmludExpc3RlbmVycykpXG4gICAgICAgICAgICAuYWRkR29hbEltcGxlbWVudGF0aW9uKFwiQ29kZVJlYWN0aW9uc1wiLCBQdXNoUmVhY3Rpb25Hb2FsLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVQdXNoUmVhY3Rpb25zKHRoaXMub3B0aW9ucy5wcm9qZWN0TG9hZGVyLCB0aGlzLnB1c2hSZWFjdGlvblJlZ2lzdHJhdGlvbnMpKVxuICAgICAgICAgICAgLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIlJldmlld3NcIiwgUmV2aWV3R29hbCxcbiAgICAgICAgICAgICAgICBleGVjdXRlUmV2aWV3KHRoaXMub3B0aW9ucy5wcm9qZWN0TG9hZGVyLCB0aGlzLnJldmlld2VyUmVnaXN0cmF0aW9ucywgdGhpcy5yZXZpZXdMaXN0ZW5lcnMpKVxuICAgICAgICAgICAgLmFkZFZlcmlmeUltcGxlbWVudGF0aW9uKClcbiAgICAgICAgICAgIC5hZGRHb2FsSW1wbGVtZW50YXRpb24oXCJPZmZlclRvRGVsZXRlUmVwb1wiLCBEZWxldGVSZXBvc2l0b3J5R29hbCxcbiAgICAgICAgICAgICAgICBvZmZlclRvRGVsZXRlUmVwb3NpdG9yeSgpKVxuICAgICAgICAgICAgLmFkZEdvYWxJbXBsZW1lbnRhdGlvbihcIk9mZmVyVG9EZWxldGVSZXBvQWZ0ZXJVbmRlcGxveXNcIiwgRGVsZXRlQWZ0ZXJVbmRlcGxveXNHb2FsLFxuICAgICAgICAgICAgICAgIG9mZmVyVG9EZWxldGVSZXBvc2l0b3J5KCkpO1xuICAgICAgICB0aGlzLmtub3duU2lkZUVmZmVjdChBcnRpZmFjdEdvYWwsIFwiZnJvbSBJbWFnZUxpbmtlZFwiKTtcbiAgICB9XG5cbn1cbiJdfQ==