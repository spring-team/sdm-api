{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/deploy.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/deploy.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoE;AAQpE,uDAAiE;AAEjE,oDAAuE;AACvE,4EAA0E;AAmB1E,0BAAuC,SAAiB,EACjB,aAA4B,EAC5B,EAAiB,EACjB,WAAwC,EACxC,WAAwB;;QAC3D,IAAI,CAAC,SAAS,EAAE;YACZ,0BAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO,cAAc,CAAC,EAAE,CAAC,CAAC;SAC7B;QACD,MAAM,gBAAgB,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,EAAE,WAAW,CAAC;aAC5E,KAAK,CAAC,GAAG,CAAC,EAAE;YACT,WAAW,CAAC,KAAK,CAAC,+BAA+B,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;YACjE,MAAM,GAAG,CAAC;QACd,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,gBAAgB,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC9D;QACD,OAAO,gBAAgB,CAAC;IAC5B,CAAC;CAAA;AAnBD,4CAmBC;AAED,wBAAwB,EAAiB;IACrC,OAAO;QACH,iFAAiF;QACjF,IAAI,EAAE,EAAE,CAAC,IAAI;QACb,OAAO,EAAE,OAAO;QAChB,EAAE;KACL,CAAC;AACN,CAAC;AAED,2CAAwD,MAIvD;;QACG,MAAM,EAAC,IAAI,EAAE,UAAU,EAAE,YAAY,EAAC,GAAG,MAAM,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,wCAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,8BAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,CAAC;QAClH,IAAI,UAAU,CAAC,QAAQ,EAAE;YACrB,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,kBAAkB,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAC,CAAC,CAAC;SACrH;aAAM;YACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;YACxF,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,kBAAkB,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;SAC5H;IACL,CAAC;CAAA;AAfD,8EAeC;AAED,4BAA4B,UAG3B;IACG,MAAM,EAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,GAAG,UAAU,CAAC;IAC/E,OAAO,uBAAU,CAAC,OAAO,EAAE,OAAO,EAAE;QAChC,WAAW,EAAE,iCAAoB,CAAC,YAAY,EAAE,QAAQ,CAAC;QACzD,GAAG,EAAE,QAAQ;QACb,KAAK,EAAE,QAAQ;QACf,KAAK;KACR,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QACtB,0BAAM,CAAC,KAAK,CAAC,iCAAiC,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;QACzE,iCAAiC;IACrC,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext, logger } from \"@atomist/automation-client\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { SdmGoal, SdmGoalState } from \"../../../ingesters/sdmGoalIngester\";\nimport { ArtifactStore, DeployableArtifact } from \"../../../spi/artifact/ArtifactStore\";\nimport { Deployer } from \"../../../spi/deploy/Deployer\";\nimport { Deployment, TargetInfo } from \"../../../spi/deploy/Deployment\";\nimport { ProgressLog } from \"../../../spi/log/ProgressLog\";\nimport { providerIdFromStatus } from \"../../../util/git/repoRef\";\nimport { Goal } from \"../goals/Goal\";\nimport { descriptionFromState, updateGoal } from \"../goals/storeGoals\";\nimport { findSdmGoalOnCommit } from \"../goals/support/fetchGoalsOnCommit\";\nimport { RunWithLogContext } from \"../goals/support/reportGoalError\";\n\nexport type Targeter<T extends TargetInfo> = (id: RemoteRepoRef, branch: string) => T;\n\nexport interface DeployStage {\n    deployGoal: Goal;\n    endpointGoal: Goal;\n    undeployGoal: Goal;\n}\n\nexport interface DeployerInfo<T extends TargetInfo> {\n    deployer: Deployer<T>;\n    targeter: Targeter<T>;\n}\n\nexport interface Target<T extends TargetInfo = TargetInfo> extends DeployerInfo<T>, DeployStage {\n}\n\nexport async function checkOutArtifact(targetUrl: string,\n                                       artifactStore: ArtifactStore,\n                                       id: RemoteRepoRef,\n                                       credentials: ProjectOperationCredentials,\n                                       progressLog: ProgressLog): Promise<DeployableArtifact> {\n    if (!targetUrl) {\n        logger.debug(\"No artifact, must be source-deployed\");\n        return sourceArtifact(id);\n    }\n    const artifactCheckout = await artifactStore.checkout(targetUrl, id, credentials)\n        .catch(err => {\n            progressLog.write(\"Error checking out artifact: \" + err.message);\n            throw err;\n        });\n\n    if (!artifactCheckout) {\n        throw new Error(\"Error checking out artifact: none found\");\n    }\n    return artifactCheckout;\n}\n\nfunction sourceArtifact(id: RemoteRepoRef): DeployableArtifact {\n    return {\n        // TODO need to do something about this: Use general identifier as in PCF editor?\n        name: id.repo,\n        version: \"0.1.0\",\n        id,\n    };\n}\n\nexport async function setEndpointGoalOnSuccessfulDeploy(params: {\n    endpointGoal: Goal,\n    rwlc: RunWithLogContext,\n    deployment: Deployment,\n}) {\n    const {rwlc, deployment, endpointGoal} = params;\n    const sdmGoal = await findSdmGoalOnCommit(rwlc.context, rwlc.id, providerIdFromStatus(rwlc.status), endpointGoal);\n    if (deployment.endpoint) {\n        const newState = \"success\";\n        await markEndpointStatus({context: rwlc.context, sdmGoal, endpointGoal, newState, endpoint: deployment.endpoint});\n    } else {\n        const error = new Error(\"Deploy finished with success, but the endpoint was not found\");\n        const newState = \"failure\";\n        await markEndpointStatus({context: rwlc.context, sdmGoal, endpointGoal, newState, endpoint: deployment.endpoint, error});\n    }\n}\n\nfunction markEndpointStatus(parameters: {\n    context: HandlerContext, sdmGoal: SdmGoal, endpointGoal: Goal, newState: SdmGoalState, endpoint?: string,\n    error?: Error,\n}) {\n    const {context, sdmGoal, endpointGoal, newState, endpoint, error} = parameters;\n    return updateGoal(context, sdmGoal, {\n        description: descriptionFromState(endpointGoal, newState),\n        url: endpoint,\n        state: newState,\n        error,\n    }).catch(endpointStatus => {\n        logger.error(\"Could not set Endpoint status: \" + endpointStatus.message);\n        // do not fail this whole handler\n    });\n}\n"]}