{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/k8s/K8AutomationBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/k8s/K8AutomationBuilder.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAqE;AAOrE,uDAA4D;AAE5D,4EAAyE;AAEzE,MAAM,wBAAwB,GAAG,mBAAmB,CAAC;AACrD;;;;;;;;GAQG;AACH;IAAA;QAEW,SAAI,GAAG,qBAAqB,CAAC;IAoBxC,CAAC;IAlBU,aAAa,CAAC,KAAkC,EAClC,EAAiB,EACjB,EAAmB,EACnB,IAA2B,EAC3B,GAAgB,EAChB,OAAuB;QACpC,kFAAkF;QACtF,OAAO,mBAAY,CAAC,KAAK,EAAE,EAAmB,EAAE;YAC5C,OAAO,EAAE,wBAAwB,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM;YACrD,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,kCAAkC;YAC/C,UAAU,EAAE,SAAS;SACxB,CAAC,CAAC,IAAI,CAAC,2BAAO,CAAC,CAAC;IACrB,CAAC;IAEM,cAAc,CAAC,GAAW;QAC7B,OAAO,yCAAmB,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACJ;AAtBD,oDAsBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandlerContext, success } from \"@atomist/automation-client\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { Builder, PushThatTriggersBuild } from \"../../../../spi/build/Builder\";\nimport { InterpretedLog, LogInterpretation } from \"../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { createStatus } from \"../../../../util/github/ghub\";\nimport { AddressChannels } from \"../../../slack/addressChannels\";\nimport { MavenLogInterpreter } from \"../local/maven/mavenLogInterpreter\";\n\nconst K8AutomationBuildContext = \"build/atomist/k8s\";\n/**\n * Upon recognizing a plan to create an artifact, send a message to k8-automation to request a build.\n * k8-automation will trigger a build for this commit in Google Container Builder.\n * When that is complete, it will send an ImageLinked event, and that means our artifact has been created.\n *\n * The message to k8-automation takes the form of a pending GitHub status.\n * Its response takes the form of a Build event which we will notice and update the Build goal,\n * and an ImageLink event which we will notice and update the Artifact goal with a link to that image.\n */\nexport class K8sAutomationBuilder implements Builder, LogInterpretation {\n\n    public name = \"K8AutomationBuilder\";\n\n    public initiateBuild(creds: ProjectOperationCredentials,\n                         id: RemoteRepoRef,\n                         ac: AddressChannels,\n                         push: PushThatTriggersBuild,\n                         log: ProgressLog,\n                         context: HandlerContext): Promise<any> {\n            // someday we will do this with a \"requested\" build node but use a status for now.\n        return createStatus(creds, id as GitHubRepoRef, {\n            context: K8AutomationBuildContext + \"/\" + push.branch,\n            state: \"pending\",\n            description: \"Requested build in k8-automation\",\n            target_url: undefined,\n        }).then(success);\n    }\n\n    public logInterpreter(log: string): InterpretedLog | undefined {\n        return MavenLogInterpreter(log);\n    }\n}\n"]}