{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/goalContribution.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/goalContribution.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kEAAoD;AACpD,4BAA4B;AAG5B,6DAA0D;AAG1D,mDAAyD;AAIzD;;GAEG;AACH;IAII,YAAmB,IAAY,EAAE,YAAwC;QAAtD,SAAI,GAAJ,IAAI,CAAQ;QAFd,iBAAY,GAA8B,EAAE,CAAC;QAG1D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACvC,IAAI,EAAE,CAAC,CAAC,IAAI;YACN,OAAO,CAAC,CAAC;;oBACX,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,CAAC,EAAE;wBACJ,OAAO,CAAQ,CAAC;qBACnB;oBACD,OAAO,uBAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC5B,CAAC;aAAA;SACJ,CAAC,CAAC,CAAC;IACR,CAAC;IAEY,OAAO,CAAC,CAAI;;YACrB,MAAM,gBAAgB,GAAa,MAAM,OAAO,CAAC,GAAG,CAChD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAC3C,CAAC;YACF,MAAM,WAAW,GAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjF,0BAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC/G,OAAO,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;gBAC7B,SAAS,CAAC,CAAC;gBACX,IAAI,aAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,CAAC;QAC7C,CAAC;KAAA;CAEJ;AAED;;;;;;GAMG;AACH,0BACI,WAAgC,EAChC,GAAG,YAAwC;IAC3C,OAAO,IAAI,kBAAkB,CAAC,aAAa,EAAE,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;AACrF,CAAC;AAJD,4CAIC","sourcesContent":["import { logger } from \"@atomist/automation-client\";\nimport * as _ from \"lodash\";\nimport { SdmContext } from \"../../common/context/SdmContext\";\nimport { Goal } from \"../../common/delivery/goals/Goal\";\nimport { Goals } from \"../../common/delivery/goals/Goals\";\nimport { Mapping, NeverMatch } from \"../../common/listener/Mapping\";\nimport { PushListenerInvocation } from \"../../common/listener/PushListener\";\nimport { GoalComponent, toGoals } from \"./GoalComponent\";\n\nexport type GoalContribution<F> = Mapping<F, GoalComponent>;\n\n/**\n * An additive goal setter assembles the goals contributed by all the contributors.\n */\nclass AdditiveGoalSetter<F extends SdmContext> implements Mapping<F, Goals> {\n\n    private readonly contributors: Array<Mapping<F, Goal[]>> = [];\n\n    constructor(public name: string, contributors: Array<GoalContribution<F>>) {\n        this.contributors = contributors.map(c => ({\n            name: c.name,\n            async mapping(p) {\n                const r = await c.mapping(p);\n                if (!r) {\n                    return r as any;\n                }\n                return toGoals(r).goals;\n            },\n        }));\n    }\n\n    public async mapping(p: F): Promise<NeverMatch | Goals | undefined> {\n        const contributorGoals: Goal[][] = await Promise.all(\n            this.contributors.map(c => c.mapping(p)),\n        );\n        const uniqueGoals: Goal[] = _.uniq(_.flatten(contributorGoals.filter(x => !!x)));\n        logger.info(\"Unique goal names=[%s]: correlationId=%s\", uniqueGoals.map(g => g.name), p.context.correlationId);\n        return uniqueGoals.length === 0 ?\n            undefined :\n            new Goals(this.name, ...uniqueGoals);\n    }\n\n}\n\n/**\n * Contribute goals based on a series of contribution rules.\n * Duplicates will be removed.\n * @param contributor first contributor\n * @param {GoalContribution<F>} contributors\n * @return a mapping to goals\n */\nexport function goalContributors<F extends SdmContext = PushListenerInvocation>(\n    contributor: GoalContribution<F>,\n    ...contributors: Array<GoalContribution<F>>): Mapping<F, Goals> {\n    return new AdditiveGoalSetter(\"Contributed\", [contributor].concat(contributors));\n}\n"]}