{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/softwareDeliveryMachineTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/softwareDeliveryMachineTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { whenPushSatisfies } from \"../../src/blueprint/dsl/goalDsl\";\nimport { NoGoals } from \"../../src/common/delivery/goals/common/commonGoals\";\nimport { AnyPush } from \"../../src/common/listener/support/pushtest/commonPushTests\";\nimport { fakeSoftwareDeliveryMachineOptions } from \"./sdmGoalImplementationTest\";\n\nimport { InMemoryFile } from \"@atomist/automation-client/project/mem/InMemoryFile\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport { toFactory } from \"@atomist/automation-client/util/constructionUtils\";\nimport * as assert from \"power-assert\";\nimport { when } from \"../../src/blueprint/dsl/buildDsl\";\nimport { ConcreteSoftwareDeliveryMachine } from \"../../src/blueprint/support/ConcreteSoftwareDeliveryMachine\";\nimport { npmCustomBuilder } from \"../../src/common/delivery/build/local/npm/NpmDetectBuildMapping\";\nimport { HttpServiceGoals } from \"../../src/common/delivery/goals/common/httpServiceGoals\";\nimport { GoalsSetListener } from \"../../src/common/listener/GoalsSetListener\";\nimport { HasAtomistBuildFile } from \"../../src/common/listener/support/pushtest/node/nodePushTests\";\nimport { SetGoalsOnPush } from \"../../src/handlers/events/delivery/goals/SetGoalsOnPush\";\nimport { AddThingAutofix } from \"../common/delivery/code/autofix/executeAutofixesTest\";\nimport { fakePush } from \"./dsl/decisionTreeTest\";\n\ndescribe(\"SDM handler creation\", () => {\n\n    describe(\"emits event handlers\", () => {\n\n        it(\"emits goal setter\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .itMeans(\"do nothing\")\n                    .setGoals(NoGoals));\n            assert(sdm.eventHandlers.length > 0);\n            const sgop = sdm.eventHandlers.map(h => toFactory(h)()).find(h => !!(h as SetGoalsOnPush).goalsListeners) as SetGoalsOnPush;\n            assert(sgop.goalsListeners.length >= 0);\n        });\n\n        it(\"emits goal setter with listener\", async () => {\n            const gl: GoalsSetListener = async () => undefined;\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .itMeans(\"do nothing\")\n                    .setGoals(NoGoals));\n            sdm.addGoalsSetListeners(gl);\n            assert(sdm.eventHandlers.length > 0);\n            const sgop = sdm.eventHandlers.map(h => toFactory(h)()).find(h => !!(h as SetGoalsOnPush).goalsListeners) as SetGoalsOnPush;\n            assert(sgop.goalsListeners.length >= 1);\n        });\n\n    });\n\n    describe(\"can test goal setting\", () => {\n\n        it(\"sets no goals\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .itMeans(\"do nothing\")\n                    .setGoals(null));\n            const p = fakePush();\n            assert.equal(await sdm.pushMapping.mapping(p), undefined);\n        });\n\n        it(\"sets goals on any push\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(AnyPush)\n                    .setGoals(HttpServiceGoals));\n            const p = fakePush();\n            assert.equal(await sdm.pushMapping.mapping(p), HttpServiceGoals);\n        });\n\n        it(\"sets goals on particular push\", async () => {\n            const project = InMemoryProject.of(new InMemoryFile(\"thing\", \"1\"));\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(async pu => !!await pu.project.getFile(\"thing\"))\n                    .setGoals(HttpServiceGoals));\n            const p = fakePush(project);\n            assert.equal(await sdm.pushMapping.mapping(p), HttpServiceGoals);\n        });\n    });\n\n    describe(\"observesOnly\", () => {\n\n        it(\"cannot mutate\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(async pu => !!await pu.project.getFile(\"thing\"))\n                    .setGoals(HttpServiceGoals));\n            assert(sdm.observesOnly);\n        });\n\n        it(\"has an autofix\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(async pu => !!await pu.project.getFile(\"thing\"))\n                    .setGoals(HttpServiceGoals));\n            sdm.addAutofixes(AddThingAutofix);\n            assert(!sdm.observesOnly);\n        });\n\n        it(\"has a build\", async () => {\n            const sdm = new ConcreteSoftwareDeliveryMachine(\"Gustave\",\n                fakeSoftwareDeliveryMachineOptions,\n                whenPushSatisfies(async pu => !!await pu.project.getFile(\"thing\"))\n                    .setGoals(HttpServiceGoals));\n            sdm.addBuildRules(when(HasAtomistBuildFile)\n                .itMeans(\"Custom build script\")\n                .set(npmCustomBuilder(sdm.options.artifactStore, sdm.options.projectLoader)));\n            assert(!sdm.observesOnly);\n        });\n\n        // tslint:disable:no-unused-expression\n        it(\"has a deployment\").pending;\n    });\n\n});\n"]}