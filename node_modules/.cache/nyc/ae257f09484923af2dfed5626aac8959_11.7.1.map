{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/issue/NewIssueHandler.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/issue/NewIssueHandler.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAAmI;AACnI,sEAAwE;AAExE,2EAA2E;AAE3E,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,eAAe,GAA5B;IAII,YAAY,iBAAqC,EACpB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAChE,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC/C,CAAC;IAEY,MAAM,CAAC,KAAoD,EACpD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,eAAe,GAAG,oCAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAChE,MAAM,EAAE,GAAG,yBAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;gBACrC,0BAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACvE,OAAO,2BAAO,CAAC;aAClB;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,MAAM,GAAG,GAA+B;gBACpC,EAAE;gBACF,eAAe;gBACf,OAAO;gBACP,KAAK;gBACL,WAAW;aACd,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB;iBACrC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AAjCY,eAAe;IAD3B,gCAAY,CAAC,mBAAmB,EAAE,sBAAY,CAAC,YAAY,CAAC,CAAC;;GACjD,eAAe,CAiC3B;AAjCY,0CAAe","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { NewIssueListener, NewIssueListenerInvocation } from \"../../../common/listener/NewIssueListener\";\nimport { addressChannelsFor } from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A new issue has been created.\n */\n@EventHandler(\"On issue creation\", subscription(\"OnNewIssue\"))\nexport class NewIssueHandler implements HandleEvent<schema.OnIssueAction.Subscription> {\n\n    private readonly newIssueListeners: NewIssueListener[];\n\n    constructor(newIssueListeners: NewIssueListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n        this.newIssueListeners = newIssueListeners;\n    }\n\n    public async handle(event: EventFired<schema.OnIssueAction.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const issue = event.data.Issue[0];\n        const addressChannels = addressChannelsFor(issue.repo, context);\n        const id = toRemoteRepoRef(issue.repo);\n\n        if (issue.updatedAt !== issue.createdAt) {\n            logger.debug(\"Issue updated, not created: %s on %j\", issue.number, id);\n            return Success;\n        }\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        const inv: NewIssueListenerInvocation = {\n            id,\n            addressChannels,\n            context,\n            issue,\n            credentials,\n        };\n        await Promise.all(params.newIssueListeners\n            .map(l => l(inv)));\n        return Success;\n    }\n}\n"]}