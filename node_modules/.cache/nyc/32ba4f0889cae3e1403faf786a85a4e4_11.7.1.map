{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/gitHubContext.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/gitHubContext.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAoD;AAmBvC,QAAA,WAAW,GAAG,cAAc,CAAC;AAC7B,QAAA,wBAAwB,GAAoB,SAAS,CAAC;AACtD,QAAA,kBAAkB,GAAoB,YAAY,CAAC;AAChE,iEAAiE;AACpD,QAAA,qBAAqB,GAAoB,SAAS,CAAC;AACnD,QAAA,0BAA0B,GAAoB,SAAS,CAAC;AAErE;;;;;GAKG;AACH,sBAA6B,OAA4B;IACrD,IAAI,OAAO,CAAC,UAAU,CAAC,mBAAW,CAAC,EAAE;QACjC,MAAM,aAAa,GAAG,iBAAiB,CAAC;QACxC,MAAM,YAAY,GAAG,4BAA4B,CAAC;QAElD,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,EAAE;YACb,OAAO;SACV;QAED,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,EAAE;YACzB,0BAAM,CAAC,KAAK,CAAC,mCAAmC,UAAU,CAAC,CAAC,CAAC,OAAO,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACrF,OAAO;SACV;QACD,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,SAAS,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEhC,OAAO;YACH,IAAI,EAAE,mBAAW;YACjB,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChB,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI;YAC5B,SAAS;YACT,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;YACtB,QAAQ;YACR,QAAQ,EAAE,IAAI;SACjB,CAAC;KACL;AACL,CAAC;AA9BD,oCA8BC;AAED;;;GAGG;AACH,wBAA+B,QAA6B,EAAE,QAA6B;IACvF,IAAI,yBAAyB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;QAC/C,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QACtC,OAAO,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;KACnF;AACL,CAAC;AAND,wCAMC;AAED,mCAAmC,QAA6B,EAAE,QAA6B;IAC3F,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;IACtC,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;IACtC,OAAO,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;AAC3D,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { StatusState } from \"../../../typings/types\";\n\n// convention: \"sdm/atomist/#-env/#-goal\" (the numbers are for ordering)\nexport type GitHubStatusContext = string;\n\nexport interface GitHubStatus {\n    context?: GitHubStatusContext;\n    description?: string;\n    state?: StatusState;\n    targetUrl?: string;\n}\n\nexport interface GitHubStatusAndFriends extends GitHubStatus {\n    siblings: GitHubStatus[];\n}\n\nexport type GoalEnvironment = \"0-code/\" | \"1-staging/\" | \"2-prod/\" | \"8-doom/\";\n\nexport const BaseContext = \"sdm/atomist/\";\nexport const IndependentOfEnvironment: GoalEnvironment = \"0-code/\";\nexport const StagingEnvironment: GoalEnvironment = \"1-staging/\";\n// should always be number dash name. The number may be a decimal\nexport const ProductionEnvironment: GoalEnvironment = \"2-prod/\";\nexport const ProjectDisposalEnvironment: GoalEnvironment = \"8-doom/\";\n\n/**\n * if this is a context we created, then we can interpret it.\n * Otherwise returns undefined\n * @param {string} context\n * @returns {{base: string; env: string; stage: string}}\n */\nexport function splitContext(context: GitHubStatusContext) {\n    if (context.startsWith(BaseContext)) {\n        const numberAndName = /([0-9\\.]+)-(.*)/;\n        const wholeContext = /^sdm\\/atomist\\/(.*)\\/(.*)$/;\n\n        const matchWhole = context.match(wholeContext);\n        if (!matchWhole) {\n            return;\n        }\n\n        const goalPart = matchWhole[2];\n        const matchEnv = matchWhole[1].match(numberAndName);\n        const matchGoal = goalPart.match(numberAndName);\n        if (!matchGoal || !matchEnv) {\n            logger.debug(`Did not find number and name in ${matchWhole[1]} or ${matchWhole[2]}`);\n            return;\n        }\n        const name = matchGoal[2];\n        const goalOrder = +matchGoal[1];\n\n        return {\n            base: BaseContext,\n            env: matchEnv[2],\n            envOrder: +matchEnv[1], name,\n            goalOrder,\n            envPart: matchWhole[1],\n            goalPart,\n            goalName: name,\n        };\n    }\n}\n\n/*\n * true if contextB is in the same series of goals as A,\n * and A comes before B\n */\nexport function contextIsAfter(contextA: GitHubStatusContext, contextB: GitHubStatusContext): boolean {\n    if (belongToSameSeriesOfGoals(contextA, contextB)) {\n        const splitA = splitContext(contextA);\n        const splitB = splitContext(contextB);\n        return splitA.envOrder < splitB.envOrder || splitA.goalOrder < splitB.goalOrder;\n    }\n}\n\nfunction belongToSameSeriesOfGoals(contextA: GitHubStatusContext, contextB: GitHubStatusContext): boolean {\n    const splitA = splitContext(contextA);\n    const splitB = splitContext(contextB);\n    return splitA && splitB && splitA.base === splitB.base;\n}\n"]}