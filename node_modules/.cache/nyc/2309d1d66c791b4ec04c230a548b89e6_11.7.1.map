{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/BitBucketTargetsParams.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/BitBucketTargetsParams.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;AAEH,kEAAsG;AAEtG,uGAAqG;AACrG,qGAAkG;AAElG,qEAAkE;AAElE;;;GAGG;AAEH,IAAa,sBAAsB,GAAnC,4BAAoC,SAAQ,6BAAa;IAqBrD;QACI,KAAK,EAAE,CAAC;QAVL,QAAG,GAAW,QAAQ,CAAC;QAGvB,UAAK,GAAW,IAAI,CAAC;IAQ5B,CAAC;IAND,IAAI,WAAW;QACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC1C,CAAC;IAMD;;;OAGG;IACH,IAAI,OAAO;QACP,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACrD,IAAI,+CAAsB,CACtB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EACrB,IAAI,EACJ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,SAAS,CAAC;IAClB,CAAC;CAEJ,CAAA;AApCG;IADC,mCAAe,CAAC,oCAAgB,CAAC,YAAY,EAAE,KAAK,CAAC;;sDAChC;AAGtB;IADC,mCAAe,CAAC,oCAAgB,CAAC,WAAW,EAAE,KAAK,CAAC;;qDAChC;AAGrB;IADC,mCAAe,CAAC,oCAAgB,CAAC,gBAAgB,EAAE,KAAK,CAAC;;oDACtC;AAGpB;IADC,6BAAS,iBAAE,WAAW,EAAE,qCAAqC,IAAK,gCAAe,IAAE,QAAQ,EAAE,KAAK,IAAE;;mDACvE;AAG9B;IADC,6BAAS,CAAC,EAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;;qDACvB;AAfnB,sBAAsB;IADlC,8BAAU,EAAE;;GACA,sBAAsB,CAuClC;AAvCY,wDAAsB","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MappedParameter, MappedParameters, Parameter, Parameters } from \"@atomist/automation-client\";\nimport { FallbackParams } from \"@atomist/automation-client/operations/common/params/FallbackParams\";\nimport { GitBranchRegExp } from \"@atomist/automation-client/operations/common/params/gitHubPatterns\";\nimport { TargetsParams } from \"@atomist/automation-client/operations/common/params/TargetsParams\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { BitBucketServerRepoRef } from \"./BitBucketServerRepoRef\";\n\n/**\n * Base parameters for working with GitHub repo(s).\n * Allows use of regex.\n */\n@Parameters()\nexport class BitBucketTargetsParams extends TargetsParams implements FallbackParams {\n\n    @MappedParameter(MappedParameters.GitHubApiUrl, false)\n    public apiUrl: string;\n\n    @MappedParameter(MappedParameters.GitHubOwner, false)\n    public owner: string;\n\n    @MappedParameter(MappedParameters.GitHubRepository, false)\n    public repo: string;\n\n    @Parameter({description: \"Branch or ref. Defaults to 'master'\", ...GitBranchRegExp, required: false})\n    public sha: string = \"master\";\n\n    @Parameter({description: \"regex\", required: false})\n    public repos: string = \".*\";\n\n    get credentials(): ProjectOperationCredentials {\n        throw new Error(\"Must be overridden\");\n    }\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * Return a single RepoRef or undefined if we're not identifying a single repo\n     * @return {RepoRef}\n     */\n    get repoRef(): BitBucketServerRepoRef {\n        return (!!this.owner && !!this.repo && !this.usesRegex) ?\n            new BitBucketServerRepoRef(\n                this.apiUrl,\n                this.owner, this.repo,\n                true,\n                this.sha) :\n            undefined;\n    }\n\n}\n"]}