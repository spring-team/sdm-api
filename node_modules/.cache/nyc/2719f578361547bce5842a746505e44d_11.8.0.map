{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/logInterpreters.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/support/logInterpreters.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAIH;;;;;GAKG;AACH,iCAAwC,OAAe,EAAE,QAAgB,EAAE;IACvE,OAAO,CAAC,GAAW,EAAkB,EAAE;QACnC,OAAO;YACH,YAAY,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YACtD,OAAO;SACV,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AAPD,0DAOC;AAED;;;;;GAKG;AACU,QAAA,aAAa,GAAiB,GAAG,EAAE;IAC5C,OAAO;QACH,YAAY,EAAE,EAAE;QAChB,OAAO,EAAE,uBAAuB;QAChC,cAAc,EAAE,KAAK;QACrB,iBAAiB,EAAE,IAAI;KAC1B,CAAC;AACN,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InterpretedLog, InterpretLog } from \"../../../../spi/log/InterpretedLog\";\n\n/**\n * Generally useful InterpretLog that takes the last n logs of the log\n * @param {string} message\n * @param lines number of lines to take\n * @return {InterpretLog}\n */\nexport function lastLinesLogInterpreter(message: string, lines: number = 10): InterpretLog {\n    return (log: string): InterpretedLog => {\n        return {\n            relevantPart: log.split(\"\\n\").slice(-lines).join(\"\\n\"),\n            message,\n        };\n    };\n}\n\n/**\n * Use when we don't want to report the log to the user under\n * any circumstances\n * @return {InterpretedLog}\n * @constructor\n */\nexport const LogSuppressor: InterpretLog = () => {\n    return {\n        relevantPart: \"\",\n        message: \"Do not report to user\",\n        includeFullLog: false,\n        doNotReportToUser: true,\n    };\n};\n"]}