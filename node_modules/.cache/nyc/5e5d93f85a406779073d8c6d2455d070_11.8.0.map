{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/ingesters/sdmGoalIngester.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/ingesters/sdmGoalIngester.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,2CAAqC;AAExB,QAAA,YAAY,GAAG,SAAS,CAAC;AAwEtC,sBAAmD,KAAU;IACzD,OAAO,CAAC,SAAqB,EAAE,EAAE;QAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QAC3D,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACN,CAAC;AALD,oCAKC;AAED,uBAA8B,CAAa,EAAE,CAAa;IACtD,OAAO,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,WAAW;QAClC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC;AAC1B,CAAC;AAHD,sCAGC;AAED,uBAA8B,EAAc;IACxC,OAAO,oBAAO,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;AACxD,CAAC;AAFD,sCAEC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sprintf } from \"sprintf-js\";\n\nexport const GoalRootType = \"SdmGoal\";\n\nexport type SdmGoalState = \"planned\" | \"requested\" | \"in_process\" | \"waiting_for_approval\" | \"success\" | \"failure\" | \"skipped\";\n\nexport type SdmGoalFulfillmentMethod = \"SDM fulfill on requested\" | \"side-effect\" | \"other\";\n\nexport interface SdmGoalFulfillment {\n    method: SdmGoalFulfillmentMethod;\n    name: string;\n}\n\n/**\n * Data persisted in the Atomist Cortex\n */\nexport interface SdmGoal extends SdmGoalKey {\n    uniqueName: string;\n    sha: string;\n    branch: string;\n\n    repo: {\n        name: string;\n        owner: string;\n        providerId: string;\n    };\n\n    fulfillment: SdmGoalFulfillment;\n\n    /**\n     * Current description that goes with the current status\n     */\n    description: string;\n    url?: string;\n    goalSet: string;\n    goalSetId: string;\n    state: SdmGoalState;\n\n    /**\n     * Timestamp\n     */\n    ts: number;\n\n    error?: string;\n    retryFeasible?: boolean;\n\n    approval?: SdmProvenance;\n    approvalRequired?: boolean;\n\n    provenance: SdmProvenance[];\n\n    preConditions: SdmGoalKey[];\n\n    externalKey?: string;\n\n    data?: string;\n}\n\nexport interface SdmProvenance {\n    correlationId: string;\n    registration: string;\n    version: string;\n    name: string;\n    ts: number;\n\n    userId?: string;\n    channelId?: string;\n}\n\nexport interface SdmGoalKey {\n    environment: string;\n    name: string;\n}\n\nexport function mapKeyToGoal<T extends SdmGoalKey>(goals: T[]): (k: SdmGoalKey) => T {\n    return (keyToFind: SdmGoalKey) => {\n        const found = goals.find(g => goalKeyEquals(g, keyToFind));\n        return found;\n    };\n}\n\nexport function goalKeyEquals(a: SdmGoalKey, b: SdmGoalKey): boolean {\n    return a.environment === b.environment &&\n        a.name === b.name;\n}\n\nexport function goalKeyString(gk: SdmGoalKey): string {\n    return sprintf(\"%s in %s\", gk.name, gk.environment);\n}\n"]}