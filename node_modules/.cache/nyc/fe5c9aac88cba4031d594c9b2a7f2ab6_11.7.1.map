{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/dsl/decisionTreeTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/blueprint/dsl/decisionTreeTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,sCAAwH;AACxH,0EAAgE;AAChE,uFAA8F;AAG9F,uCAAuC;AAEvC,MAAM,eAAe,GAAwB,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,GAAS,EAAE,gDAAC,OAAA,MAAM,CAAA,GAAA,EAAC,CAAC;AAE9F,kBAAyB,OAAiB;IACtC,OAAO;QACH,IAAI,EAAE,EAAC,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,GAAG,EAAC;QACtC,OAAO;KACuB,CAAC;AACvC,CAAC;AALD,4BAKC;AAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IAEnB,EAAE,CAAC,8BAA8B,EAAE,GAAS,EAAE;QAC1C,MAAM,EAAE,GAAqB,oBAAK,CAAC,gCAAY,CAAC;aAC3C,OAAO,CAAC,cAAc,CAAC;aACvB,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;QAC3C,MAAM,EAAE,GAAqB,oBAAK,CAAC,iCAAa,CAAC;aAC5C,OAAO,CAAC,iBAAiB,CAAC;aAC1B,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACpC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAS,EAAE;QAC1C,MAAM,EAAE,GAAwB,oBAAK,CAAS,gCAAY,EAAE,gCAAY,CAAC;aACpE,OAAO,CAAC,cAAc,CAAC;aACvB,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAS,EAAE;QAClC,MAAM,EAAE,GAAwB,oBAAK,CAAS,gCAAY,CAAC;aACtD,OAAO,CAAC,cAAc,CAAC;aACvB,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,GAAS,EAAE;QAC5B,MAAM,EAAE,GAAuB,oBAAK,CAAQ,gCAAY,CAAC;aACpD,OAAO,CAAC,iBAAiB,CAAC;aAC1B,IAAI,CACD,uBAAiB,CAAC,gCAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,sBAAgB,CAAC,CAC7E,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAgB,CAAC,CAAC;IAC3C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAS,EAAE;QACrC,MAAM,EAAE,GAAuB,oBAAK,CAAQ,gCAAY,CAAC;aACpD,OAAO,CAAC,iBAAiB,CAAC;aAC1B,IAAI,CACD,uBAAiB,CAAC,iCAAa,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAO,CAAC,EAClE,uBAAiB,CAAC,gCAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,sBAAgB,CAAC,CAC5E,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAgB,CAAC,CAAC;IAC3C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,GAAS,EAAE;QAC1B,MAAM,EAAE,GAAuB,oBAAK,CAAQ,gCAAY,CAAC;aACpD,OAAO,CAAC,iBAAiB,CAAC;aAC1B,IAAI,CACD,oBAAK,CAAQ,gCAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5C,uBAAiB,CAAC,iCAAa,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAO,CAAC,EAClE,uBAAiB,CAAC,gCAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,sBAAgB,CAAC,CAC5E,CACJ,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAgB,CAAC,CAAC;IAC3C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;QACxC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,EAAE,GAAuB,oBAAK,CAAQ,gCAAY,CAAC;aACpD,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;aACrB,OAAO,CAAC,iBAAiB,CAAC;aAC1B,IAAI,CACD,oBAAK,CAAQ,gCAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;aACtC,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;aACtB,IAAI,CACD,uBAAiB,CAAC,KAAK,GAAG,CAAC,EAAE,iCAAa,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAO,CAAC,EAC7E,uBAAiB,CAAC,gCAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,sBAAgB,CAAC,CAC5E,CACR,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,sBAAgB,CAAC,CAAC;IAC3C,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Goals, HttpServiceGoals, NoGoals, PushListenerInvocation, PushMapping, whenPushSatisfies } from \"../../../src\";\nimport { given } from \"../../../src/blueprint/dsl/decisionTree\";\nimport { FalsePushTest, TruePushTest } from \"../../common/listener/support/pushTestUtilsTest\";\n\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport * as assert from \"power-assert\";\n\nconst FrogPushMapping: PushMapping<string> = {name: \"frog\", valueForPush: async () => \"frog\"};\n\nexport function fakePush(project?: Project): PushListenerInvocation {\n    return {\n        push: {id: new Date().getTime() + \"_\"},\n        project,\n    } as any as PushListenerInvocation;\n}\n\ndescribe(\"given\", () => {\n\n    it(\"should combine true with one\", async () => {\n        const pm: PushMapping<any> = given(TruePushTest)\n            .itMeans(\"frogs coming\")\n            .then(FrogPushMapping);\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, \"frog\");\n    });\n\n    it(\"should combine false with one\", async () => {\n        const pm: PushMapping<any> = given(FalsePushTest)\n            .itMeans(\"no frogs coming\")\n            .then(FrogPushMapping);\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, undefined);\n    });\n\n    it(\"allows multiple given guards\", async () => {\n        const pm: PushMapping<string> = given<string>(TruePushTest, TruePushTest)\n            .itMeans(\"frogs coming\")\n            .then(FrogPushMapping);\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, \"frog\");\n    });\n\n    it(\"should allow literal\", async () => {\n        const pm: PushMapping<string> = given<string>(TruePushTest)\n            .itMeans(\"frogs coming\")\n            .set(\"frogs\");\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, \"frogs\");\n    });\n\n    it(\"nest with when\", async () => {\n        const pm: PushMapping<Goals> = given<Goals>(TruePushTest)\n            .itMeans(\"no frogs coming\")\n            .then(\n                whenPushSatisfies(TruePushTest).itMeans(\"http\").setGoals(HttpServiceGoals),\n            );\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, HttpServiceGoals);\n    });\n\n    it(\"nest with multiple when\", async () => {\n        const pm: PushMapping<Goals> = given<Goals>(TruePushTest)\n            .itMeans(\"no frogs coming\")\n            .then(\n                whenPushSatisfies(FalsePushTest).itMeans(\"nope\").setGoals(NoGoals),\n                whenPushSatisfies(TruePushTest).itMeans(\"yes\").setGoals(HttpServiceGoals),\n            );\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, HttpServiceGoals);\n    });\n\n    it(\"nested given\", async () => {\n        const pm: PushMapping<Goals> = given<Goals>(TruePushTest)\n            .itMeans(\"no frogs coming\")\n            .then(\n                given<Goals>(TruePushTest).itMeans(\"case1\").then(\n                    whenPushSatisfies(FalsePushTest).itMeans(\"nope\").setGoals(NoGoals),\n                    whenPushSatisfies(TruePushTest).itMeans(\"yes\").setGoals(HttpServiceGoals),\n                ),\n            );\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, HttpServiceGoals);\n    });\n\n    it(\"nested given with variable\", async () => {\n        let count = 0;\n        const pm: PushMapping<Goals> = given<Goals>(TruePushTest)\n            .init(() => count = 0)\n            .itMeans(\"no frogs coming\")\n            .then(\n                given<Goals>(TruePushTest).itMeans(\"case1\")\n                    .compute(() => count++)\n                    .then(\n                        whenPushSatisfies(count > 0, FalsePushTest).itMeans(\"nope\").setGoals(NoGoals),\n                        whenPushSatisfies(TruePushTest).itMeans(\"yes\").setGoals(HttpServiceGoals),\n                    ),\n            );\n        const mapped = await pm.valueForPush(fakePush());\n        assert.equal(mapped, HttpServiceGoals);\n    });\n});\n"]}