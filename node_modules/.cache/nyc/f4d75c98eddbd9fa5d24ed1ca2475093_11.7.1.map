{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/allReposInTeam.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/allReposInTeam.ts"],"names":[],"mappings":";;AACA,kGAA0G;AAG1G,4BAA4B;AAE5B,uDAA4D;AAE5D,uEAAuE;AACvE,MAAM,QAAQ,GAAG,GAAG,CAAC;AAErB;;;;;GAKG;AACH,wBAA+B,GAAY;IACvC,OAAO,CAAC,OAAuB,EAAE,EAAE;QAC/B,IAAI,GAAG,EAAE;YACL,OAAO,4CAA0B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;SACnD;QACD,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;AACN,CAAC;AAPD,wCAOC;AAED;;;;;GAKG;AACH,sBAAsB,OAAuB,EAAE,MAAc;IACzD,OAAO,OAAO,CAAC,WAAW,CAAC,KAAK,CAA2C;QACvE,IAAI,EAAE,aAAa;QACnB,SAAS,EAAE,EAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,MAAM,EAAC;KAC9C,CAAC;SACG,IAAI,CAAC,MAAM,CAAC,EAAE;QACX,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,yBAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;SACD,IAAI,CAAC,KAAK,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,CAAC;YACP,YAAY,CAAC,OAAO,EAAE,MAAM,GAAG,QAAQ,CAAC;iBACnC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { HandlerContext } from \"@atomist/automation-client\";\nimport { twoTierDirectoryRepoFinder } from \"@atomist/automation-client/operations/common/localRepoFinder\";\nimport { RepoFinder } from \"@atomist/automation-client/operations/common/repoFinder\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as _ from \"lodash\";\nimport { ReposInTeam } from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\n\n// Hard-coded limit in GraphQL queries. Not sure why we can't pass this\nconst PageSize = 100;\n\n/**\n * Use a GraphQL query to find all repos for the current team,\n * or look locally if appropriate, in current working directory\n * @param cwd directory to look in if this is local\n * @constructor\n */\nexport function allReposInTeam(cwd?: string): RepoFinder {\n    return (context: HandlerContext) => {\n        if (cwd) {\n            return twoTierDirectoryRepoFinder(cwd)(context);\n        }\n        return queryForPage(context, 0);\n    };\n}\n\n/**\n * Recursively query for repos from the present offset\n * @param {HandlerContext} context\n * @param {number} offset\n * @return {Promise<RepoRef[]>}\n */\nfunction queryForPage(context: HandlerContext, offset: number): Promise<RemoteRepoRef[]> {\n    return context.graphClient.query<ReposInTeam.Query, ReposInTeam.Variables>({\n        name: \"ReposInTeam\",\n        variables: {teamId: context.teamId, offset},\n    })\n        .then(result => {\n            return _.flatMap(result.ChatTeam[0].orgs, org =>\n                org.repo.map(r => toRemoteRepoRef(r, {})));\n        })\n        .then(repos => {\n            return (repos.length < PageSize) ?\n                repos :\n                queryForPage(context, offset + PageSize)\n                    .then(moreRepos => repos.concat(moreRepos));\n        });\n}\n"]}