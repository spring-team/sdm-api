{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/CommandLineCloudFoundryDeployer.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/pcf/CommandLineCloudFoundryDeployer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { runCommand } from \"@atomist/automation-client/action/cli/commandLine\";\nimport { ProjectOperationCredentials } from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { spawn } from \"child_process\";\nimport { DeployableArtifact } from \"../../../../spi/artifact/ArtifactStore\";\nimport { Deployer } from \"../../../../spi/deploy/Deployer\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { asSpawnCommand, spawnAndWatch, SpawnCommand, stringifySpawnCommand } from \"../../../../util/misc/spawned\";\nimport {DelimitedWriteProgressLogDecorator} from \"../../../log/DelimitedWriteProgressLogDecorator\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { identification } from \"../../build/local/maven/pomParser\";\nimport { ExecuteGoalResult } from \"../../goals/ExecuteGoalResult\";\nimport { parseCloudFoundryLogForEndpoint } from \"./cloudFoundryLogParser\";\nimport { CloudFoundryDeployment, CloudFoundryInfo, CloudFoundryManifestPath } from \"./CloudFoundryTarget\";\n\n/**\n * Spawn a new process to use the Cloud Foundry CLI to push.\n * Note that this isn't thread safe concerning multiple logins or spaces.\n */\nexport class CommandLineCloudFoundryDeployer implements Deployer<CloudFoundryInfo, CloudFoundryDeployment> {\n\n    constructor(private readonly projectLoader: ProjectLoader) {\n    }\n\n    public async deploy(da: DeployableArtifact,\n                        cfi: CloudFoundryInfo,\n                        log: ProgressLog,\n                        credentials: ProjectOperationCredentials): Promise<CloudFoundryDeployment[]> {\n        logger.info(\"Deploying app [%j] to Cloud Foundry [%s]\", da, cfi.description);\n\n        // We need the Cloud Foundry manifest. If it's not found, we can't deploy\n        // We want a fresh version unless we need it build\n        return this.projectLoader.doWithProject({credentials, id: da.id, readOnly: !da.cwd}, async project => {\n            const manifestFile = await project.findFile(CloudFoundryManifestPath);\n\n            if (!cfi.api || !cfi.org || !cfi.username || !cfi.password) {\n                throw new Error(\"Cloud foundry authentication information missing. See CloudFoundryTarget.ts\");\n            }\n\n            const opts = {cwd: !!da.cwd ? da.cwd : project.baseDir};\n\n            // Note: if the password is wrong, things hangs forever waiting for input.\n            await runCommand(\n                `cf login -a ${cfi.api} -o ${cfi.org} -u ${cfi.username} -p '${cfi.password}' -s ${cfi.space}`,\n                opts);\n            logger.debug(\"Successfully selected space [%s]\", cfi.space);\n            // Turn off color so we don't have unpleasant escape codes in stream\n            await runCommand(\"cf config --color false\", {cwd: da.cwd});\n            const spawnCommand: SpawnCommand = {\n                command: \"cf\",\n                args: [\n                    \"push\",\n                    da.name,\n                    \"-f\",\n                    project.baseDir + \"/\" + manifestFile.path,\n                    \"--random-route\"]\n                    .concat(\n                        !!da.filename ?\n                            [\"-p\",\n                                da.filename] :\n                            []),\n            };\n\n            logger.info(\"About to issue Cloud Foundry command %s: options=%j\", stringifySpawnCommand(spawnCommand), opts);\n            const childProcess = spawn(spawnCommand.command, spawnCommand.args, opts);\n            const newLineDelimitedLog = new DelimitedWriteProgressLogDecorator(log, \"\\n\");\n            childProcess.stdout.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n            childProcess.stderr.on(\"data\", what => newLineDelimitedLog.write(what.toString()));\n            return [await new Promise<CloudFoundryDeployment>((resolve, reject) => {\n                childProcess.addListener(\"exit\", (code, signal) => {\n                    if (code !== 0) {\n                        reject(`Error: code ${code}`);\n                    }\n                    resolve({\n                        endpoint: parseCloudFoundryLogForEndpoint(log.log),\n                        appName: da.name,\n                    });\n                });\n                childProcess.addListener(\"error\", reject);\n            })];\n        });\n    }\n\n    public async findDeployments(id: RemoteRepoRef,\n                                 ti: CloudFoundryInfo,\n                                 credentials: ProjectOperationCredentials): Promise<CloudFoundryDeployment[]> {\n        // This may or may not be deployed. For now, let's guess that it is.\n        return this.projectLoader.doWithProject({credentials, id, readOnly: true}, async project => {\n            const pom = await project.findFile(\"pom.xml\");\n            const content = await pom.getContent();\n            const va = await identification(content);\n\n            return [{appName: va.artifact}];\n        });\n    }\n\n    public async undeploy(cfi: CloudFoundryInfo, deployment: CloudFoundryDeployment, log: ProgressLog): Promise<ExecuteGoalResult> {\n        await spawnAndWatch(asSpawnCommand(\n            `cf login -a ${cfi.api} -o ${cfi.org} -u ${cfi.username} -p '${cfi.password}' -s ${cfi.space}`),\n            {}, log);\n\n        return spawnAndWatch(asSpawnCommand(`cf delete ${deployment.appName}`), {}, log);\n    }\n\n    public logInterpreter(log: string) {\n        return {\n            relevantPart: \"\",\n            message: \"Deploy failed\",\n        };\n    }\n\n}\n"]}