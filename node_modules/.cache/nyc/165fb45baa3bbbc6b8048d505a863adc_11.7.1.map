{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/k8s/launchGoalK8.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/k8s/launchGoalK8.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AutomationContextAware,\n    HandlerContext,\n    HandlerResult,\n} from \"@atomist/automation-client\";\nimport { configurationValue } from \"@atomist/automation-client/configuration\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\nimport { StringCapturingProgressLog } from \"../../../../../common/log/StringCapturingProgressLog\";\nimport { SdmGoal } from \"../../../../../ingesters/sdmGoalIngester\";\nimport { ProgressLog } from \"../../../../../spi/log/ProgressLog\";\nimport { OnAnyRequestedSdmGoal } from \"../../../../../typings/types\";\nimport { spawnAndWatch } from \"../../../../../util/misc/spawned\";\n\n/**\n * Launch a goal as a kubernetes job\n * @param {OnAnyRequestedSdmGoal.SdmGoal} goal\n * @param {HandlerContext} ctx\n * @param {ProgressLog} progressLog\n * @returns {Promise<HandlerResult>}\n * @constructor\n */\nexport const KubernetesIsolatedGoalLauncher = async (goal: OnAnyRequestedSdmGoal.SdmGoal,\n                                                     ctx: HandlerContext,\n                                                     progressLog: ProgressLog): Promise<HandlerResult> => {\n    const deploymentName = process.env.ATOMIST_DEPLOYMENT_NAME || configurationValue<string>(\"name\");\n    const deploymentNamespace = process.env.ATOMIST_DEPLOYMENT_NAMESPACE || \"default\";\n\n    const log = new StringCapturingProgressLog();\n\n    let result = await spawnAndWatch({\n            command: \"kubectl\",\n            args: [\"get\", \"deployment\", deploymentName, \"-n\", deploymentNamespace, \"-o\", \"json\"],\n        },\n        {},\n        log,\n        {\n            errorFinder: code => code !== 0,\n        },\n    );\n\n    if (result.code !== 0) {\n        return result;\n    }\n\n    const jobSpec = JSON.parse(JobSpec);\n    const containerSpec = JSON.parse(log.log).spec.template.spec;\n    jobSpec.spec.template.spec = containerSpec;\n\n    jobSpec.metadata.name =\n        `${deploymentName}-job-${goal.goalSetId.slice(0, 7)}-${goal.uniqueName.toLocaleLowerCase()}`;\n    jobSpec.metadata.namespace = deploymentNamespace;\n    jobSpec.spec.template.spec.restartPolicy = \"Never\";\n    jobSpec.spec.template.spec.containers[0].name = jobSpec.metadata.name;\n    jobSpec.spec.template.spec.containers[0].env.push({\n            name: \"ATOMIST_JOB_NAME\",\n            value: jobSpec.metadata.name,\n        },\n        {\n            name: \"ATOMIST_GOAL_TEAM\",\n            value: ctx.teamId,\n        },\n        {\n            name: \"ATOMIST_GOAL_TEAM_NAME\",\n            value: (ctx as any as AutomationContextAware).context.teamName,\n        },\n        {\n            name: \"ATOMIST_GOAL_ID\",\n            value: goal.id,\n        },\n        {\n            name: \"ATOMIST_CORRELATION_ID\",\n            value: ctx.correlationId,\n        },\n        {\n            name: \"ATOMIST_ISOLATED_GOAL\",\n            value: \"true\",\n        });\n\n    const tempfile = require(\"tempfile\")(\".json\");\n    await fs.writeFile(tempfile, JSON.stringify(jobSpec, null, 2));\n\n    // Check if this job was previously launched\n    result = await spawnAndWatch({\n            command: \"kubectl\",\n            args: [\"get\", \"job\", jobSpec.metadata.name, \"-n\", deploymentNamespace],\n        },\n        {},\n        progressLog,\n        {\n            errorFinder: code => code !== 0,\n        },\n    );\n\n    if (result.code !== 0) {\n        return spawnAndWatch({\n                command: \"kubectl\",\n                args: [\"apply\", \"-f\", tempfile],\n            },\n            {},\n            progressLog,\n            {\n                errorFinder: code => code !== 0,\n            },\n        );\n    } else {\n        return spawnAndWatch({\n                command: \"kubectl\",\n                args: [\"replace\", \"--force\", \"-f\", tempfile],\n            },\n            {},\n            progressLog,\n            {\n                errorFinder: code => code !== 0,\n            },\n        );\n    }\n    // query kube to make sure the job got scheduled\n    // kubectl get job <jobname> -o json\n};\n\nconst JobSpec = `{\n    \"kind\" : \"Job\",\n    \"apiVersion\" : \"batch/v1\",\n    \"metadata\" : {\n      \"name\" : \"sample-sdm-job\",\n      \"namespace\" : \"default\"\n    },\n    \"spec\" : {\n      \"template\" : {\n        \"spec\" : {\n          \"containers\" : []\n        }\n      }\n    }\n  }`;\n\nexport interface KubernetesOptions {\n    name: string;\n    environment: string;\n\n    ns?: string;\n    imagePullSecret?: string;\n    port?: number;\n    path?: string;\n    host?: string;\n    protocol?: string;\n    replicas?: number;\n}\n\n/**\n * Sets kubernetes deployment specific data to an SdmGoal\n * @param {SdmGoal} goal\n * @param {KubernetesOptions} options\n * @param {GitProject} p\n * @returns {Promise<SdmGoal>}\n */\nexport async function createKubernetesData(goal: SdmGoal, options: KubernetesOptions, p: GitProject): Promise<SdmGoal> {\n    const deploymentSpec = await readKubernetesSpec(p, \"deployment.json\");\n    const serviceSpec = await readKubernetesSpec(p, \"service.json\");\n    return {\n        ...goal,\n        data: JSON.stringify({\n            kubernetes: {\n                ...options,\n                deploymentSpec,\n                serviceSpec,\n            },\n        }),\n    };\n}\n\nasync function readKubernetesSpec(p: GitProject, name: string): Promise<string> {\n    const specPath = path.join(\".atomist\", \"kubernetes\", name);\n    if (p.fileExistsSync(specPath)) {\n        return (await p.getFile(specPath)).getContent();\n    } else {\n        return undefined;\n    }\n}\n"]}