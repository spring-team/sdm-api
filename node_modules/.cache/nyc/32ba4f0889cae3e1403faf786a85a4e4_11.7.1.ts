"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_2osw4ddt1e=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/gitHubContext.ts",hash="580afeb1c3a7ab7440a54fdb1f4770550007eb8b",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/gitHubContext.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:28},end:{line:18,column:65}},"2":{start:{line:19,column:0},end:{line:19,column:37}},"3":{start:{line:20,column:0},end:{line:20,column:45}},"4":{start:{line:21,column:0},end:{line:21,column:42}},"5":{start:{line:23,column:0},end:{line:23,column:42}},"6":{start:{line:24,column:0},end:{line:24,column:47}},"7":{start:{line:32,column:4},end:{line:57,column:5}},"8":{start:{line:33,column:30},end:{line:33,column:47}},"9":{start:{line:34,column:29},end:{line:34,column:57}},"10":{start:{line:35,column:27},end:{line:35,column:54}},"11":{start:{line:36,column:8},end:{line:38,column:9}},"12":{start:{line:37,column:12},end:{line:37,column:19}},"13":{start:{line:39,column:25},end:{line:39,column:38}},"14":{start:{line:40,column:25},end:{line:40,column:59}},"15":{start:{line:41,column:26},end:{line:41,column:55}},"16":{start:{line:42,column:8},end:{line:45,column:9}},"17":{start:{line:43,column:12},end:{line:43,column:117}},"18":{start:{line:44,column:12},end:{line:44,column:19}},"19":{start:{line:46,column:21},end:{line:46,column:33}},"20":{start:{line:47,column:26},end:{line:47,column:39}},"21":{start:{line:48,column:8},end:{line:56,column:10}},"22":{start:{line:59,column:0},end:{line:59,column:36}},"23":{start:{line:65,column:4},end:{line:69,column:5}},"24":{start:{line:66,column:23},end:{line:66,column:45}},"25":{start:{line:67,column:23},end:{line:67,column:45}},"26":{start:{line:68,column:8},end:{line:68,column:88}},"27":{start:{line:71,column:0},end:{line:71,column:40}},"28":{start:{line:73,column:19},end:{line:73,column:41}},"29":{start:{line:74,column:19},end:{line:74,column:41}},"30":{start:{line:75,column:4},end:{line:75,column:59}}},fnMap:{"0":{name:"splitContext",decl:{start:{line:31,column:9},end:{line:31,column:21}},loc:{start:{line:31,column:31},end:{line:58,column:1}},line:31},"1":{name:"contextIsAfter",decl:{start:{line:64,column:9},end:{line:64,column:23}},loc:{start:{line:64,column:44},end:{line:70,column:1}},line:64},"2":{name:"belongToSameSeriesOfGoals",decl:{start:{line:72,column:9},end:{line:72,column:34}},loc:{start:{line:72,column:55},end:{line:76,column:1}},line:72}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:57,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:57,column:5}},{start:{line:32,column:4},end:{line:57,column:5}}],line:32},"1":{loc:{start:{line:36,column:8},end:{line:38,column:9}},type:"if",locations:[{start:{line:36,column:8},end:{line:38,column:9}},{start:{line:36,column:8},end:{line:38,column:9}}],line:36},"2":{loc:{start:{line:42,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:42,column:8},end:{line:45,column:9}},{start:{line:42,column:8},end:{line:45,column:9}}],line:42},"3":{loc:{start:{line:42,column:12},end:{line:42,column:35}},type:"binary-expr",locations:[{start:{line:42,column:12},end:{line:42,column:22}},{start:{line:42,column:26},end:{line:42,column:35}}],line:42},"4":{loc:{start:{line:65,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:65,column:4},end:{line:69,column:5}},{start:{line:65,column:4},end:{line:69,column:5}}],line:65},"5":{loc:{start:{line:68,column:15},end:{line:68,column:87}},type:"binary-expr",locations:[{start:{line:68,column:15},end:{line:68,column:48}},{start:{line:68,column:52},end:{line:68,column:87}}],line:68},"6":{loc:{start:{line:75,column:11},end:{line:75,column:58}},type:"binary-expr",locations:[{start:{line:75,column:11},end:{line:75,column:17}},{start:{line:75,column:21},end:{line:75,column:27}},{start:{line:75,column:31},end:{line:75,column:58}}],line:75}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2osw4ddt1e.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const automation_client_1=(cov_2osw4ddt1e.s[1]++,require("@atomist/automation-client"));cov_2osw4ddt1e.s[2]++;exports.BaseContext="sdm/atomist/";cov_2osw4ddt1e.s[3]++;exports.IndependentOfEnvironment="0-code/";cov_2osw4ddt1e.s[4]++;exports.StagingEnvironment="1-staging/";// should always be number dash name. The number may be a decimal
cov_2osw4ddt1e.s[5]++;exports.ProductionEnvironment="2-prod/";cov_2osw4ddt1e.s[6]++;exports.ProjectDisposalEnvironment="8-doom/";/**
 * if this is a context we created, then we can interpret it.
 * Otherwise returns undefined
 * @param {string} context
 * @returns {{base: string; env: string; stage: string}}
 */function splitContext(context){cov_2osw4ddt1e.f[0]++;cov_2osw4ddt1e.s[7]++;if(context.startsWith(exports.BaseContext)){cov_2osw4ddt1e.b[0][0]++;const numberAndName=(cov_2osw4ddt1e.s[8]++,/([0-9\.]+)-(.*)/);const wholeContext=(cov_2osw4ddt1e.s[9]++,/^sdm\/atomist\/(.*)\/(.*)$/);const matchWhole=(cov_2osw4ddt1e.s[10]++,context.match(wholeContext));cov_2osw4ddt1e.s[11]++;if(!matchWhole){cov_2osw4ddt1e.b[1][0]++;cov_2osw4ddt1e.s[12]++;return;}else{cov_2osw4ddt1e.b[1][1]++;}const goalPart=(cov_2osw4ddt1e.s[13]++,matchWhole[2]);const matchEnv=(cov_2osw4ddt1e.s[14]++,matchWhole[1].match(numberAndName));const matchGoal=(cov_2osw4ddt1e.s[15]++,goalPart.match(numberAndName));cov_2osw4ddt1e.s[16]++;if((cov_2osw4ddt1e.b[3][0]++,!matchGoal)||(cov_2osw4ddt1e.b[3][1]++,!matchEnv)){cov_2osw4ddt1e.b[2][0]++;cov_2osw4ddt1e.s[17]++;automation_client_1.logger.debug(`Did not find number and name in ${matchWhole[1]} or ${matchWhole[2]}`);cov_2osw4ddt1e.s[18]++;return;}else{cov_2osw4ddt1e.b[2][1]++;}const name=(cov_2osw4ddt1e.s[19]++,matchGoal[2]);const goalOrder=(cov_2osw4ddt1e.s[20]++,+matchGoal[1]);cov_2osw4ddt1e.s[21]++;return{base:exports.BaseContext,env:matchEnv[2],envOrder:+matchEnv[1],name,goalOrder,envPart:matchWhole[1],goalPart,goalName:name};}else{cov_2osw4ddt1e.b[0][1]++;}}cov_2osw4ddt1e.s[22]++;exports.splitContext=splitContext;/*
 * true if contextB is in the same series of goals as A,
 * and A comes before B
 */function contextIsAfter(contextA,contextB){cov_2osw4ddt1e.f[1]++;cov_2osw4ddt1e.s[23]++;if(belongToSameSeriesOfGoals(contextA,contextB)){cov_2osw4ddt1e.b[4][0]++;const splitA=(cov_2osw4ddt1e.s[24]++,splitContext(contextA));const splitB=(cov_2osw4ddt1e.s[25]++,splitContext(contextB));cov_2osw4ddt1e.s[26]++;return(cov_2osw4ddt1e.b[5][0]++,splitA.envOrder<splitB.envOrder)||(cov_2osw4ddt1e.b[5][1]++,splitA.goalOrder<splitB.goalOrder);}else{cov_2osw4ddt1e.b[4][1]++;}}cov_2osw4ddt1e.s[27]++;exports.contextIsAfter=contextIsAfter;function belongToSameSeriesOfGoals(contextA,contextB){cov_2osw4ddt1e.f[2]++;const splitA=(cov_2osw4ddt1e.s[28]++,splitContext(contextA));const splitB=(cov_2osw4ddt1e.s[29]++,splitContext(contextB));cov_2osw4ddt1e.s[30]++;return(cov_2osw4ddt1e.b[6][0]++,splitA)&&(cov_2osw4ddt1e.b[6][1]++,splitB)&&(cov_2osw4ddt1e.b[6][2]++,splitA.base===splitB.base);}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9nb2Fscy9naXRIdWJDb250ZXh0LnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy9zcmMvY29tbW9uL2RlbGl2ZXJ5L2dvYWxzL2dpdEh1YkNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILGtFQUFvRDtBQW1CdkMsUUFBQSxXQUFXLEdBQUcsY0FBYyxDQUFDO0FBQzdCLFFBQUEsd0JBQXdCLEdBQW9CLFNBQVMsQ0FBQztBQUN0RCxRQUFBLGtCQUFrQixHQUFvQixZQUFZLENBQUM7QUFDaEUsaUVBQWlFO0FBQ3BELFFBQUEscUJBQXFCLEdBQW9CLFNBQVMsQ0FBQztBQUNuRCxRQUFBLDBCQUEwQixHQUFvQixTQUFTLENBQUM7QUFFckU7Ozs7O0dBS0c7QUFDSCxzQkFBNkIsT0FBNEI7SUFDckQsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLG1CQUFXLENBQUMsRUFBRTtRQUNqQyxNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQztRQUN4QyxNQUFNLFlBQVksR0FBRyw0QkFBNEIsQ0FBQztRQUVsRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixPQUFPO1NBQ1Y7UUFFRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNwRCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDekIsMEJBQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JGLE9BQU87U0FDVjtRQUNELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoQyxPQUFPO1lBQ0gsSUFBSSxFQUFFLG1CQUFXO1lBQ2pCLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJO1lBQzVCLFNBQVM7WUFDVCxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN0QixRQUFRO1lBQ1IsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQztLQUNMO0FBQ0wsQ0FBQztBQTlCRCxvQ0E4QkM7QUFFRDs7O0dBR0c7QUFDSCx3QkFBK0IsUUFBNkIsRUFBRSxRQUE2QjtJQUN2RixJQUFJLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRTtRQUMvQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUNuRjtBQUNMLENBQUM7QUFORCx3Q0FNQztBQUVELG1DQUFtQyxRQUE2QixFQUFFLFFBQTZCO0lBQzNGLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsT0FBTyxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQztBQUMzRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCDCqSAyMDE4IEF0b21pc3QsIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIkBhdG9taXN0L2F1dG9tYXRpb24tY2xpZW50XCI7XG5pbXBvcnQgeyBTdGF0dXNTdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi90eXBpbmdzL3R5cGVzXCI7XG5cbi8vIGNvbnZlbnRpb246IFwic2RtL2F0b21pc3QvIy1lbnYvIy1nb2FsXCIgKHRoZSBudW1iZXJzIGFyZSBmb3Igb3JkZXJpbmcpXG5leHBvcnQgdHlwZSBHaXRIdWJTdGF0dXNDb250ZXh0ID0gc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YlN0YXR1cyB7XG4gICAgY29udGV4dD86IEdpdEh1YlN0YXR1c0NvbnRleHQ7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgc3RhdGU/OiBTdGF0dXNTdGF0ZTtcbiAgICB0YXJnZXRVcmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2l0SHViU3RhdHVzQW5kRnJpZW5kcyBleHRlbmRzIEdpdEh1YlN0YXR1cyB7XG4gICAgc2libGluZ3M6IEdpdEh1YlN0YXR1c1tdO1xufVxuXG5leHBvcnQgdHlwZSBHb2FsRW52aXJvbm1lbnQgPSBcIjAtY29kZS9cIiB8IFwiMS1zdGFnaW5nL1wiIHwgXCIyLXByb2QvXCIgfCBcIjgtZG9vbS9cIjtcblxuZXhwb3J0IGNvbnN0IEJhc2VDb250ZXh0ID0gXCJzZG0vYXRvbWlzdC9cIjtcbmV4cG9ydCBjb25zdCBJbmRlcGVuZGVudE9mRW52aXJvbm1lbnQ6IEdvYWxFbnZpcm9ubWVudCA9IFwiMC1jb2RlL1wiO1xuZXhwb3J0IGNvbnN0IFN0YWdpbmdFbnZpcm9ubWVudDogR29hbEVudmlyb25tZW50ID0gXCIxLXN0YWdpbmcvXCI7XG4vLyBzaG91bGQgYWx3YXlzIGJlIG51bWJlciBkYXNoIG5hbWUuIFRoZSBudW1iZXIgbWF5IGJlIGEgZGVjaW1hbFxuZXhwb3J0IGNvbnN0IFByb2R1Y3Rpb25FbnZpcm9ubWVudDogR29hbEVudmlyb25tZW50ID0gXCIyLXByb2QvXCI7XG5leHBvcnQgY29uc3QgUHJvamVjdERpc3Bvc2FsRW52aXJvbm1lbnQ6IEdvYWxFbnZpcm9ubWVudCA9IFwiOC1kb29tL1wiO1xuXG4vKipcbiAqIGlmIHRoaXMgaXMgYSBjb250ZXh0IHdlIGNyZWF0ZWQsIHRoZW4gd2UgY2FuIGludGVycHJldCBpdC5cbiAqIE90aGVyd2lzZSByZXR1cm5zIHVuZGVmaW5lZFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRcbiAqIEByZXR1cm5zIHt7YmFzZTogc3RyaW5nOyBlbnY6IHN0cmluZzsgc3RhZ2U6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdENvbnRleHQoY29udGV4dDogR2l0SHViU3RhdHVzQ29udGV4dCkge1xuICAgIGlmIChjb250ZXh0LnN0YXJ0c1dpdGgoQmFzZUNvbnRleHQpKSB7XG4gICAgICAgIGNvbnN0IG51bWJlckFuZE5hbWUgPSAvKFswLTlcXC5dKyktKC4qKS87XG4gICAgICAgIGNvbnN0IHdob2xlQ29udGV4dCA9IC9ec2RtXFwvYXRvbWlzdFxcLyguKilcXC8oLiopJC87XG5cbiAgICAgICAgY29uc3QgbWF0Y2hXaG9sZSA9IGNvbnRleHQubWF0Y2god2hvbGVDb250ZXh0KTtcbiAgICAgICAgaWYgKCFtYXRjaFdob2xlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBnb2FsUGFydCA9IG1hdGNoV2hvbGVbMl07XG4gICAgICAgIGNvbnN0IG1hdGNoRW52ID0gbWF0Y2hXaG9sZVsxXS5tYXRjaChudW1iZXJBbmROYW1lKTtcbiAgICAgICAgY29uc3QgbWF0Y2hHb2FsID0gZ29hbFBhcnQubWF0Y2gobnVtYmVyQW5kTmFtZSk7XG4gICAgICAgIGlmICghbWF0Y2hHb2FsIHx8ICFtYXRjaEVudikge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBEaWQgbm90IGZpbmQgbnVtYmVyIGFuZCBuYW1lIGluICR7bWF0Y2hXaG9sZVsxXX0gb3IgJHttYXRjaFdob2xlWzJdfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWUgPSBtYXRjaEdvYWxbMl07XG4gICAgICAgIGNvbnN0IGdvYWxPcmRlciA9ICttYXRjaEdvYWxbMV07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IEJhc2VDb250ZXh0LFxuICAgICAgICAgICAgZW52OiBtYXRjaEVudlsyXSxcbiAgICAgICAgICAgIGVudk9yZGVyOiArbWF0Y2hFbnZbMV0sIG5hbWUsXG4gICAgICAgICAgICBnb2FsT3JkZXIsXG4gICAgICAgICAgICBlbnZQYXJ0OiBtYXRjaFdob2xlWzFdLFxuICAgICAgICAgICAgZ29hbFBhcnQsXG4gICAgICAgICAgICBnb2FsTmFtZTogbmFtZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qXG4gKiB0cnVlIGlmIGNvbnRleHRCIGlzIGluIHRoZSBzYW1lIHNlcmllcyBvZiBnb2FscyBhcyBBLFxuICogYW5kIEEgY29tZXMgYmVmb3JlIEJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRleHRJc0FmdGVyKGNvbnRleHRBOiBHaXRIdWJTdGF0dXNDb250ZXh0LCBjb250ZXh0QjogR2l0SHViU3RhdHVzQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGlmIChiZWxvbmdUb1NhbWVTZXJpZXNPZkdvYWxzKGNvbnRleHRBLCBjb250ZXh0QikpIHtcbiAgICAgICAgY29uc3Qgc3BsaXRBID0gc3BsaXRDb250ZXh0KGNvbnRleHRBKTtcbiAgICAgICAgY29uc3Qgc3BsaXRCID0gc3BsaXRDb250ZXh0KGNvbnRleHRCKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0QS5lbnZPcmRlciA8IHNwbGl0Qi5lbnZPcmRlciB8fCBzcGxpdEEuZ29hbE9yZGVyIDwgc3BsaXRCLmdvYWxPcmRlcjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJlbG9uZ1RvU2FtZVNlcmllc09mR29hbHMoY29udGV4dEE6IEdpdEh1YlN0YXR1c0NvbnRleHQsIGNvbnRleHRCOiBHaXRIdWJTdGF0dXNDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc3BsaXRBID0gc3BsaXRDb250ZXh0KGNvbnRleHRBKTtcbiAgICBjb25zdCBzcGxpdEIgPSBzcGxpdENvbnRleHQoY29udGV4dEIpO1xuICAgIHJldHVybiBzcGxpdEEgJiYgc3BsaXRCICYmIHNwbGl0QS5iYXNlID09PSBzcGxpdEIuYmFzZTtcbn1cbiJdfQ==