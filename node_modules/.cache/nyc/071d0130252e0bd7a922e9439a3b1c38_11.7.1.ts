"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_6ja42kq8h=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/webhook/ImageLink.ts",hash="24dce58a44293b2eed1f645336c3346c88d2c3d0",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/util/webhook/ImageLink.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:28},end:{line:18,column:65}},"2":{start:{line:19,column:16},end:{line:19,column:32}},"3":{start:{line:20,column:21},end:{line:20,column:45}},"4":{start:{line:21,column:28},end:{line:27,column:1}},"5":{start:{line:42,column:20},end:{line:49,column:5}},"6":{start:{line:50,column:4},end:{line:50,column:63}},"7":{start:{line:52,column:0},end:{line:52,column:44}},"8":{start:{line:66,column:20},end:{line:76,column:5}},"9":{start:{line:77,column:4},end:{line:77,column:68}},"10":{start:{line:79,column:0},end:{line:79,column:52}},"11":{start:{line:91,column:4},end:{line:91,column:68}},"12":{start:{line:92,column:20},end:{line:92,column:88}},"13":{start:{line:93,column:16},end:{line:93,column:63}},"14":{start:{line:94,column:4},end:{line:106,column:7}},"15":{start:{line:95,column:8},end:{line:95,column:102}},"16":{start:{line:96,column:8},end:{line:101,column:11}},"17":{start:{line:97,column:24},end:{line:97,column:28}},"18":{start:{line:99,column:12},end:{line:99,column:98}},"19":{start:{line:100,column:12},end:{line:100,column:23}},"20":{start:{line:104,column:8},end:{line:104,column:95}},"21":{start:{line:105,column:8},end:{line:105,column:21}},"22":{start:{line:108,column:0},end:{line:108,column:34}}},fnMap:{"0":{name:"postBuildWebhook",decl:{start:{line:41,column:9},end:{line:41,column:25}},loc:{start:{line:41,column:107},end:{line:51,column:1}},line:41},"1":{name:"postLinkImageWebhook",decl:{start:{line:65,column:9},end:{line:65,column:29}},loc:{start:{line:65,column:102},end:{line:78,column:1}},line:65},"2":{name:"postWebhook",decl:{start:{line:90,column:9},end:{line:90,column:20}},loc:{start:{line:90,column:83},end:{line:107,column:1}},line:90},"3":{name:"(anonymous_3)",decl:{start:{line:94,column:38},end:{line:94,column:39}},loc:{start:{line:94,column:61},end:{line:102,column:5}},line:94},"4":{name:"(anonymous_4)",decl:{start:{line:97,column:18},end:{line:97,column:19}},loc:{start:{line:97,column:24},end:{line:97,column:28}},line:97},"5":{name:"(anonymous_5)",decl:{start:{line:98,column:19},end:{line:98,column:20}},loc:{start:{line:98,column:26},end:{line:101,column:9}},line:98},"6":{name:"(anonymous_6)",decl:{start:{line:103,column:15},end:{line:103,column:16}},loc:{start:{line:103,column:22},end:{line:106,column:5}},line:103}},branchMap:{"0":{loc:{start:{line:41,column:71},end:{line:41,column:105}},type:"default-arg",locations:[{start:{line:41,column:86},end:{line:41,column:105}}],line:41},"1":{loc:{start:{line:65,column:66},end:{line:65,column:100}},type:"default-arg",locations:[{start:{line:65,column:81},end:{line:65,column:100}}],line:65},"2":{loc:{start:{line:90,column:47},end:{line:90,column:81}},type:"default-arg",locations:[{start:{line:90,column:62},end:{line:90,column:81}}],line:90},"3":{loc:{start:{line:92,column:20},end:{line:92,column:88}},type:"binary-expr",locations:[{start:{line:92,column:20},end:{line:92,column:55}},{start:{line:92,column:59},end:{line:92,column:88}}],line:92}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_6ja42kq8h.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const automation_client_1=(cov_6ja42kq8h.s[1]++,require("@atomist/automation-client"));const axios_1=(cov_6ja42kq8h.s[2]++,require("axios"));const promiseRetry=(cov_6ja42kq8h.s[3]++,require("promise-retry"));const DefaultRetryOptions=(cov_6ja42kq8h.s[4]++,{retries:10,factor:2,minTimeout:1*500,maxTimeout:5*1000,randomize:true});/**
 * Post to the Atomist generic build webhook URL.  It creates the payload
 * then uses postWebhook.
 *
 * @param owner repository owner, i.e., user or organization
 * @param repo name of repository
 * @param branch commit branch
 * @param commit commit SHA
 * @param status "start", "success", or "fail"
 * @param teamId Atomist team ID
 * @param retryOptions change default retry options
 * @return true if successful, false on failure after retries
 */function postBuildWebhook(owner,repo,branch,commit,status,teamId,retryOptions=(cov_6ja42kq8h.b[0][0]++,DefaultRetryOptions)){cov_6ja42kq8h.f[0]++;const payload=(cov_6ja42kq8h.s[5]++,{repository:{owner_name:owner,name:repo},type:"push",status,commit,branch,provider:"GoogleContainerBuilder"});cov_6ja42kq8h.s[6]++;return postWebhook("build",payload,teamId,retryOptions);}cov_6ja42kq8h.s[7]++;exports.postBuildWebhook=postBuildWebhook;/**
 * Post to the Atomist link-image webhook URL.  It creates the payload
 * then uses postWebhook.
 *
 * @param owner repository owner, i.e., user or organization
 * @param repo name of repository
 * @param commit commit SHA
 * @param image Docker image tag, e.g., registry.com/owner/repo:version
 * @param teamId Atomist team ID
 * @param retryOptions change default retry options
 * @return true if successful, false on failure after retries
 */function postLinkImageWebhook(owner,repo,commit,image,teamId,retryOptions=(cov_6ja42kq8h.b[1][0]++,DefaultRetryOptions)){cov_6ja42kq8h.f[1]++;const payload=(cov_6ja42kq8h.s[8]++,{git:{owner,repo,sha:commit},docker:{image},type:"link-image"});cov_6ja42kq8h.s[9]++;return postWebhook("link-image",payload,teamId,retryOptions);}cov_6ja42kq8h.s[10]++;exports.postLinkImageWebhook=postLinkImageWebhook;/**
 * Post payload to the Atomist webhook URL.  It will retry
 * several times.
 *
 * @param webhook type of webhook
 * @param payload object to post
 * @param teamId Atomist team ID
 * @param retryOptions change default retry options
 * @return true if successful, false on failure after retries
 */function postWebhook(webhook,payload,teamId,retryOptions=(cov_6ja42kq8h.b[2][0]++,DefaultRetryOptions)){cov_6ja42kq8h.f[2]++;cov_6ja42kq8h.s[11]++;automation_client_1.logger.info("Posting webhook: %j",payload);const baseUrl=(cov_6ja42kq8h.s[12]++,(cov_6ja42kq8h.b[3][0]++,process.env.ATOMIST_WEBHOOK_BASEURL)||(cov_6ja42kq8h.b[3][1]++,"https://webhook.atomist.com"));const url=(cov_6ja42kq8h.s[13]++,`${baseUrl}/atomist/${webhook}/teams/${teamId}`);cov_6ja42kq8h.s[14]++;return promiseRetry(retryOptions,(retry,retryCount)=>{cov_6ja42kq8h.f[3]++;cov_6ja42kq8h.s[15]++;automation_client_1.logger.debug("posting '%j' to '%s' attempt %d",payload,url,retryCount);cov_6ja42kq8h.s[16]++;return axios_1.default.post(url,payload).then(()=>{cov_6ja42kq8h.f[4]++;cov_6ja42kq8h.s[17]++;return true;}).catch(err=>{cov_6ja42kq8h.f[5]++;cov_6ja42kq8h.s[18]++;automation_client_1.logger.debug("error posting '%j' to '%s': %j",payload,url,err);cov_6ja42kq8h.s[19]++;retry(err);});}).catch(err=>{cov_6ja42kq8h.f[6]++;cov_6ja42kq8h.s[20]++;automation_client_1.logger.error("failed to post '%j' to '%s': %j",payload,url,err);cov_6ja42kq8h.s[21]++;return false;});}cov_6ja42kq8h.s[22]++;exports.postWebhook=postWebhook;//# sourceMappingURL=data:application/json;charset=utf-8;base64,