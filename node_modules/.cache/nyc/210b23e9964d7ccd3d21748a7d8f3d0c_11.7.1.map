{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/code/ReactToSemanticDiffsOnPushImpact.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/code/ReactToSemanticDiffsOnPushImpact.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AACxE,4BAA4B;AAO5B,8EAA8E;AAE9E,0DAA+D;AAG/D;;GAEG;AAEH,IAAa,gCAAgC,GAA7C;IAGI,YAA6B,mBAAoD,EACpD,kBAAuC;QADvC,wBAAmB,GAAnB,mBAAmB,CAAiC;QACpD,uBAAkB,GAAlB,kBAAkB,CAAqB;IACpE,CAAC;IAEY,MAAM,CAAC,KAAmD,EACnD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAE5C,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACpC,MAAM,EAAE,GAAG,yBAAe,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;YAE3D,MAAM,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YAC5D,MAAM,eAAe,GAAG,KAAK,CAAC,YAAY,CAAC;YAE3C,MAAM,SAAS,GAAuB,eAAe;iBAChD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAuB,CAAC;YACjD,MAAM,SAAS,GAAuB,eAAe;iBAChD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAuB,CAAC;YAEjD,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;iBAC7C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEzC,MAAM,KAAK,GACP,QAAQ;iBACH,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACV,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC;gBAC9C,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC;aACjD,CAAC,CAAC;iBACF,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC;YAE/E,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACjF,MAAM,GAAG,GAA4C;gBACjD,EAAE;gBACF,OAAO;gBACP,WAAW;gBACX,eAAe,EAAE,oCAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC;gBACxD,KAAK;aACR,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/D,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AA7CY,gCAAgC;IAD5C,gCAAY,CAAC,uCAAuC,EAAE,sBAAY,CAAC,cAAc,CAAC,CAAC;;GACvE,gCAAgC,CA6C5C;AA7CY,4EAAgC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport * as _ from \"lodash\";\nimport {\n    FingerprintDifference,\n    FingerprintDifferenceListener,\n    FingerprintDifferenceListenerInvocation,\n    FingerprintValue,\n} from \"../../../../common/listener/FingerprintDifferenceListener\";\nimport { addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport * as schema from \"../../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\n\n/**\n * React to a PushImpact event to react to semantic diffs\n */\n@EventHandler(\"Find semantic diffs from a PushImpact\", subscription(\"OnPushImpact\"))\nexport class ReactToSemanticDiffsOnPushImpact\n    implements HandleEvent<schema.OnPushImpact.Subscription> {\n\n    constructor(private readonly differenceListeners: FingerprintDifferenceListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<schema.OnPushImpact.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const pushImpact = event.data.PushImpact[0];\n\n        const after = pushImpact.push.after;\n        const id = toRemoteRepoRef(after.repo, { sha: after.sha });\n\n        const oldFingerprints = pushImpact.push.before.fingerprints;\n        const newFingerprints = after.fingerprints;\n\n        const oldValues: FingerprintValue[] = oldFingerprints\n            .filter(f => !!f.name) as FingerprintValue[];\n        const newValues: FingerprintValue[] = newFingerprints\n            .filter(f => !!f.name) as FingerprintValue[];\n\n        const allNames = _.uniq(oldValues.map(f => f.name)\n            .concat(newValues.map(f => f.name)));\n\n        const diffs: FingerprintDifference[] =\n            allNames\n                .map(name => ({\n                    oldValue: oldValues.find(f => f.name === name),\n                    newValue: newValues.find(f => f.name === name),\n                }))\n                .filter(fv => _.get(fv, \"oldValue.sha\") !== _.get(fv, \"newValue.sha\"));\n\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n        const inv: FingerprintDifferenceListenerInvocation = {\n            id,\n            context,\n            credentials,\n            addressChannels: addressChannelsFor(after.repo, context),\n            diffs,\n        };\n        await Promise.all(this.differenceListeners.map(dh => dh(inv)));\n        return Success;\n    }\n}\n"]}