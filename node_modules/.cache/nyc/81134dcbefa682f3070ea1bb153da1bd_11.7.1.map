{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/SetStatusOnBuildComplete.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/SetStatusOnBuildComplete.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as slack from \"@atomist/slack-messages/SlackMessages\";\nimport axios from \"axios\";\nimport * as stringify from \"json-stringify-safe\";\nimport { Goal } from \"../../../../common/delivery/goals/Goal\";\nimport { descriptionFromState, updateGoal } from \"../../../../common/delivery/goals/storeGoals\";\nimport { findSdmGoalOnCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { AddressChannels, addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { SdmGoal, SdmGoalState } from \"../../../../ingesters/sdmGoalIngester\";\nimport { LogInterpretation } from \"../../../../spi/log/InterpretedLog\";\nimport { BuildStatus, OnBuildComplete } from \"../../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { reportFailureInterpretationToLinkedChannels } from \"../../../../util/slack/reportFailureInterpretationToLinkedChannels\";\n\n/**\n * Set build status on complete build\n */\n@EventHandler(\"Set build goal to successful on build complete, if it's side-effecting\", subscription(\"OnBuildComplete\"))\nexport class SetGoalOnBuildComplete implements HandleEvent<OnBuildComplete.Subscription> {\n\n    constructor(private readonly buildGoals: Goal[],\n                private readonly logInterpretation?: LogInterpretation) {\n    }\n\n    public async handle(event: EventFired<OnBuildComplete.Subscription>,\n                        ctx: HandlerContext, params: this): Promise<HandlerResult> {\n        const build = event.data.Build[0];\n        const commit: OnBuildComplete.Commit = build.commit;\n\n        const id = toRemoteRepoRef(commit.repo, { sha: commit.sha });\n        params.buildGoals.forEach(async buildGoal => {\n            const sdmGoal = await findSdmGoalOnCommit(ctx, id, commit.repo.org.provider.providerId, buildGoal);\n            if (!sdmGoal) {\n                logger.debug(\"No build goal on commit; ignoring someone else's build result\");\n                return Success;\n            }\n            if (sdmGoal.fulfillment.method !== \"side-effect\" && sdmGoal.fulfillment.method !== \"other\") {\n                logger.info(\"This build goal is not set up to be completed based on the build node. %j\",\n                    sdmGoal.fulfillment);\n                return Success;\n            }\n            logger.info(\"Updating build goal: %s\", buildGoal.context);\n            await setBuiltContext(ctx, buildGoal, sdmGoal,\n                build.status,\n                build.buildUrl);\n        });\n        if (build.status === \"failed\" && build.buildUrl) {\n            const ac = addressChannelsFor(commit.repo, ctx);\n            await displayBuildLogFailure(id, build, ac, params.logInterpretation);\n        }\n        return Success;\n    }\n}\n\nexport async function displayBuildLogFailure(id: RemoteRepoRef,\n                                             build: { buildUrl?: string, status?: string },\n                                             addressChannels: AddressChannels,\n                                             logInterpretation: LogInterpretation) {\n    const buildUrl = build.buildUrl;\n    if (buildUrl) {\n        logger.info(\"Retrieving failed build log from \" + buildUrl);\n        const buildLog = (await axios.get(buildUrl)).data;\n        logger.debug(\"Do we have a log interpretation? \" + !!logInterpretation);\n        const interpretation = logInterpretation && logInterpretation.logInterpreter(buildLog);\n        logger.debug(\"What did it say? \" + stringify(interpretation));\n        await reportFailureInterpretationToLinkedChannels(\"external-build\", interpretation,\n                { log: buildLog, url: buildUrl }, id, addressChannels);\n\n    } else {\n        return addressChannels(\"No build log detected for \" + linkToSha(id));\n    }\n}\n\nfunction linkToSha(id: RemoteRepoRef) {\n    return slack.url(id.url + \"/tree/\" + id.sha, id.sha.substr(0, 6));\n}\n\nfunction buildStatusToSdmGoalState(buildStatus: BuildStatus): SdmGoalState {\n    switch (buildStatus) {\n        case \"passed\":\n            return \"success\";\n        case \"broken\":\n        case \"failed\":\n        case \"canceled\":\n            return \"failure\";\n        default:\n            return \"in_process\"; // in_process\n    }\n}\n\nasync function setBuiltContext(ctx: HandlerContext,\n                               goal: Goal,\n                               sdmGoal: SdmGoal,\n                               state: BuildStatus,\n                               url: string): Promise<any> {\n    const newState = buildStatusToSdmGoalState(state);\n    return updateGoal(ctx, sdmGoal,\n        {\n            url,\n            state: newState,\n            description: descriptionFromState(goal, newState),\n        });\n}\n"]}