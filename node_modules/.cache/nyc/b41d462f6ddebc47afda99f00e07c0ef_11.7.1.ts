"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_tbedm61oi=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/k8s/K8AutomationBuilder.ts",hash="e0a96777c9237e45206191fc69111bab8fb2a57d",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/k8s/K8AutomationBuilder.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:28},end:{line:18,column:65}},"2":{start:{line:19,column:15},end:{line:19,column:54}},"3":{start:{line:20,column:30},end:{line:20,column:75}},"4":{start:{line:21,column:33},end:{line:21,column:52}},"5":{start:{line:33,column:8},end:{line:33,column:42}},"6":{start:{line:37,column:8},end:{line:42,column:45}},"7":{start:{line:45,column:8},end:{line:45,column:62}},"8":{start:{line:48,column:0},end:{line:48,column:52}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:18},end:{line:34,column:5}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:53},end:{line:43,column:5}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:24},end:{line:46,column:5}},line:44}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_tbedm61oi.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const automation_client_1=(cov_tbedm61oi.s[1]++,require("@atomist/automation-client"));const ghub_1=(cov_tbedm61oi.s[2]++,require("../../../../util/github/ghub"));const mavenLogInterpreter_1=(cov_tbedm61oi.s[3]++,require("../local/maven/mavenLogInterpreter"));const K8AutomationBuildContext=(cov_tbedm61oi.s[4]++,"build/atomist/k8s");/**
 * Upon recognizing a plan to create an artifact, send a message to k8-automation to request a build.
 * k8-automation will trigger a build for this commit in Google Container Builder.
 * When that is complete, it will send an ImageLinked event, and that means our artifact has been created.
 *
 * The message to k8-automation takes the form of a pending GitHub status.
 * Its response takes the form of a Build event which we will notice and update the Build goal,
 * and an ImageLink event which we will notice and update the Artifact goal with a link to that image.
 */class K8sAutomationBuilder{constructor(){cov_tbedm61oi.f[0]++;cov_tbedm61oi.s[5]++;this.name="K8AutomationBuilder";}initiateBuild(creds,id,ac,push,log,context){cov_tbedm61oi.f[1]++;cov_tbedm61oi.s[6]++;// someday we will do this with a "requested" build node but use a status for now.
return ghub_1.createStatus(creds.token,id,{context:K8AutomationBuildContext+"/"+push.branch,state:"pending",description:"Requested build in k8-automation",target_url:undefined}).then(automation_client_1.success);}logInterpreter(log){cov_tbedm61oi.f[2]++;cov_tbedm61oi.s[7]++;return mavenLogInterpreter_1.MavenLogInterpreter(log);}}cov_tbedm61oi.s[8]++;exports.K8sAutomationBuilder=K8sAutomationBuilder;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9idWlsZC9rOHMvSzhBdXRvbWF0aW9uQnVpbGRlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2NvbW1vbi9kZWxpdmVyeS9idWlsZC9rOHMvSzhBdXRvbWF0aW9uQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBRUgsa0VBR29DO0FBZ0JwQyx1REFBNEQ7QUFFNUQsNEVBQXlFO0FBRXpFLE1BQU0sd0JBQXdCLEdBQUcsbUJBQW1CLENBQUM7QUFDckQ7Ozs7Ozs7O0dBUUc7QUFDSDtJQUFBO1FBRVcsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBb0J4QyxDQUFDO0lBbEJVLGFBQWEsQ0FBQyxLQUFrQyxFQUNsQyxFQUFpQixFQUNqQixFQUFtQixFQUNuQixJQUEyQixFQUMzQixHQUFnQixFQUNoQixPQUF1QjtRQUNwQyxrRkFBa0Y7UUFDdEYsT0FBTyxtQkFBWSxDQUFFLEtBQTBCLENBQUMsS0FBSyxFQUFFLEVBQW1CLEVBQUU7WUFDeEUsT0FBTyxFQUFFLHdCQUF3QixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTTtZQUNyRCxLQUFLLEVBQUUsU0FBUztZQUNoQixXQUFXLEVBQUUsa0NBQWtDO1lBQy9DLFVBQVUsRUFBRSxTQUFTO1NBQ3hCLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxjQUFjLENBQUMsR0FBVztRQUM3QixPQUFPLHlDQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQXRCRCxvREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggQXRvbWlzdCwgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIEhhbmRsZXJDb250ZXh0LFxuICAgIHN1Y2Nlc3MsXG59IGZyb20gXCJAYXRvbWlzdC9hdXRvbWF0aW9uLWNsaWVudFwiO1xuaW1wb3J0IHsgR2l0SHViUmVwb1JlZiB9IGZyb20gXCJAYXRvbWlzdC9hdXRvbWF0aW9uLWNsaWVudC9vcGVyYXRpb25zL2NvbW1vbi9HaXRIdWJSZXBvUmVmXCI7XG5pbXBvcnQge1xuICAgIFByb2plY3RPcGVyYXRpb25DcmVkZW50aWFscyxcbiAgICBUb2tlbkNyZWRlbnRpYWxzLFxufSBmcm9tIFwiQGF0b21pc3QvYXV0b21hdGlvbi1jbGllbnQvb3BlcmF0aW9ucy9jb21tb24vUHJvamVjdE9wZXJhdGlvbkNyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyBSZW1vdGVSZXBvUmVmIH0gZnJvbSBcIkBhdG9taXN0L2F1dG9tYXRpb24tY2xpZW50L29wZXJhdGlvbnMvY29tbW9uL1JlcG9JZFwiO1xuaW1wb3J0IHtcbiAgICBCdWlsZGVyLFxuICAgIFB1c2hUaGF0VHJpZ2dlcnNCdWlsZCxcbn0gZnJvbSBcIi4uLy4uLy4uLy4uL3NwaS9idWlsZC9CdWlsZGVyXCI7XG5pbXBvcnQge1xuICAgIEludGVycHJldGVkTG9nLFxuICAgIExvZ0ludGVycHJldGF0aW9uLFxufSBmcm9tIFwiLi4vLi4vLi4vLi4vc3BpL2xvZy9JbnRlcnByZXRlZExvZ1wiO1xuaW1wb3J0IHsgUHJvZ3Jlc3NMb2cgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3BpL2xvZy9Qcm9ncmVzc0xvZ1wiO1xuaW1wb3J0IHsgY3JlYXRlU3RhdHVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWwvZ2l0aHViL2dodWJcIjtcbmltcG9ydCB7IEFkZHJlc3NDaGFubmVscyB9IGZyb20gXCIuLi8uLi8uLi9zbGFjay9hZGRyZXNzQ2hhbm5lbHNcIjtcbmltcG9ydCB7IE1hdmVuTG9nSW50ZXJwcmV0ZXIgfSBmcm9tIFwiLi4vbG9jYWwvbWF2ZW4vbWF2ZW5Mb2dJbnRlcnByZXRlclwiO1xuXG5jb25zdCBLOEF1dG9tYXRpb25CdWlsZENvbnRleHQgPSBcImJ1aWxkL2F0b21pc3QvazhzXCI7XG4vKipcbiAqIFVwb24gcmVjb2duaXppbmcgYSBwbGFuIHRvIGNyZWF0ZSBhbiBhcnRpZmFjdCwgc2VuZCBhIG1lc3NhZ2UgdG8gazgtYXV0b21hdGlvbiB0byByZXF1ZXN0IGEgYnVpbGQuXG4gKiBrOC1hdXRvbWF0aW9uIHdpbGwgdHJpZ2dlciBhIGJ1aWxkIGZvciB0aGlzIGNvbW1pdCBpbiBHb29nbGUgQ29udGFpbmVyIEJ1aWxkZXIuXG4gKiBXaGVuIHRoYXQgaXMgY29tcGxldGUsIGl0IHdpbGwgc2VuZCBhbiBJbWFnZUxpbmtlZCBldmVudCwgYW5kIHRoYXQgbWVhbnMgb3VyIGFydGlmYWN0IGhhcyBiZWVuIGNyZWF0ZWQuXG4gKlxuICogVGhlIG1lc3NhZ2UgdG8gazgtYXV0b21hdGlvbiB0YWtlcyB0aGUgZm9ybSBvZiBhIHBlbmRpbmcgR2l0SHViIHN0YXR1cy5cbiAqIEl0cyByZXNwb25zZSB0YWtlcyB0aGUgZm9ybSBvZiBhIEJ1aWxkIGV2ZW50IHdoaWNoIHdlIHdpbGwgbm90aWNlIGFuZCB1cGRhdGUgdGhlIEJ1aWxkIGdvYWwsXG4gKiBhbmQgYW4gSW1hZ2VMaW5rIGV2ZW50IHdoaWNoIHdlIHdpbGwgbm90aWNlIGFuZCB1cGRhdGUgdGhlIEFydGlmYWN0IGdvYWwgd2l0aCBhIGxpbmsgdG8gdGhhdCBpbWFnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEs4c0F1dG9tYXRpb25CdWlsZGVyIGltcGxlbWVudHMgQnVpbGRlciwgTG9nSW50ZXJwcmV0YXRpb24ge1xuXG4gICAgcHVibGljIG5hbWUgPSBcIks4QXV0b21hdGlvbkJ1aWxkZXJcIjtcblxuICAgIHB1YmxpYyBpbml0aWF0ZUJ1aWxkKGNyZWRzOiBQcm9qZWN0T3BlcmF0aW9uQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFJlbW90ZVJlcG9SZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgYWM6IEFkZHJlc3NDaGFubmVscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoOiBQdXNoVGhhdFRyaWdnZXJzQnVpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbG9nOiBQcm9ncmVzc0xvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBIYW5kbGVyQ29udGV4dCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgICAgICAvLyBzb21lZGF5IHdlIHdpbGwgZG8gdGhpcyB3aXRoIGEgXCJyZXF1ZXN0ZWRcIiBidWlsZCBub2RlIGJ1dCB1c2UgYSBzdGF0dXMgZm9yIG5vdy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXR1cygoY3JlZHMgYXMgVG9rZW5DcmVkZW50aWFscykudG9rZW4sIGlkIGFzIEdpdEh1YlJlcG9SZWYsIHtcbiAgICAgICAgICAgIGNvbnRleHQ6IEs4QXV0b21hdGlvbkJ1aWxkQ29udGV4dCArIFwiL1wiICsgcHVzaC5icmFuY2gsXG4gICAgICAgICAgICBzdGF0ZTogXCJwZW5kaW5nXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJSZXF1ZXN0ZWQgYnVpbGQgaW4gazgtYXV0b21hdGlvblwiLFxuICAgICAgICAgICAgdGFyZ2V0X3VybDogdW5kZWZpbmVkLFxuICAgICAgICB9KS50aGVuKHN1Y2Nlc3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2dJbnRlcnByZXRlcihsb2c6IHN0cmluZyk6IEludGVycHJldGVkTG9nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIE1hdmVuTG9nSW50ZXJwcmV0ZXIobG9nKTtcbiAgICB9XG59XG4iXX0=