{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/autofix/executeAutofixes.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/autofix/executeAutofixes.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, Success } from \"@atomist/automation-client\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { EditResult } from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { combineEditResults } from \"@atomist/automation-client/operations/edit/projectEditorOps\";\nimport * as _ from \"lodash\";\nimport { sprintf } from \"sprintf-js\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { confirmEditedness } from \"../../../../util/git/confirmEditedness\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { PushImpactListenerInvocation } from \"../../../listener/PushImpactListener\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../../goals/ExecuteGoalResult\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../../goals/support/reportGoalError\";\nimport { createPushImpactListenerInvocation } from \"../createPushImpactListenerInvocation\";\nimport { relevantCodeActions } from \"../PushReactionRegistration\";\nimport { AutofixRegistration } from \"./AutofixRegistration\";\n\n/**\n * Execute autofixes against this push\n * Throw an error on failure\n * @param projectLoader use to load projects\n * @param {AutofixRegistration[]} registrations\n * @return GoalExecutor\n */\nexport function executeAutofixes(projectLoader: ProjectLoader,\n                                 registrations: AutofixRegistration[]): ExecuteGoalWithLog {\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const {credentials, context, status, progressLog } = rwlc;\n        progressLog.write(sprintf(\"Executing %d autofixes\", registrations.length));\n        try {\n            const commit = status.commit;\n            if (registrations.length === 0) {\n                return Success;\n            }\n            const push = commit.pushes[0];\n            const editableRepoRef = toRemoteRepoRef(commit.repo, {branch: push.branch});\n            const editResult = await projectLoader.doWithProject<EditResult>({\n                    credentials,\n                    id: editableRepoRef,\n                    context,\n                    readOnly: false,\n                },\n                async project => {\n                    const cri: PushImpactListenerInvocation = await createPushImpactListenerInvocation(rwlc, project);\n                    const relevantAutofixes: AutofixRegistration[] = await relevantCodeActions(registrations, cri);\n                    progressLog.write(sprintf(\"Will apply %d relevant autofixes of %d to %j: [%s] of [%s]\",\n                        relevantAutofixes.length, registrations.length, cri.id,\n                        relevantAutofixes.map(a => a.name).join(),\n                        registrations.map(a => a.name).join()));\n                    let cumulativeResult: EditResult = {\n                        target: cri.project,\n                        success: true,\n                        edited: false,\n                    };\n                    for (const autofix of _.flatten(relevantAutofixes)) {\n                        const thisEdit = await runOne(cri, autofix, progressLog);\n                        cumulativeResult = combineEditResults(cumulativeResult, thisEdit);\n                    }\n                    if (cumulativeResult.edited) {\n                        await cri.project.push();\n                    }\n                    return cumulativeResult;\n                });\n            if (editResult.edited) {\n                // Send back an error code, because we want to stop execution of goals after this\n                return {code: 1, message: \"Edited\"};\n            }\n            return Success;\n        } catch (err) {\n            logger.warn(\"Autofixes failed with %s: Ignoring failure\", err.message);\n            progressLog.write(sprintf(\"Autofixes failed with %s: Ignoring failure\", err.message));\n            return Success;\n        }\n    };\n}\n\nasync function runOne(cri: PushImpactListenerInvocation,\n                      autofix: AutofixRegistration,\n                      progressLog: ProgressLog): Promise<EditResult> {\n    const project = cri.project;\n    progressLog.write(sprintf(\"About to edit %s with autofix %s\", (project.id as RemoteRepoRef).url, autofix.name));\n    try {\n        const tentativeEditResult = await autofix.action(cri);\n        const editResult = await confirmEditedness(tentativeEditResult);\n\n        if (!editResult.success) {\n            await project.revert();\n            logger.warn(\"Edited %s with autofix %s and success=false, edited=%d\",\n                (project.id as RemoteRepoRef).url, autofix.name, editResult.edited);\n            progressLog.write(sprintf(\"Edited %s with autofix %s and success=false, edited=%d\",\n                (project.id as RemoteRepoRef).url, autofix.name, editResult.edited));\n            if (!!autofix.options && autofix.options.ignoreFailure) {\n                // Say we didn't edit and can keep going\n                return {target: project, edited: false, success: false};\n            }\n        } else if (editResult.edited) {\n            await project.commit(`Autofix: ${autofix.name}\\n\\n[atomist:generated]`);\n        } else {\n            logger.debug(\"No changes were made by autofix %s\", autofix.name);\n        }\n        return editResult;\n    } catch (err) {\n        if (!autofix.options || !autofix.options.ignoreFailure) {\n            throw err;\n        }\n        await project.revert();\n        logger.warn(\"Ignoring editor failure %s on %s with autofix %s\",\n            err.message, (project.id as RemoteRepoRef).url, autofix.name);\n        progressLog.write(sprintf(\"Ignoring editor failure %s on %s with autofix %s\",\n            err.message, (project.id as RemoteRepoRef).url, autofix.name));\n        return {target: project, success: false, edited: false};\n    }\n}\n"]}