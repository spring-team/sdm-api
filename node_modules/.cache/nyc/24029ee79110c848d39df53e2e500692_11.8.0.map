{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/ExecuteGoalTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/ExecuteGoalTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAqD;AACrD,4FAAyF;AAEzF,uCAAuC;AACvC,qEAAkE;AAClE,sGAA8G;AAC9G,mGAAwG;AAExG,0FAA6F;AAC7F,4FAAyF;AAEzF,uEAAoE;AACpE,uFAAoF;AAEpF,MAAM,sBAAsB,GAAG,CAAO,IAAuB,EAAE,EAAE;IAC7D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IACxC,OAAO,2BAAO,CAAC;AACnB,CAAC,CAAA,CAAC;AAEF,MAAM,QAAQ,GAAG,IAAI,WAAI,CAAC;IACtB,UAAU,EAAE,YAAY;IACxB,WAAW,EAAE,wCAAwB,EAAE,WAAW,EAAE,MAAM;CAC7D,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,EAAC,WAAW,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAE,WAAW,EAAE,QAAQ,EAAY,CAAC;AAE1F,MAAM,eAAe,GAAG,EAAC,KAAK,EAAE,aAAa,EAAC,CAAC;AAE/C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAEhC,EAAE,CAAC,8CAA8C,EAAE,IAAI,CAAC,EAAE;QACtD,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC,iCAAe,CAAC,EAAE,EAAE,CAAC,CAAC;QAEpE,iDAA0B,CAAC,yBAAW,EAAE,EACpC,EAAE,IAAI,EAAE,MAAM,EAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC/C,MAAM,QAAQ,GAAG;gBACb,OAAO,EAAE,yBAAW,EAAE;gBACtB,WAAW;gBACX,WAAW,EAAE,eAAe;aACH,CAAC;YAE9B,OAAO,yBAAW,CAAC,EAAC,aAAa,EAAC,EAC9B,sBAAsB,EACtB,QAAQ,EACR,WAAW,EACX,QAAQ,EACR,yCAAuB,CAAC,IAAI,CAAC,CAAC;iBAC7B,IAAI,CAAC,CAAM,MAAM,EAAC,EAAE;gBACjB,MAAM,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBACnC,4BAA4B;gBAC5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC7C,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAA,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Success } from \"@atomist/automation-client\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\n\nimport * as assert from \"power-assert\";\nimport { Goal } from \"../../../../src/common/delivery/goals/Goal\";\nimport { IndependentOfEnvironment } from \"../../../../src/common/delivery/goals/support/github/gitHubContext\";\nimport { lastLinesLogInterpreter } from \"../../../../src/common/delivery/goals/support/logInterpreters\";\nimport { RunWithLogContext } from \"../../../../src/common/delivery/goals/support/reportGoalError\";\nimport { createEphemeralProgressLog } from \"../../../../src/common/log/EphemeralProgressLog\";\nimport { executeGoal } from \"../../../../src/handlers/events/delivery/goals/executeGoal\";\nimport { SdmGoal } from \"../../../../src/ingesters/sdmGoalIngester\";\nimport { fakeContext } from \"../../../../src/util/test/fakeContext\";\nimport { SingleProjectLoader } from \"../../../../src/util/test/SingleProjectLoader\";\n\nconst helloWorldGoalExecutor = async (rwlc: RunWithLogContext) => {\n    rwlc.progressLog.write(\"Hello world\\n\");\n    return Success;\n};\n\nconst fakeGoal = new Goal({\n    uniqueName: \"HelloWorld\",\n    environment: IndependentOfEnvironment, orderedName: \"0-yo\",\n});\n\nconst fakeSdmGoal = {fulfillment: {name: \"HelloWorld\"}, environment: \"0-code\"} as SdmGoal;\n\nconst fakeCredentials = {token: \"NOT-A-TOKEN\"};\n\ndescribe(\"executing the goal\", () => {\n\n    it(\"calls a pre-hook and sends output to the log\", done => {\n        const projectLoader = new SingleProjectLoader(InMemoryProject.of());\n\n        createEphemeralProgressLog(fakeContext(),\n            { name: \"test\"} as SdmGoal).then(progressLog => {\n            const fakeRWLC = {\n                context: fakeContext(),\n                progressLog,\n                credentials: fakeCredentials,\n            } as any as RunWithLogContext;\n\n            return executeGoal({projectLoader},\n                helloWorldGoalExecutor,\n                fakeRWLC,\n                fakeSdmGoal,\n                fakeGoal,\n                lastLinesLogInterpreter(\"hi\"))\n                .then(async result => {\n                    await fakeRWLC.progressLog.close();\n                    //   const result = Success;\n                    assert.equal(result.code, 0, result.message);\n                    assert(fakeRWLC.progressLog.log.includes(\"Hello world\"));\n                });\n         }).then(done, done);\n    });\n\n});\n"]}