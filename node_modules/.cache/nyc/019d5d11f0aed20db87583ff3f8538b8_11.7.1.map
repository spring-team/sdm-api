{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/LocalBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/LocalBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Failure,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Success,\n} from \"@atomist/automation-client\";\nimport {\n    ProjectOperationCredentials,\n    TokenCredentials,\n} from \"@atomist/automation-client/operations/common/ProjectOperationCredentials\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { QueryNoCacheOptions } from \"@atomist/automation-client/spi/graph/GraphClient\";\nimport { addressEvent } from \"@atomist/automation-client/spi/message/MessageClient\";\nimport { doWithRetry } from \"@atomist/automation-client/util/retry\";\nimport axios from \"axios\";\nimport { sprintf } from \"sprintf-js\";\nimport { ArtifactStore } from \"../../../../spi/artifact/ArtifactStore\";\nimport {\n    Builder,\n    PushThatTriggersBuild,\n} from \"../../../../spi/build/Builder\";\nimport { AppInfo } from \"../../../../spi/deploy/Deployment\";\nimport { InterpretLog } from \"../../../../spi/log/InterpretedLog\";\nimport { ProgressLog } from \"../../../../spi/log/ProgressLog\";\nimport { SdmBuildIdentifierForRepo } from \"../../../../typings/types\";\nimport { ChildProcessResult } from \"../../../../util/misc/spawned\";\nimport { postLinkImageWebhook } from \"../../../../util/webhook/ImageLink\";\nimport { ProjectLoader } from \"../../../repo/ProjectLoader\";\nimport { AddressChannels } from \"../../../slack/addressChannels\";\nimport { createTagForStatus } from \"../executeTag\";\nimport { readSdmVersion } from \"./projectVersioner\";\nimport SdmBuildIdentifier = SdmBuildIdentifierForRepo.SdmBuildIdentifier;\n\nexport interface LocalBuildInProgress {\n\n    readonly buildResult: Promise<ChildProcessResult>;\n\n    readonly repoRef: RemoteRepoRef;\n\n    readonly team: string;\n\n    /** Available once build is complete */\n    readonly appInfo: AppInfo;\n\n    readonly deploymentUnitFile: string;\n\n    readonly url: string;\n}\n\n/**\n * Superclass for build implemented on the automation client itself, emitting appropriate events to Atomist.\n * Allows listening to a Running build\n */\nexport abstract class LocalBuilder implements Builder {\n\n    constructor(public name: string,\n                private readonly artifactStore: ArtifactStore,\n                protected projectLoader: ProjectLoader) {\n    }\n\n    public async initiateBuild(credentials: ProjectOperationCredentials,\n                               id: RemoteRepoRef,\n                               addressChannels: AddressChannels,\n                               push: PushThatTriggersBuild,\n                               log: ProgressLog,\n                               context: HandlerContext): Promise<HandlerResult> {\n        const as = this.artifactStore;\n        const atomistTeam = context.teamId;\n        const buildNo = await this.obtainBuildIdentifier(push, context);\n\n        try {\n            const rb = await this.startBuild(credentials, id, atomistTeam, log, addressChannels);\n            await this.onStarted(credentials, id, push, rb, buildNo, context);\n            try {\n                const br = await rb.buildResult;\n                await this.onExit(\n                    credentials,\n                    id,\n                    !br.error,\n                    push,\n                    rb,\n                    buildNo,\n                    as,\n                    context);\n                return br.error ? {code: 1, message: br.message} : Success;\n            } catch (err) {\n                await this.onExit(\n                    credentials,\n                    id,\n                    false,\n                    push,\n                    rb,\n                    buildNo,\n                    as,\n                    context);\n                return Failure;\n            }\n        } catch (err) {\n            // If we get here, the build failed before even starting\n            logger.warn(\"Build on branch %s failed on start: %j - %s\", push.branch, id, err.message);\n            log.write(sprintf(\"Build on branch %s failed on start: %j - %s\", push.branch, id, err.message));\n            await this.updateBuildStatus({repoRef: id, team: atomistTeam, url: undefined},\n                \"failed\",\n                push.branch,\n                buildNo);\n            return Failure;\n        }\n    }\n\n    /**\n     * Implemented to interpret build logs\n     * @param {string} log\n     * @return {InterpretedLog}\n     */\n    public abstract logInterpreter: InterpretLog;\n\n    protected abstract startBuild(credentials: ProjectOperationCredentials,\n                                  id: RemoteRepoRef,\n                                  atomistTeam: string,\n                                  log: ProgressLog,\n                                  addressChannels: AddressChannels): Promise<LocalBuildInProgress>;\n\n    protected onStarted(credentials: ProjectOperationCredentials,\n                        id: RemoteRepoRef,\n                        push: PushThatTriggersBuild,\n                        runningBuild: LocalBuildInProgress,\n                        buildNo: string,\n                        context: HandlerContext) {\n        return this.updateBuildStatus(runningBuild, \"started\", push.branch, buildNo);\n    }\n\n    protected async onExit(credentials: ProjectOperationCredentials,\n                           id: RemoteRepoRef,\n                           success: boolean,\n                           push: PushThatTriggersBuild,\n                           runningBuild: LocalBuildInProgress,\n                           buildNo: string,\n                           artifactStore: ArtifactStore,\n                           context: HandlerContext): Promise<any> {\n        try {\n            if (success) {\n                await this.updateBuildStatus(runningBuild, \"passed\", push.branch, buildNo);\n                await this.createBuildTag(id, push, buildNo, context, credentials);\n                if (!!runningBuild.deploymentUnitFile) {\n                    await linkArtifact((credentials as TokenCredentials).token,\n                        runningBuild, context.teamId, artifactStore);\n                } else {\n                    logger.warn(\"No artifact generated by build of %j\", runningBuild.appInfo);\n                }\n            } else {\n                await this.updateBuildStatus(runningBuild, \"failed\", push.branch, buildNo);\n            }\n        } catch (err) {\n            logger.warn(\"Unexpected build exit error: %s\", err);\n        }\n    }\n\n    protected updateBuildStatus(runningBuild: { repoRef: RemoteRepoRef, url: string, team: string },\n                                status: \"started\" | \"failed\" | \"error\" | \"passed\" | \"canceled\",\n                                branch: string,\n                                buildNo: string): Promise<any> {\n        logger.info(\"Telling Atomist about a %s build on %s, sha %s, url %s\",\n            status, branch, runningBuild.repoRef.sha, runningBuild.url);\n        const url = `https://webhook.atomist.com/atomist/build/teams/${runningBuild.team}`;\n        const data = {\n            repository: {\n                owner_name: runningBuild.repoRef.owner,\n                name: runningBuild.repoRef.repo,\n            },\n            name: `Build #${buildNo}`,\n            number: +buildNo,\n            type: \"push\",\n            build_url: runningBuild.url,\n            status,\n            commit: runningBuild.repoRef.sha,\n            branch,\n            provider: \"sdm\",\n        };\n        return doWithRetry(\n            () => axios.post(url, data),\n            `Update build to ${JSON.stringify(status)}`)\n            .then(() => runningBuild);\n    }\n\n    protected async obtainBuildIdentifier(push: PushThatTriggersBuild,\n                                          ctx: HandlerContext): Promise<string> {\n        const result = await ctx.graphClient.query<SdmBuildIdentifierForRepo.Query, SdmBuildIdentifierForRepo.Variables>({\n            name: \"SdmBuildIdentifierForRepo\",\n            variables: {\n                owner: [push.owner],\n                name: [push.name],\n                providerId: [push.providerId],\n            },\n            options: QueryNoCacheOptions,\n        });\n\n        let buildIdentifier: SdmBuildIdentifier;\n        if (result.SdmBuildIdentifier && result.SdmBuildIdentifier.length === 1) {\n            buildIdentifier = result.SdmBuildIdentifier[0];\n        } else {\n            buildIdentifier = {\n                identifier: \"0\",\n                repo: {\n                    owner: push.owner,\n                    name: push.name,\n                    providerId: push.providerId,\n                },\n            };\n        }\n\n        const bumpedBuildIdentifier = {\n            ...buildIdentifier,\n            identifier: (+buildIdentifier.identifier + 1).toString(),\n        };\n        await ctx.messageClient.send(bumpedBuildIdentifier, addressEvent(\"SdmBuildIdentifier\"));\n        return bumpedBuildIdentifier.identifier;\n    }\n\n    protected async createBuildTag(id: RemoteRepoRef,\n                                   push: PushThatTriggersBuild,\n                                   buildNo: string,\n                                   context: HandlerContext,\n                                   credentials: ProjectOperationCredentials) {\n        const version = await readSdmVersion(push.owner, push.name, push.providerId, push.sha, id.branch, context);\n        if (version) {\n            await createTagForStatus(\n                id,\n                push.sha,\n                \"Tag created by SDM\",\n                `${version}+sdm.${buildNo}`,\n                credentials);\n        }\n    }\n\n}\n\nfunction linkArtifact(token: string, rb: LocalBuildInProgress, team: string, artifactStore: ArtifactStore): Promise<any> {\n    return artifactStore.storeFile(rb.appInfo, rb.deploymentUnitFile, {token})\n        .then(imageUrl => postLinkImageWebhook(rb.repoRef.owner, rb.repoRef.repo, rb.repoRef.sha, imageUrl, team));\n}\n"]}