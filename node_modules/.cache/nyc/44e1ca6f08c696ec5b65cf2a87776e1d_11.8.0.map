{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/review/checkstyle/checkstyleReviewerTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/handlers/events/delivery/review/checkstyle/checkstyleReviewerTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA2F;AAC3F,sGAAmG;AACnG,6BAA6B;AAC7B,uCAAuC;AACvC,wHAAqH;AAErH,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uCAAuC,CAAC,CAAC;AAErF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAEhC,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;QAC9C,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,EACzE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,uCAAkB,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACjE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACjB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAElB,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;QACnD,MAAM,CAAC,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,EACzE,IAAI,6BAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAC5D,IAAI;YACA,MAAM,uCAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,iDAAiD,CAAC,CAAC;SAC7D;QAAC,WAAM;YACJ,KAAK;SACR;IACL,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAEtB,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport * as path from \"path\";\nimport * as assert from \"power-assert\";\nimport { checkstyleReviewer } from \"../../../../../../src/common/delivery/code/review/checkstyle/checkstyleReviewer\";\n\nconst checkstylePath = path.join(__dirname, \"../../../../../checkstyle-8.8-all.jar\");\n\ndescribe(\"checkstyleReviewer\", () => {\n\n    it(\"should succeed in reviewing repo\", async () => {\n        const p = await GitCommandGitProject.cloned({token: process.env.GITHUB_TOKEN},\n            new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        const review = await checkstyleReviewer(checkstylePath)(p, null);\n        assert(!!review);\n        assert(review.comments.length > 1);\n    }).timeout(10000);\n\n    it(\"should handle invalid checkstyle path\", async () => {\n        const p = await GitCommandGitProject.cloned({token: process.env.GITHUB_TOKEN},\n            new GitHubRepoRef(\"atomist-seeds\", \"spring-rest-seed\"));\n        try {\n            await checkstyleReviewer(\"invalid checkstyle path\")(p, null);\n            assert(\"Checkstyle should have failed with invalid path\");\n        } catch {\n            // Ok\n        }\n    }).timeout(10000);\n\n});\n"]}