{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/jvmPushTestsTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/listener/support/jvmPushTestsTest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\n\nimport * as assert from \"power-assert\";\nimport { IsClojure } from \"../../../../src\";\nimport { PushListenerInvocation } from \"../../../../src/common/listener/PushListener\";\nimport { IsJava, IsMaven } from \"../../../../src/common/listener/support/pushtest/jvm/jvmPushTests\";\n\ndescribe(\"jvmPushTests\", () => {\n\n    describe(\"IsMaven\", () => {\n\n        it(\"should not find maven in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await IsMaven.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find maven in repo with named pom\", async () => {\n            const project = InMemoryProject.of({ path: \"pom.xml\", content: \"<xml>\"});\n            const r = await IsMaven.valueForPush({project} as any as PushListenerInvocation);\n            assert(r);\n        });\n    });\n\n    describe(\"IsJava\", () => {\n\n        it(\"should not find Java in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await IsJava.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find Java in repo with Java file\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.java\", content: \"public class Thing {}\"});\n            const r = await IsJava.valueForPush({project} as any as PushListenerInvocation);\n            assert(r);\n        });\n\n        it(\"should not find Java in repo with no Java file\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.kt\", content: \"public class Thing {}\"});\n            const r = await IsJava.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n    });\n\n    describe(\"IsClojure\", () => {\n\n        it(\"should not find Clojure in empty repo\", async () => {\n            const project = InMemoryProject.of();\n            const r = await IsClojure.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n\n        it(\"should find Clojure in repo with Clojure file\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.clj\", content: \"(())\"});\n            const r = await IsClojure.valueForPush({project} as any as PushListenerInvocation);\n            assert(r);\n            const r2 = await IsJava.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r2);\n        });\n\n        it(\"should not find Clojure in repo with no Clojure file\", async () => {\n            const project = InMemoryProject.of({ path: \"src/main/java/Thing.kt\", content: \"public class Thing {}\"});\n            const r = await IsClojure.valueForPush({project} as any as PushListenerInvocation);\n            assert(!r);\n        });\n    });\n\n});\n"]}