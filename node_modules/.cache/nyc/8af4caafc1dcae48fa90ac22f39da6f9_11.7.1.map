{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/maven/MavenFingerprinter.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/code/fingerprint/maven/MavenFingerprinter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAKH,mGAAgG;AAChG,mEAA8D;AAE9D;;;;;GAKG;AACH;IAAA;QAEoB,SAAI,GAAG,oBAAoB,CAAC;IAehD,CAAC;IAbgB,MAAM,CAAC,GAAiC;;YACjD,IAAI;gBACA,MAAM,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACtC,MAAM,IAAI,GAAG,MAAM,2CAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACpD,OAAO,OAAO,CAAC,GAAG,CAAC;oBACf,6EAAqC;iBAExC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC1B;YAAC,WAAM;gBACJ,oCAAoC;gBACpC,OAAO,EAAE,CAAC;aACb;QACL,CAAC;KAAA;CACJ;AAjBD,gDAiBC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fingerprint } from \"@atomist/automation-client/project/fingerprint/Fingerprint\";\nimport { PushImpactListenerInvocation } from \"../../../../listener/PushImpactListener\";\nimport { FingerprinterRegistration } from \"../FingerprinterRegistration\";\nimport { dependenciesFingerprintsFromParsedPom } from \"./dependenciesFingerprintsFromParsedPom\";\nimport { extractEffectivePom } from \"./effectivePomExtractor\";\n\n/**\n * Public entry point for all Maven fingerprints. Use mvn help:effective-pom\n * to generic effective POM then parse it and turn it into fingerprints.\n * @param {GitProject} p\n * @return {Promise<Fingerprint[]>}\n */\nexport class MavenFingerprinter implements FingerprinterRegistration {\n\n    public readonly name = \"MavenFingerprinter\";\n\n    public async action(cri: PushImpactListenerInvocation): Promise<Fingerprint[]> {\n        try {\n            await cri.project.findFile(\"pom.xml\");\n            const epom = await extractEffectivePom(cri.project);\n            return Promise.all([\n                dependenciesFingerprintsFromParsedPom,\n                // TODO add other Maven POM fingerprints\n            ].map(fp => fp(epom)));\n        } catch {\n            // If we can't find a pom, just exit\n            return [];\n        }\n    }\n}\n"]}