{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/FindArtifactOnImageLinked.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/build/FindArtifactOnImageLinked.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, logger, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { Goal } from \"../../../../common/delivery/goals/Goal\";\nimport { findSdmGoalOnCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { updateGoal } from \"../../../../common/delivery/goals/support/storeGoals\";\nimport {\n    ArtifactListenerInvocation,\n    ArtifactListenerRegisterable,\n    toArtifactListenerRegistration,\n} from \"../../../../common/listener/ArtifactListener\";\nimport { PushListenerInvocation } from \"../../../../common/listener/PushListener\";\nimport { ProjectLoader } from \"../../../../common/repo/ProjectLoader\";\nimport { addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport { ArtifactStore } from \"../../../../spi/artifact/ArtifactStore\";\nimport { OnImageLinked } from \"../../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../../common/CredentialsResolver\";\n\n@EventHandler(\"Scan when artifact is found\", subscription(\"OnImageLinked\"))\nexport class FindArtifactOnImageLinked implements HandleEvent<OnImageLinked.Subscription> {\n\n    /**\n     * The goal to update when an artifact is linked.\n     * When an artifact is linked to a commit, the build must be done.\n     */\n    constructor(public goal: Goal,\n                private readonly artifactStore: ArtifactStore,\n                private readonly registrations: ArtifactListenerRegisterable[],\n                private readonly projectLoader: ProjectLoader,\n                private readonly credentialsResolver: CredentialsResolver) {}\n\n    public async handle(event: EventFired<OnImageLinked.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const imageLinked = event.data.ImageLinked[0];\n        const commit = imageLinked.commit;\n        const image = imageLinked.image;\n        const id = toRemoteRepoRef(commit.repo, { sha: commit.sha });\n\n        const artifactSdmGoal = await findSdmGoalOnCommit(context, id, commit.repo.org.provider.providerId, params.goal);\n        if (!artifactSdmGoal) {\n            logger.debug(\"FindArtifactOnImageLinked: context %s not found for %j\", params.goal.context, id);\n            return Success;\n        }\n\n        if (params.registrations.length > 0) {\n            const credentials = this.credentialsResolver.eventHandlerCredentials(context, id);\n            logger.info(\"FindArtifactOnImageLinked: Scanning artifact for %j\", id);\n            const deployableArtifact = await params.artifactStore.checkout(image.imageName, id, credentials);\n            const addressChannels = addressChannelsFor(commit.repo, context);\n\n            await this.projectLoader.doWithProject({ credentials, id, context, readOnly: true }, async project => {\n                // TODO only handles first push\n                const pli: PushListenerInvocation = {\n                    id,\n                    context,\n                    credentials,\n                    addressChannels,\n                    push: commit.pushes[0],\n                    project,\n                };\n                const ai: ArtifactListenerInvocation = {\n                    id,\n                    context,\n                    addressChannels,\n                    deployableArtifact,\n                    credentials,\n                };\n                logger.info(\"About to invoke %d ArtifactListener registrations\", params.registrations.length);\n                await Promise.all(params.registrations\n                    .map(toArtifactListenerRegistration)\n                    .filter(async arl => !arl.pushTest || !!(await arl.pushTest.mapping(pli)))\n                    .map(l => l.action(ai)));\n            });\n        }\n\n        await updateGoal(context, artifactSdmGoal, {\n            state: \"success\",\n            description: params.goal.successDescription,\n            url: image.imageName,\n        });\n        logger.info(\"Updated artifact goal '%s'\", artifactSdmGoal.name);\n        return Success;\n    }\n}\n"]}