{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PredicateMappingTerm.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PredicateMappingTerm.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,wCAA+C;AAa/C;;;;GAIG;AACH,4BAAsC,CAA0B;IAC5D,IAAI,mBAAS,CAAC,CAAC,CAAC,EAAE;QACd,OAAO,CAAC,CAAC;KACZ;IACD,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;QACxB,OAAO,EAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,GAAS,EAAE,gDAAC,OAAA,CAAC,CAAA,GAAA,EAAC,CAAC;KACjD;IACD,OAAO,EAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAQ,EAAC,CAAC;AAC7C,CAAC;AARD,gDAQC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMapping, Mapper } from \"../Mapping\";\nimport { PredicateMapping } from \"../PredicateMapping\";\n\n/**\n * Predicate that can be used in predicate DSL.\n * Can be a PredicateMapping, a function or computed boolean\n */\nexport type PredicateMappingTerm<F> =\n    PredicateMapping<F> |\n    Mapper<F, boolean> |\n    boolean |\n    (() => (boolean | Promise<boolean>));\n\n/**\n * Convert a PredicateMapping term to a PredicateMapping\n * @param {PredicateMappingTerm<F>} p\n * @return {PredicateMapping<F>}\n */\nexport function toPredicateMapping<F>(p: PredicateMappingTerm<F>): PredicateMapping<F> {\n    if (isMapping(p)) {\n        return p;\n    }\n    if (typeof p === \"boolean\") {\n        return {name: p + \"\", mapping: async () => p};\n    }\n    return {name: p + \"\", mapping: p as any};\n}\n"]}