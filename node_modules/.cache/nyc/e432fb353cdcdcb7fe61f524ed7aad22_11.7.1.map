{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/FulfillGoalOnRequested.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/goals/FulfillGoalOnRequested.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EventFired,\n    HandleEvent,\n    HandlerContext,\n    HandlerResult,\n    logger,\n    Success,\n} from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport {\n    EventHandlerMetadata,\n    ValueDeclaration,\n} from \"@atomist/automation-client/metadata/automationMetadata\";\nimport { fetchCommitForSdmGoal } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { sdmGoalStateToGitHubStatusState } from \"../../../../common/delivery/goals/support/github/gitHubStatusSetters\";\nimport { RunWithLogContext } from \"../../../../common/delivery/goals/support/reportGoalError\";\nimport { SdmGoalImplementationMapper } from \"../../../../common/delivery/goals/support/SdmGoalImplementationMapper\";\nimport { LoggingProgressLog } from \"../../../../common/log/LoggingProgressLog\";\nimport { WriteToAllProgressLog } from \"../../../../common/log/WriteToAllProgressLog\";\nimport { ProjectLoader } from \"../../../../common/repo/ProjectLoader\";\nimport { addressChannelsFor } from \"../../../../common/slack/addressChannels\";\nimport {\n    SdmGoal,\n    SdmGoalState,\n} from \"../../../../ingesters/sdmGoalIngester\";\nimport { ProgressLogFactory } from \"../../../../spi/log/ProgressLog\";\nimport {\n    CommitForSdmGoal,\n    OnAnyRequestedSdmGoal,\n    SdmGoalFields,\n    StatusForExecuteGoal,\n} from \"../../../../typings/types\";\nimport { repoRefFromSdmGoal } from \"../../../../util/git/repoRef\";\nimport { fetchProvider } from \"../../../../util/github/gitHubProvider\";\nimport { executeGoal } from \"./executeGoal\";\n\n/**\n * Handle an SDM request goal. Used for many implementation types.\n */\nexport class FulfillGoalOnRequested implements HandleEvent<OnAnyRequestedSdmGoal.Subscription>,\n    EventHandlerMetadata {\n\n    public subscriptionName: string;\n    public subscription: string;\n    public name: string;\n    public description: string;\n    // public secrets = [{name: \"githubToken\", uri: Secrets.OrgToken}];\n    public values = [{ path: \"token\", name: \"githubToken\", required: true }] as any[] as ValueDeclaration[];\n\n    public githubToken: string;\n\n    constructor(private readonly implementationMapper: SdmGoalImplementationMapper,\n                private readonly projectLoader: ProjectLoader,\n                private readonly logFactory: ProgressLogFactory) {\n        const implementationName = \"FulfillGoal\";\n        this.subscriptionName = \"OnAnyRequestedSdmGoal\";\n        this.subscription =\n            subscription({name: \"OnAnyRequestedSdmGoal\"});\n        this.name = implementationName + \"OnAnyRequestedSdmGoal\";\n        this.description = `Fulfill a goal when it reaches 'requested' state`;\n    }\n\n    public async handle(event: EventFired<OnAnyRequestedSdmGoal.Subscription>,\n                        ctx: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const sdmGoal = event.data.SdmGoal[0] as SdmGoal;\n        const commit = await fetchCommitForSdmGoal(ctx, sdmGoal);\n\n        const status: StatusForExecuteGoal.Fragment = convertForNow(sdmGoal, commit);\n\n        // this should not happen but it does: automation-api#395\n        if (sdmGoal.state !== \"requested\") {\n            logger.warn(`Goal ${sdmGoal.name}: Received '${sdmGoal.state}' on ${status.context}, while looking for 'requested'`);\n            return Success;\n        }\n\n        if (sdmGoal.fulfillment.method !== \"SDM fulfill on requested\") {\n            logger.info(\"Goal %s: Implementation method is '%s'; not fulfilling\", sdmGoal.name, sdmGoal.fulfillment.method);\n            return Success;\n        }\n\n        logger.info(\"Executing FulfillGoalOnRequested with '%s'\", sdmGoal.fulfillment.name); // take this out when automation-api#395 is fixed\n\n        const {goal, goalExecutor, logInterpreter} = this.implementationMapper.findImplementationBySdmGoal(sdmGoal);\n\n        const log = await this.logFactory(ctx, sdmGoal);\n        const progressLog = new WriteToAllProgressLog(sdmGoal.name, new LoggingProgressLog(sdmGoal.name, \"debug\"), log);\n        const addressChannels = addressChannelsFor(commit.repo, ctx);\n        const id = repoRefFromSdmGoal(sdmGoal, await fetchProvider(ctx, sdmGoal.repo.providerId));\n        const credentials = {token: params.githubToken};\n        const rwlc: RunWithLogContext = {status, progressLog, context: ctx, addressChannels, id, credentials};\n\n        const isolatedGoalLauncher = this.implementationMapper.getIsolatedGoalLauncher();\n\n        if (goal.definition.isolated && !process.env.ATOMIST_ISOLATED_GOAL && isolatedGoalLauncher) {\n            return isolatedGoalLauncher(sdmGoal, ctx, progressLog);\n        } else {\n            delete (sdmGoal as any).id;\n            return executeGoal({projectLoader: params.projectLoader},\n                goalExecutor, rwlc, sdmGoal, goal, logInterpreter)\n                .then(async res => {\n                    await progressLog.close();\n                    return res;\n                }, async err => {\n                    await progressLog.close();\n                    throw err;\n                });\n        }\n    }\n}\n\nfunction convertForNow(sdmGoal: SdmGoalFields.Fragment, commit: CommitForSdmGoal.Commit): StatusForExecuteGoal.Fragment {\n    return {\n        commit,\n        state: sdmGoalStateToGitHubStatusState(sdmGoal.state as SdmGoalState),\n        targetUrl: sdmGoal.url, // not handling approval weirdness\n        context: sdmGoal.externalKey,\n        description: sdmGoal.description,\n    };\n}\n"]}