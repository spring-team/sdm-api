{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/verify/executeVerifyEndpoint.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/delivery/verify/executeVerifyEndpoint.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,2CAAqC;AAGrC,qGAAmG;AAGnG,0DAAoE;AAqBpE,+BAAsC,GAAoB;IACtD,OAAO,CAAO,CAAoB,EAA8B,EAAE;QAC9D,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,wCAAmB,CAAC,OAAO,EAAE,EAAE,EAAE,8BAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;QACtF,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,KAAK,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEtF,IAAI,CAAC,YAAY,EAAE;YACf,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,oBAAO,CAAC,oDAAoD,EAAE,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7G,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE;YACnB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,oBAAO,CAAC,+BAA+B,EAAE,YAAY,CAAC,CAAC,CAAC;YAC5E,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAE/C;QACD,MAAM,GAAG,GAAmC;YACxC,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,GAAG,EAAE,YAAY,CAAC,GAAG;YACrB,eAAe,EAAE,CAAC,CAAC,eAAe;YAClC,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,WAAW,EAAE,CAAC,CAAC,WAAW;SAC7B,CAAC;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACtE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,oBAAoB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;YACxD,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,GAAG,CAAC;QACd,CAAC,CAAC,CAAC,CAAC,CAAC;QAEL,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,eAAe,EAAE,GAAG,CAAC,eAAe,EAAE,SAAS,EAAE,YAAY,CAAC,GAAG,EAAE,CAAC;IAC1F,CAAC,CAAA,CAAC;AACN,CAAC;AA9BD,sDA8BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sprintf } from \"sprintf-js\";\nimport { ExecuteGoalResult } from \"../../../../common/delivery/goals/ExecuteGoalResult\";\nimport { Goal } from \"../../../../common/delivery/goals/Goal\";\nimport { fetchGoalsForCommit } from \"../../../../common/delivery/goals/support/fetchGoalsOnCommit\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../../../../common/delivery/goals/support/reportGoalError\";\nimport { RepoListenerInvocation, SdmListener } from \"../../../../common/listener/Listener\";\nimport { providerIdFromStatus } from \"../../../../util/git/repoRef\";\n\nexport interface EndpointVerificationInvocation extends RepoListenerInvocation {\n\n    /**\n     * Reported endpoint base url\n     */\n    url: string;\n}\n\nexport type EndpointVerificationListener = SdmListener<EndpointVerificationInvocation>;\n\n/**\n * What the SDM should define for each environment's verification\n */\nexport interface SdmVerification {\n    verifiers: EndpointVerificationListener[];\n    endpointGoal: Goal;\n    requestApproval: boolean;\n}\n\nexport function executeVerifyEndpoint(sdm: SdmVerification): ExecuteGoalWithLog {\n    return async (r: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const { context, id, status } = r;\n        const sdmGoals = await fetchGoalsForCommit(context, id, providerIdFromStatus(status));\n        const endpointGoal = sdmGoals.find(sg => sg.externalKey === sdm.endpointGoal.context);\n\n        if (!endpointGoal) {\n            r.progressLog.write(sprintf(\"Did not find endpoint goal. Looking for context %s\", sdm.endpointGoal.context));\n            throw new Error(\"Endpoint goal unfound\");\n        }\n        if (!endpointGoal.url) {\n            r.progressLog.write(sprintf(\"Did not find endpoint url: %j\", endpointGoal));\n            throw new Error(\"Endpoint goal has no URL\");\n\n        }\n        const inv: EndpointVerificationInvocation = {\n            id: r.id,\n            url: endpointGoal.url,\n            addressChannels: r.addressChannels,\n            context: r.context,\n            credentials: r.credentials,\n        };\n        await Promise.all(sdm.verifiers.map(verifier => verifier(inv).catch(err => {\n            r.progressLog.write(\"A verifier threw: \" + err.message);\n            r.progressLog.write(\"stack: \" + err.stack);\n            throw err;\n        })));\n\n        return { code: 0, requireApproval: sdm.requestApproval, targetUrl: endpointGoal.url };\n    };\n}\n"]}