"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_7m5rkheoi=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/decisionTree.ts",hash="24e33bd9c3eb1ff1eda170b9cef53aab83d201d5",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/decisionTree.ts",statementMap:{"0":{start:{line:17,column:16},end:{line:24,column:1}},"1":{start:{line:18,column:4},end:{line:23,column:7}},"2":{start:{line:19,column:36},end:{line:19,column:97}},"3":{start:{line:19,column:42},end:{line:19,column:70}},"4":{start:{line:19,column:85},end:{line:19,column:95}},"5":{start:{line:20,column:35},end:{line:20,column:100}},"6":{start:{line:20,column:41},end:{line:20,column:73}},"7":{start:{line:20,column:88},end:{line:20,column:98}},"8":{start:{line:21,column:32},end:{line:21,column:149}},"9":{start:{line:21,column:97},end:{line:21,column:119}},"10":{start:{line:22,column:8},end:{line:22,column:78}},"11":{start:{line:25,column:0},end:{line:25,column:62}},"12":{start:{line:26,column:20},end:{line:26,column:70}},"13":{start:{line:27,column:24},end:{line:27,column:87}},"14":{start:{line:52,column:4},end:{line:52,column:43}},"15":{start:{line:54,column:0},end:{line:54,column:22}},"16":{start:{line:57,column:8},end:{line:57,column:45}},"17":{start:{line:66,column:8},end:{line:66,column:16}},"18":{start:{line:67,column:8},end:{line:67,column:20}},"19":{start:{line:70,column:30},end:{line:70,column:82}},"20":{start:{line:71,column:8},end:{line:71,column:50}},"21":{start:{line:74,column:0},end:{line:74,column:34}},"22":{start:{line:80,column:8},end:{line:80,column:43}},"23":{start:{line:81,column:8},end:{line:81,column:25}},"24":{start:{line:90,column:8},end:{line:90,column:16}},"25":{start:{line:91,column:8},end:{line:91,column:20}},"26":{start:{line:99,column:8},end:{line:102,column:10}},"27":{start:{line:101,column:27},end:{line:101,column:90}},"28":{start:{line:101,column:74},end:{line:101,column:87}},"29":{start:{line:111,column:22},end:{line:111,column:72}},"30":{start:{line:112,column:8},end:{line:118,column:10}},"31":{start:{line:114,column:30},end:{line:117,column:14}},"32":{start:{line:115,column:33},end:{line:115,column:70}},"33":{start:{line:116,column:16},end:{line:116,column:65}},"34":{start:{line:121,column:0},end:{line:121,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:44},end:{line:17,column:45}},loc:{start:{line:17,column:89},end:{line:24,column:1}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:36},end:{line:18,column:37}},loc:{start:{line:18,column:63},end:{line:23,column:5}},line:18},"2":{name:"fulfilled",decl:{start:{line:19,column:17},end:{line:19,column:26}},loc:{start:{line:19,column:34},end:{line:19,column:99}},line:19},"3":{name:"rejected",decl:{start:{line:20,column:17},end:{line:20,column:25}},loc:{start:{line:20,column:33},end:{line:20,column:102}},line:20},"4":{name:"step",decl:{start:{line:21,column:17},end:{line:21,column:21}},loc:{start:{line:21,column:30},end:{line:21,column:151}},line:21},"5":{name:"(anonymous_5)",decl:{start:{line:21,column:76},end:{line:21,column:77}},loc:{start:{line:21,column:95},end:{line:21,column:121}},line:21},"6":{name:"given",decl:{start:{line:51,column:9},end:{line:51,column:14}},loc:{start:{line:51,column:34},end:{line:53,column:1}},line:51},"7":{name:"(anonymous_7)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:32},end:{line:58,column:5}},line:56},"8":{name:"(anonymous_8)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:12},end:{line:68,column:5}},line:65},"9":{name:"(anonymous_9)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:18},end:{line:72,column:5}},line:69},"10":{name:"(anonymous_10)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:37},end:{line:82,column:5}},line:79},"11":{name:"(anonymous_11)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:15},end:{line:92,column:5}},line:89},"12":{name:"(anonymous_12)",decl:{start:{line:98,column:4},end:{line:98,column:5}},loc:{start:{line:98,column:15},end:{line:103,column:5}},line:98},"13":{name:"(anonymous_13)",decl:{start:{line:101,column:21},end:{line:101,column:22}},loc:{start:{line:101,column:27},end:{line:101,column:90}},line:101},"14":{name:"(anonymous_14)",decl:{start:{line:101,column:59},end:{line:101,column:60}},loc:{start:{line:101,column:72},end:{line:101,column:89}},line:101},"15":{name:"(anonymous_15)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:26},end:{line:119,column:5}},line:110},"16":{name:"(anonymous_16)",decl:{start:{line:114,column:21},end:{line:114,column:22}},loc:{start:{line:114,column:30},end:{line:117,column:14}},line:114},"17":{name:"(anonymous_17)",decl:{start:{line:114,column:62},end:{line:114,column:63}},loc:{start:{line:114,column:75},end:{line:117,column:13}},line:114}},branchMap:{"0":{loc:{start:{line:17,column:16},end:{line:24,column:1}},type:"binary-expr",locations:[{start:{line:17,column:17},end:{line:17,column:21}},{start:{line:17,column:25},end:{line:17,column:39}},{start:{line:17,column:44},end:{line:24,column:1}}],line:17},"1":{loc:{start:{line:18,column:16},end:{line:18,column:34}},type:"binary-expr",locations:[{start:{line:18,column:16},end:{line:18,column:17}},{start:{line:18,column:22},end:{line:18,column:33}}],line:18},"2":{loc:{start:{line:21,column:32},end:{line:21,column:148}},type:"cond-expr",locations:[{start:{line:21,column:46},end:{line:21,column:67}},{start:{line:21,column:70},end:{line:21,column:148}}],line:21},"3":{loc:{start:{line:22,column:51},end:{line:22,column:67}},type:"binary-expr",locations:[{start:{line:22,column:51},end:{line:22,column:61}},{start:{line:22,column:65},end:{line:22,column:67}}],line:22},"4":{loc:{start:{line:116,column:23},end:{line:116,column:64}},type:"cond-expr",locations:[{start:{line:116,column:34},end:{line:116,column:52}},{start:{line:116,column:55},end:{line:116,column:64}}],line:116}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var __awaiter=(cov_7m5rkheoi.s[0]++,(cov_7m5rkheoi.b[0][0]++,this)&&(cov_7m5rkheoi.b[0][1]++,this.__awaiter)||(cov_7m5rkheoi.b[0][2]++,function(thisArg,_arguments,P,generator){cov_7m5rkheoi.f[0]++;cov_7m5rkheoi.s[1]++;return new((cov_7m5rkheoi.b[1][0]++,P)||(cov_7m5rkheoi.b[1][1]++,P=Promise))(function(resolve,reject){cov_7m5rkheoi.f[1]++;function fulfilled(value){cov_7m5rkheoi.f[2]++;cov_7m5rkheoi.s[2]++;try{cov_7m5rkheoi.s[3]++;step(generator.next(value));}catch(e){cov_7m5rkheoi.s[4]++;reject(e);}}function rejected(value){cov_7m5rkheoi.f[3]++;cov_7m5rkheoi.s[5]++;try{cov_7m5rkheoi.s[6]++;step(generator["throw"](value));}catch(e){cov_7m5rkheoi.s[7]++;reject(e);}}function step(result){cov_7m5rkheoi.f[4]++;cov_7m5rkheoi.s[8]++;result.done?(cov_7m5rkheoi.b[2][0]++,resolve(result.value)):(cov_7m5rkheoi.b[2][1]++,new P(function(resolve){cov_7m5rkheoi.f[5]++;cov_7m5rkheoi.s[9]++;resolve(result.value);}).then(fulfilled,rejected));}cov_7m5rkheoi.s[10]++;step((generator=generator.apply(thisArg,(cov_7m5rkheoi.b[3][0]++,_arguments)||(cov_7m5rkheoi.b[3][1]++,[]))).next());});}));cov_7m5rkheoi.s[11]++;Object.defineProperty(exports,"__esModule",{value:true});const PushRules_1=(cov_7m5rkheoi.s[12]++,require("../../common/listener/support/PushRules"));const pushTestUtils_1=(cov_7m5rkheoi.s[13]++,require("../../common/listener/support/pushtest/pushTestUtils"));/**
 * Simple DSL to create a decision tree.
 * Trees and subtrees can compute variables as interim values for future use.
 * Example usage, showing computed state:
 *
 * ```
 * let count = 0;  // Initialize a counter we'll use later
 * const pm: PushMapping<Goals> = given<Goals>(TruePushTest, ...) // Use any push tests
 *    .init(() => count = 0) // Init to set state
 *    .itMeans("no frogs coming")
 *    .then(
 *        given<Goals>(TruePushTest, ...).itMeans("case1")
 *           .compute(() => count++)   // Increment the counter for this branch
 *           .then(
 *              // Compute terminal rules
 *              whenPushSatisfies(count > 0, FalsePushTest).itMeans("nope").setGoals(NoGoals),
 *              whenPushSatisfies(TruePushTest).itMeans("yes").setGoals(HttpServiceGoals),
 *           ),
 *       );
 * ```
 * @param givenPushTests PushTests
 * @return interim DSL structure
 */function given(...givenPushTests){cov_7m5rkheoi.f[6]++;cov_7m5rkheoi.s[14]++;return new TreeContext(givenPushTests);}cov_7m5rkheoi.s[15]++;exports.given=given;class TreeContext{constructor(givenPushTests){cov_7m5rkheoi.f[7]++;cov_7m5rkheoi.s[16]++;this.givenPushTests=givenPushTests;}/**
     * Perform any computation necessary to initialize this branch:
     * for example, setting variables in scope
     * @param {(t: this) => any} f
     * @return {any}
     */init(f){cov_7m5rkheoi.f[8]++;cov_7m5rkheoi.s[17]++;f(this);cov_7m5rkheoi.s[18]++;return this;}itMeans(name){cov_7m5rkheoi.f[9]++;const givenPushTest=(cov_7m5rkheoi.s[19]++,pushTestUtils_1.allSatisfied(...this.givenPushTests));cov_7m5rkheoi.s[20]++;return new GivenTree(givenPushTest,name);}}cov_7m5rkheoi.s[21]++;exports.TreeContext=TreeContext;/**
 * Tree. Can compute variables
 */class GivenTree{constructor(givenPushTest,name){cov_7m5rkheoi.f[10]++;cov_7m5rkheoi.s[22]++;this.givenPushTest=givenPushTest;cov_7m5rkheoi.s[23]++;this.name=name;}/**
     * Perform computation before continuing.
     * Typically used to set values that will be used in predicate expressions.
     * @param {(t: this) => any} f
     * @return {any}
     */compute(f){cov_7m5rkheoi.f[11]++;cov_7m5rkheoi.s[24]++;f(this);cov_7m5rkheoi.s[25]++;return this;}/**
     * Set the resolution value of this tree
     * @param {V} value
     * @return {PushMapping<V>}
     */set(value){cov_7m5rkheoi.f[12]++;cov_7m5rkheoi.s[26]++;return{name:this.name,mapping:()=>{cov_7m5rkheoi.f[13]++;cov_7m5rkheoi.s[27]++;return __awaiter(this,void 0,void 0,function*(){cov_7m5rkheoi.f[14]++;cov_7m5rkheoi.s[28]++;return value;});}};}/**
     * Enter a subtree of a number of mappings. Can be use
     * to nest trees to arbitrary depth.
     * @param {PushMapping<V>} pushMappings
     * @return {PushMapping<V>}
     */then(...pushMappings){cov_7m5rkheoi.f[15]++;const rules=(cov_7m5rkheoi.s[29]++,new PushRules_1.PushRules(this.name,pushMappings));cov_7m5rkheoi.s[30]++;return{name:this.name,mapping:pli=>{cov_7m5rkheoi.f[16]++;cov_7m5rkheoi.s[31]++;return __awaiter(this,void 0,void 0,function*(){cov_7m5rkheoi.f[17]++;const eligible=(cov_7m5rkheoi.s[32]++,yield this.givenPushTest.mapping(pli));cov_7m5rkheoi.s[33]++;return eligible?(cov_7m5rkheoi.b[4][0]++,rules.mapping(pli)):(cov_7m5rkheoi.b[4][1]++,undefined);});}};}}cov_7m5rkheoi.s[34]++;exports.GivenTree=GivenTree;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JvZGpvaG5zb24vc2ZvcnphbmRvLWRldi9pZGVhLXByb2plY3RzL215LWZsb3cvc3JjL2JsdWVwcmludC9kc2wvZGVjaXNpb25UcmVlLnRzIiwic291cmNlcyI6WyIvVXNlcnMvcm9kam9obnNvbi9zZm9yemFuZG8tZGV2L2lkZWEtcHJvamVjdHMvbXktZmxvdy9zcmMvYmx1ZXByaW50L2RzbC9kZWNpc2lvblRyZWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7Ozs7Ozs7O0FBSUgsdUVBQW9FO0FBQ3BFLHdGQUFvRjtBQUVwRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNILGVBQXlCLEdBQUcsY0FBMEI7SUFDbEQsT0FBTyxJQUFJLFdBQVcsQ0FBSSxjQUFjLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsc0JBRUM7QUFFRDtJQUVJLFlBQTZCLGNBQTBCO1FBQTFCLG1CQUFjLEdBQWQsY0FBYyxDQUFZO0lBQUcsQ0FBQztJQUUzRDs7Ozs7T0FLRztJQUNJLElBQUksQ0FBQyxDQUFtQjtRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sT0FBTyxDQUFDLElBQVk7UUFDdkIsTUFBTSxhQUFhLEdBQUcsNEJBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksU0FBUyxDQUFJLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0o7QUFuQkQsa0NBbUJDO0FBRUQ7O0dBRUc7QUFDSDtJQUVJLFlBQTZCLGFBQXVCLEVBQW1CLElBQVk7UUFBdEQsa0JBQWEsR0FBYixhQUFhLENBQVU7UUFBbUIsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUFHLENBQUM7SUFFdkY7Ozs7O09BS0c7SUFDSSxPQUFPLENBQUMsQ0FBbUI7UUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsS0FBUTtRQUNmLE9BQU87WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixPQUFPLEVBQUUsR0FBUyxFQUFFLGdEQUFDLE9BQUEsS0FBSyxDQUFBLEdBQUE7U0FDN0IsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLElBQUksQ0FBQyxHQUFHLFlBQW1DO1FBQzlDLE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQVMsQ0FBSSxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3hELE9BQU87WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixPQUFPLEVBQUUsQ0FBTSxHQUFHLEVBQUMsRUFBRTtnQkFDakIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdkQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNyRCxDQUFDLENBQUE7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBM0NELDhCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgwqkgMjAxOCBBdG9taXN0LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFB1c2hNYXBwaW5nIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9saXN0ZW5lci9QdXNoTWFwcGluZ1wiO1xuaW1wb3J0IHsgUHVzaFRlc3QgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2xpc3RlbmVyL1B1c2hUZXN0XCI7XG5pbXBvcnQgeyBQdXNoUnVsZXMgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2xpc3RlbmVyL3N1cHBvcnQvUHVzaFJ1bGVzXCI7XG5pbXBvcnQgeyBhbGxTYXRpc2ZpZWQgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2xpc3RlbmVyL3N1cHBvcnQvcHVzaHRlc3QvcHVzaFRlc3RVdGlsc1wiO1xuXG4vKipcbiAqIFNpbXBsZSBEU0wgdG8gY3JlYXRlIGEgZGVjaXNpb24gdHJlZS5cbiAqIFRyZWVzIGFuZCBzdWJ0cmVlcyBjYW4gY29tcHV0ZSB2YXJpYWJsZXMgYXMgaW50ZXJpbSB2YWx1ZXMgZm9yIGZ1dHVyZSB1c2UuXG4gKiBFeGFtcGxlIHVzYWdlLCBzaG93aW5nIGNvbXB1dGVkIHN0YXRlOlxuICpcbiAqIGBgYFxuICogbGV0IGNvdW50ID0gMDsgIC8vIEluaXRpYWxpemUgYSBjb3VudGVyIHdlJ2xsIHVzZSBsYXRlclxuICogY29uc3QgcG06IFB1c2hNYXBwaW5nPEdvYWxzPiA9IGdpdmVuPEdvYWxzPihUcnVlUHVzaFRlc3QsIC4uLikgLy8gVXNlIGFueSBwdXNoIHRlc3RzXG4gKiAgICAuaW5pdCgoKSA9PiBjb3VudCA9IDApIC8vIEluaXQgdG8gc2V0IHN0YXRlXG4gKiAgICAuaXRNZWFucyhcIm5vIGZyb2dzIGNvbWluZ1wiKVxuICogICAgLnRoZW4oXG4gKiAgICAgICAgZ2l2ZW48R29hbHM+KFRydWVQdXNoVGVzdCwgLi4uKS5pdE1lYW5zKFwiY2FzZTFcIilcbiAqICAgICAgICAgICAuY29tcHV0ZSgoKSA9PiBjb3VudCsrKSAgIC8vIEluY3JlbWVudCB0aGUgY291bnRlciBmb3IgdGhpcyBicmFuY2hcbiAqICAgICAgICAgICAudGhlbihcbiAqICAgICAgICAgICAgICAvLyBDb21wdXRlIHRlcm1pbmFsIHJ1bGVzXG4gKiAgICAgICAgICAgICAgd2hlblB1c2hTYXRpc2ZpZXMoY291bnQgPiAwLCBGYWxzZVB1c2hUZXN0KS5pdE1lYW5zKFwibm9wZVwiKS5zZXRHb2FscyhOb0dvYWxzKSxcbiAqICAgICAgICAgICAgICB3aGVuUHVzaFNhdGlzZmllcyhUcnVlUHVzaFRlc3QpLml0TWVhbnMoXCJ5ZXNcIikuc2V0R29hbHMoSHR0cFNlcnZpY2VHb2FscyksXG4gKiAgICAgICAgICAgKSxcbiAqICAgICAgICk7XG4gKiBgYGBcbiAqIEBwYXJhbSBnaXZlblB1c2hUZXN0cyBQdXNoVGVzdHNcbiAqIEByZXR1cm4gaW50ZXJpbSBEU0wgc3RydWN0dXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnaXZlbjxWPiguLi5naXZlblB1c2hUZXN0czogUHVzaFRlc3RbXSkge1xuICAgIHJldHVybiBuZXcgVHJlZUNvbnRleHQ8Vj4oZ2l2ZW5QdXNoVGVzdHMpO1xufVxuXG5leHBvcnQgY2xhc3MgVHJlZUNvbnRleHQ8Vj4ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBnaXZlblB1c2hUZXN0czogUHVzaFRlc3RbXSkge31cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYW55IGNvbXB1dGF0aW9uIG5lY2Vzc2FyeSB0byBpbml0aWFsaXplIHRoaXMgYnJhbmNoOlxuICAgICAqIGZvciBleGFtcGxlLCBzZXR0aW5nIHZhcmlhYmxlcyBpbiBzY29wZVxuICAgICAqIEBwYXJhbSB7KHQ6IHRoaXMpID0+IGFueX0gZlxuICAgICAqIEByZXR1cm4ge2FueX1cbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdChmOiAodDogdGhpcykgPT4gYW55KTogYW55IHtcbiAgICAgICAgZih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGl0TWVhbnMobmFtZTogc3RyaW5nKTogR2l2ZW5UcmVlPFY+IHtcbiAgICAgICAgY29uc3QgZ2l2ZW5QdXNoVGVzdCA9IGFsbFNhdGlzZmllZCguLi50aGlzLmdpdmVuUHVzaFRlc3RzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBHaXZlblRyZWU8Vj4oZ2l2ZW5QdXNoVGVzdCwgbmFtZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRyZWUuIENhbiBjb21wdXRlIHZhcmlhYmxlc1xuICovXG5leHBvcnQgY2xhc3MgR2l2ZW5UcmVlPFY+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZ2l2ZW5QdXNoVGVzdDogUHVzaFRlc3QsIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nKSB7fVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBjb21wdXRhdGlvbiBiZWZvcmUgY29udGludWluZy5cbiAgICAgKiBUeXBpY2FsbHkgdXNlZCB0byBzZXQgdmFsdWVzIHRoYXQgd2lsbCBiZSB1c2VkIGluIHByZWRpY2F0ZSBleHByZXNzaW9ucy5cbiAgICAgKiBAcGFyYW0geyh0OiB0aGlzKSA9PiBhbnl9IGZcbiAgICAgKiBAcmV0dXJuIHthbnl9XG4gICAgICovXG4gICAgcHVibGljIGNvbXB1dGUoZjogKHQ6IHRoaXMpID0+IGFueSk6IGFueSB7XG4gICAgICAgIGYodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgcmVzb2x1dGlvbiB2YWx1ZSBvZiB0aGlzIHRyZWVcbiAgICAgKiBAcGFyYW0ge1Z9IHZhbHVlXG4gICAgICogQHJldHVybiB7UHVzaE1hcHBpbmc8Vj59XG4gICAgICovXG4gICAgcHVibGljIHNldCh2YWx1ZTogVik6IFB1c2hNYXBwaW5nPFY+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIG1hcHBpbmc6IGFzeW5jICgpID0+IHZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVudGVyIGEgc3VidHJlZSBvZiBhIG51bWJlciBvZiBtYXBwaW5ncy4gQ2FuIGJlIHVzZVxuICAgICAqIHRvIG5lc3QgdHJlZXMgdG8gYXJiaXRyYXJ5IGRlcHRoLlxuICAgICAqIEBwYXJhbSB7UHVzaE1hcHBpbmc8Vj59IHB1c2hNYXBwaW5nc1xuICAgICAqIEByZXR1cm4ge1B1c2hNYXBwaW5nPFY+fVxuICAgICAqL1xuICAgIHB1YmxpYyB0aGVuKC4uLnB1c2hNYXBwaW5nczogQXJyYXk8UHVzaE1hcHBpbmc8Vj4+KTogUHVzaE1hcHBpbmc8Vj4ge1xuICAgICAgICBjb25zdCBydWxlcyA9IG5ldyBQdXNoUnVsZXM8Vj4odGhpcy5uYW1lLCBwdXNoTWFwcGluZ3MpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbWFwcGluZzogYXN5bmMgcGxpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGlnaWJsZSA9IGF3YWl0IHRoaXMuZ2l2ZW5QdXNoVGVzdC5tYXBwaW5nKHBsaSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsaWdpYmxlID8gcnVsZXMubWFwcGluZyhwbGkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=