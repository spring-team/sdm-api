{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/deploy/maven/mavenSourceDeployerTest.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/test/common/delivery/deploy/maven/mavenSourceDeployerTest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA2F;AAE3F,4CAA4F;AAE5F,sGAAmG;AACnG,4FAAyF;AACzF,uCAAuC;AAEvC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAEjC,EAAE,CAAC,iCAAiC,EAAE,GAAS,EAAE;QAC7C,MAAM,EAAE,GAAG,6BAAa,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC,CAAC;QAClG,MAAM,CAAC,GAAY,iCAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,mBAAa,CAAC,IAAI,yBAAmB,CAAC,CAAC,CAAC,EAAE;YACvD,OAAO,EAAE,kBAAkB;YAC3B,uBAAuB,EAAE,GAAG,EAAE,CAAC,EAAE;YACjC,eAAe,EAAE,CAAC,gDAAgD,CAAC;SACtE,CAAC,CAAC;QACH,IAAI;YACA,MAAM,QAAQ,CAAC,MAAM,CACjB,EAAC,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,OAAO,EAAC,EAChD;gBACI,IAAI,EAAE,KAAK;gBACX,WAAW,EAAE,UAAU;gBACvB,oBAAoB,EAAE,EAAE;aAC3B,EAAE,IAAI,wBAAkB,CAAC,MAAM,CAAC,EAAE,EAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,EAAE,MAAM,CAAC,CAAC;YAClF,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SACrC;QAAC,OAAO,GAAG,EAAE;YACV,KAAK;SACR;IACL,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAEnB,6CAA6C;IAC7C,EAAE,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAS,EAAE;QAC5C,MAAM,WAAW,GAAG,EAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAC,CAAC;QACtD,MAAM,EAAE,GAAG,6BAAa,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC,CAAC;QACpG,MAAM,CAAC,GAAY,MAAM,2CAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,mBAAa,CAAC,IAAI,yBAAmB,CAAC,CAAC,CAAC,EAAE;YACvD,OAAO,EAAE,kBAAkB;YAC3B,SAAS,EAAE,KAAK;YAChB,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC,qBAAqB,CAAC;YACtD,eAAe,EAAE,CAAC,gDAAgD,CAAC;SACtE,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,CAClC,EAAC,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,OAAO,EAAC,EAChD;YACI,IAAI,EAAE,KAAK;YACX,WAAW,EAAE,UAAU;YACvB,oBAAoB,EAAE,EAAE;SAC3B,EACD,IAAI,wBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QACjE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjC,MAAO,QAAQ,CAAC,CAAC,CAAS,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IACnD,CAAC,CAAA,CAAC,CAAC,CAAC,oBAAoB;AAE5B,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { LoggingProgressLog, mavenDeployer, SingleProjectLoader } from \"../../../../../src\";\n\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport { InMemoryProject } from \"@atomist/automation-client/project/mem/InMemoryProject\";\nimport * as assert from \"power-assert\";\n\ndescribe(\"mavenSourceDeployer\", () => {\n\n    it(\"should fail to deploy non Maven\", async () => {\n        const id = GitHubRepoRef.from({owner: \"spring-team\", repo: \"spring-rest-seed\", branch: \"master\"});\n        const p: Project = InMemoryProject.from(id);\n        const deployer = mavenDeployer(new SingleProjectLoader(p), {\n            baseUrl: \"http://127.0.0.1\",\n            commandLineArgumentsFor: () => [],\n            successPatterns: [/Started [A-Za-z0-9_$]+ in [0-9].[0-9]+ seconds/],\n        });\n        try {\n            await deployer.deploy(\n                {id, name: \"spring-rest-seed\", version: \"0.1.0\"},\n                {\n                    name: \"foo\",\n                    description: \"whatever\",\n                    managedDeploymentKey: id,\n                }, new LoggingProgressLog(\"test\"), {token: process.env.GITHUB_TOKEN}, \"T123\");\n            assert.fail(\"Should have failed\");\n        } catch (err) {\n            // Ok\n        }\n    }).timeout(300000);\n\n    // TODO figure out why this doesn't terminate\n    it.skip(\"should deploy valid Maven\", async () => {\n        const credentials = {token: process.env.GITHUB_TOKEN};\n        const id = GitHubRepoRef.from({owner: \"atomist-seeds\", repo: \"spring-rest-seed\", branch: \"master\"});\n        const p: Project = await GitCommandGitProject.cloned(credentials, id);\n        const deployer = mavenDeployer(new SingleProjectLoader(p), {\n            baseUrl: \"http://127.0.0.1\",\n            lowerPort: 10000,\n            commandLineArgumentsFor: () => [`-Dserver.port=10000`],\n            successPatterns: [/Started [A-Za-z0-9_$]+ in [0-9].[0-9]+ seconds/],\n        });\n\n        const deployed = await deployer.deploy(\n            {id, name: \"spring-rest-seed\", version: \"0.1.0\"},\n            {\n                name: \"foo\",\n                description: \"whatever\",\n                managedDeploymentKey: id,\n            },\n            new LoggingProgressLog(\"test\", \"info\"), credentials, \"T123\");\n        assert.equal(deployed.length, 1);\n        await (deployed[0] as any).childProcess.kill();\n    }); // .timeout(300000);\n\n});\n"]}