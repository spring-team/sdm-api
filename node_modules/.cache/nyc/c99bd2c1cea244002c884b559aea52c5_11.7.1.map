{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/dryRunEditor.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/command/editor/dry-run/dryRunEditor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAAmE;AACnE,oHAAuG;AAIvG,qIAAkI;AAClI,gGAAiH;AAGjH,6CAAyD;AAEzD,mFAAgF;AAChF,2DAAwD;AAExD,oDAAqE;AACrE,sDAAwD;AACxD,+DAA4D;AAE/C,QAAA,aAAa,GAAG,iBAAiB,CAAC;AAE/C;;;;;;;;;;;;GAYG;AACH,sBAAuD,GAAyC,EACzC,cAA6B,iCAAgC,EAC7D,IAAY,EACZ,UAAiD,EAAE,EACnD,UACI,IAAI,6DAA6B,EAAE;IAC1F,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KAC3D;IACD,MAAM,YAAY,mBACd,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,IAAI,EACxC,MAAM,EAAE,YAAY,IAAI,EAAE,EAC1B,UAAU,EAAE,yCAAc,EAAE,EAC5B,UAAU,EACN,CAAC,CAAC,EAAE,CAAC,iDAAuB,CAAC,IAAI,4BAAoB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EACnF,QAAQ,EAAE,CAAC,CAAC,MAA2C,EAAE,EAAE;YACvD,0BAAM,CAAC,IAAI,CAAC,yDAAyD,EAAE,MAAM,CAAC,CAAC;YAC/E,MAAM,WAAW,GAAI,MAAoC,CAAC,uBAAuB,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC;YACjH,MAAM,MAAM,GAAW;gBACnB,OAAO,EAAE,qBAAa;gBACtB,UAAU,EAAE,yBAAyB;gBACrC,WAAW;gBACX,KAAK,EAAE,SAAS;aACnB,CAAC;YACF,OAAO,IAAI,yCAAmB,CACzB,MAAoC,CAAC,iBAAiB,IAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,EACvF,sBAAsB,CAAE,MAAoC,CAAC,oBAAoB,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,WAAW,CAAC,EAC5H,MAAM,CAAC,OAAO,CAAC,WAAW,EAC1B,MAAM,CAAC,CAAC;QAChB,CAAC,CAAC,IACC,OAAO,CACb,CAAC;IACF,OAAO,+BAAa,CAChB,oCAAmB,CAAC,IAAI,EAAE,GAAG,CAAQ,EACrC,iDAAiC,CAAC,WAAW,EAAE,OAAO,CAAC,EACvD,IAAI,EACJ,YAAY,CAAC,CAAC;AACtB,CAAC;AArCD,oCAqCC;AAED,gCAAgC,IAAY,EAAE,WAAmB;IAC7D,OAAO,GAAG,IAAI,iBAAiB,WAAW,EAAE,CAAC;AACjD,CAAC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand, logger } from \"@atomist/automation-client\";\nimport { allReposInTeam } from \"@atomist/automation-client/operations/common/allReposInTeamRepoFinder\";\nimport { EditorOrReviewerParameters } from \"@atomist/automation-client/operations/common/params/BaseEditorOrReviewerParameters\";\nimport { EditOneOrAllParameters } from \"@atomist/automation-client/operations/common/params/EditOneOrAllParameters\";\nimport { FallbackParams } from \"@atomist/automation-client/operations/common/params/FallbackParams\";\nimport { GitHubFallbackReposParameters } from \"@atomist/automation-client/operations/common/params/GitHubFallbackReposParameters\";\nimport { EditorCommandDetails, editorHandler } from \"@atomist/automation-client/operations/edit/editorToCommand\";\nimport { AnyProjectEditor } from \"@atomist/automation-client/operations/edit/projectEditor\";\nimport { Maker } from \"@atomist/automation-client/util/constructionUtils\";\nimport { CachingProjectLoader } from \"../../../../index\";\nimport { Status } from \"../../../../util/github/ghub\";\nimport { projectLoaderRepoLoader } from \"../../../repo/projectLoaderRepoLoader\";\nimport { EmptyParameters } from \"../../EmptyParameters\";\nimport { EditModeSuggestion } from \"../EditModeSuggestion\";\nimport { toEditorOrReviewerParametersMaker } from \"../editorCommand\";\nimport { chattyEditorFactory } from \"../editorWrappers\";\nimport { NewBranchWithStatus } from \"./NewBranchWithStatus\";\n\nexport const DryRunContext = \"atomist-dry-run\";\n\n/**\n * Wrap an editor in a command handler that sets a dry run status.\n * Typically used to wait for build success or failure, resulting in issue or PR.\n * Allows use of custom parameters as in editorCommand\n * Targeting (targets property) is handled automatically if the parameters\n * do not implement TargetsParams\n * @param edd function to make a fresh editor instance from the params\n * @param name editor name\n * @param paramsMaker parameters factory, typically the name of a class with a no arg constructor\n * @param details optional details to customize behavior\n * @param targets targets parameters. Allows targeting to other source control systems\n * Add intent \"try edit <name>\"\n */\nexport function dryRunEditor<PARAMS = EmptyParameters>(edd: (params: PARAMS) => AnyProjectEditor,\n                                                       paramsMaker: Maker<PARAMS> = EmptyParameters as Maker<PARAMS>,\n                                                       name: string,\n                                                       details: Partial<EditorCommandDetails<PARAMS>> = {},\n                                                       targets: FallbackParams =\n                                                           new GitHubFallbackReposParameters()): HandleCommand<EditOneOrAllParameters> {\n    if (!!details.editMode) {\n        throw new Error(\"Cannot set editMode for dryRunEditor\");\n    }\n    const detailsToUse: EditorCommandDetails = {\n        description: details.description || name,\n        intent: `try edit ${name}`,\n        repoFinder: allReposInTeam(),\n        repoLoader:\n            p => projectLoaderRepoLoader(new CachingProjectLoader(), p.targets.credentials),\n        editMode: ((params: PARAMS & EditorOrReviewerParameters) => {\n            logger.info(\"About to create edit mode for dry run editor: params=%j\", params);\n            const description = (params as any as EditModeSuggestion).desiredPullRequestTitle || details.description || name;\n            const status: Status = {\n                context: DryRunContext,\n                target_url: \"https://www.atomist.com\",\n                description,\n                state: \"pending\",\n            };\n            return new NewBranchWithStatus(\n                (params as any as EditModeSuggestion).desiredBranchName || `edit-${name}-${Date.now()}`,\n                toAtomistCommitMessage((params as any as EditModeSuggestion).desiredCommitMessage || description.substr(0, 50), description),\n                params.targets.credentials,\n                status);\n        }),\n        ...details,\n    };\n    return editorHandler(\n        chattyEditorFactory(name, edd) as any,\n        toEditorOrReviewerParametersMaker(paramsMaker, targets),\n        name,\n        detailsToUse);\n}\n\nfunction toAtomistCommitMessage(base: string, description: string) {\n    return `${base}\\n\\n[atomist] ${description}`;\n}\n"]}