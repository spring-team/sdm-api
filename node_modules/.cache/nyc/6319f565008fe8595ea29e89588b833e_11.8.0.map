{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/commands/ShowBuildLog.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/commands/ShowBuildLog.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAAmI;AACnI,sEAAmE;AAEnE,oEAA0E;AAC1E,8FAA2F;AAE3F,4BAA4B;AAI5B,oDAAyD;AACzD,iDAA4D;AAC5D,gGAA2F;AAG3F,IAAa,yBAAyB,GAAtC;CAYC,CAAA;AAVG;IADC,0BAAM,CAAC,2BAAO,CAAC,SAAS,CAAC;;8DACC;AAG3B;IADC,mCAAe,CAAC,oCAAgB,CAAC,WAAW,CAAC;;wDACzB;AAGrB;IADC,mCAAe,CAAC,oCAAgB,CAAC,gBAAgB,CAAC;;uDAC/B;AAGpB;IADC,6BAAS,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC;;sDACT;AAXX,yBAAyB;IADrC,uBAAU,EAAE;GACA,yBAAyB,CAYrC;AAZY,8DAAyB;AActC,kCAAkC,WAA+B;IAC7D,OAAO,CAAO,GAAmB,EACnB,MAA0E,EAAE,EAAE;QAExF,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,yBAAkB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,6BAAa,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,kCAAkC;QAElI,MAAM,EAAE,GAAG,yBAAe,CAAC,MAAM,EAAE,EAAC,GAAG,EAAC,CAAC,CAAC;QAC1C,MAAM,EAAE,GAAoB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAChF,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAE3C,MAAM,iDAAsB,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;QACzD,MAAM,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,6CAA6C,GAAG,GAAG,CAAC,CAAC;QACrF,OAAO,2BAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC;AAED,uBAA6B,OAAuB,EAAE,EAAiB;;QACnE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAA+C;YAC9F,IAAI,EAAE,eAAe;YACrB,SAAS,EAAE,EAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAC;SAC3B,CAAC,CAAC;QACH,MAAM,MAAM,GAAyB,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;SAC3D;QACD,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtG,CAAC;CAAA;AAED,gCAAuC,iBAAqC;IACxE,OAAO,8BAAkB,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,EACjE,yBAAyB,EAAE,iBAAiB,EAC5C,qCAAqC,EACrC,gBAAgB,CAAC,CAAC;AAC1B,CAAC;AALD,wDAKC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HandleCommand, MappedParameter, MappedParameters, Parameter, Secret, Secrets, Success } from \"@atomist/automation-client\";\nimport { Parameters } from \"@atomist/automation-client/decorators\";\nimport { HandlerContext } from \"@atomist/automation-client/Handlers\";\nimport { commandHandlerFrom } from \"@atomist/automation-client/onCommand\";\nimport { GitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport * as _ from \"lodash\";\nimport { AddressChannels } from \"../../common/slack/addressChannels\";\nimport { LogInterpretation } from \"../../spi/log/InterpretedLog\";\nimport { BuildUrlBySha } from \"../../typings/types\";\nimport { toRemoteRepoRef } from \"../../util/git/repoRef\";\nimport { tipOfDefaultBranch } from \"../../util/github/ghub\";\nimport { displayBuildLogFailure } from \"../events/delivery/build/SetStatusOnBuildComplete\";\n\n@Parameters()\nexport class DisplayBuildLogParameters {\n    @Secret(Secrets.UserToken)\n    public githubToken: string;\n\n    @MappedParameter(MappedParameters.GitHubOwner)\n    public owner: string;\n\n    @MappedParameter(MappedParameters.GitHubRepository)\n    public repo: string;\n\n    @Parameter({required: false})\n    public sha?: string;\n}\n\nfunction displayBuildLogForCommit(interpreter?: LogInterpretation) {\n    return async (ctx: HandlerContext,\n                  params: { githubToken: string, owner: string, repo: string, sha?: string }) => {\n\n        const sha = params.sha ? params.sha :\n            await tipOfDefaultBranch(params.githubToken, new GitHubRepoRef(params.owner, params.repo)); // TODO: use fetchDefaultBranchTip\n\n        const id = toRemoteRepoRef(params, {sha});\n        const ac: AddressChannels = (msg, opts) => ctx.messageClient.respond(msg, opts);\n        const build = await fetchBuildUrl(ctx, id);\n\n        await displayBuildLogFailure(id, build, ac, interpreter);\n        await ctx.messageClient.respond(\":heavy_check_mark: Build log displayed for \" + sha);\n        return Success;\n    };\n}\n\nasync function fetchBuildUrl(context: HandlerContext, id: RemoteRepoRef): Promise<{ buildUrl?: string }> {\n    const queryResult = await context.graphClient.query<BuildUrlBySha.Query, BuildUrlBySha.Variables>({\n        name: \"BuildUrlBySha\",\n        variables: {sha: id.sha},\n    });\n    const commit: BuildUrlBySha.Commit = _.get(queryResult, \"Commit[0]\");\n    if (!commit) {\n        throw new Error(\"No commit found for \" + id.sha);\n    }\n    if (!commit.builds || commit.builds.length === 0) {\n        throw new Error(\"No builds found for commit \" + id.sha);\n    }\n    return queryResult.Commit[0].builds.sort((b1, b2) => b2.timestamp.localeCompare(b1.timestamp))[0];\n}\n\nexport function displayBuildLogHandler(logInterpretation?: LogInterpretation): HandleCommand<DisplayBuildLogParameters> {\n    return commandHandlerFrom(displayBuildLogForCommit(logInterpretation),\n        DisplayBuildLogParameters, \"DisplayBuildLog\",\n        \"interpret and report on a build log\",\n        \"show build log\");\n}\n"]}