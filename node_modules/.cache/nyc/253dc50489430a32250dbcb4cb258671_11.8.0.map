{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnRepoOnboarded.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/handlers/events/repo/OnRepoOnboarded.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;AAEH,kEAA2H;AAC3H,sEAAwE;AACxE,sGAAmG;AAEnG,2EAA4F;AAE5F,uDAA4D;AAG5D;;GAEG;AAEH,IAAa,eAAe,GAA5B;IAEI,YAA6B,OAA0B,EAC1B,kBAAuC;QADvC,YAAO,GAAP,OAAO,CAAmB;QAC1B,uBAAkB,GAAlB,kBAAkB,CAAqB;IACpE,CAAC;IAEY,MAAM,CAAC,KAAsD,EACtD,OAAuB,EACvB,MAAY;;YAC5B,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAElD,MAAM,EAAE,GAAG,yBAAe,CAAC,aAAa,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,aAAa,EAAC,CAAC,CAAC;YAC3F,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEjF,MAAM,eAAe,GAAoB,oCAAkB,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACzF,MAAM,OAAO,GAAG,MAAM,2CAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACnE,MAAM,UAAU,GAA8B;gBAC1C,EAAE;gBACF,OAAO;gBACP,eAAe;gBACf,WAAW;gBACX,OAAO;aACV,CAAC;YACF,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO;iBAC3B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAC3B,CAAC;YACF,OAAO,2BAAO,CAAC;QACnB,CAAC;KAAA;CACJ,CAAA;AA5BY,eAAe;IAD3B,gCAAY,CAAC,oBAAoB,EAAE,sBAAY,CAAC,iBAAiB,CAAC,CAAC;;GACvD,eAAe,CA4B3B;AA5BY,0CAAe","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventFired, EventHandler, HandleEvent, HandlerContext, HandlerResult, Success } from \"@atomist/automation-client\";\nimport { subscription } from \"@atomist/automation-client/graph/graphQL\";\nimport { GitCommandGitProject } from \"@atomist/automation-client/project/git/GitCommandGitProject\";\nimport { ProjectListener, ProjectListenerInvocation } from \"../../../common/listener/ProjectListener\";\nimport { AddressChannels, addressChannelsFor } from \"../../../common/slack/addressChannels\";\nimport * as schema from \"../../../typings/types\";\nimport { toRemoteRepoRef } from \"../../../util/git/repoRef\";\nimport { CredentialsResolver } from \"../../common/CredentialsResolver\";\n\n/**\n * A repo has been onboarded\n */\n@EventHandler(\"On repo onboarding\", subscription(\"OnRepoOnboarded\"))\nexport class OnRepoOnboarded implements HandleEvent<schema.OnRepoOnboarded.Subscription> {\n\n    constructor(private readonly actions: ProjectListener[],\n                private readonly credentialsFactory: CredentialsResolver) {\n    }\n\n    public async handle(event: EventFired<schema.OnRepoOnboarded.Subscription>,\n                        context: HandlerContext,\n                        params: this): Promise<HandlerResult> {\n        const repoOnboarded = event.data.RepoOnboarded[0];\n\n        const id = toRemoteRepoRef(repoOnboarded.repo, {branch: repoOnboarded.repo.defaultBranch});\n        const credentials = this.credentialsFactory.eventHandlerCredentials(context, id);\n\n        const addressChannels: AddressChannels = addressChannelsFor(repoOnboarded.repo, context);\n        const project = await GitCommandGitProject.cloned(credentials, id);\n        const invocation: ProjectListenerInvocation = {\n            id,\n            context,\n            addressChannels,\n            credentials,\n            project,\n        };\n        await Promise.all(params.actions\n            .map(l => l(invocation)),\n        );\n        return Success;\n    }\n}\n"]}