{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/executeDeploy.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/deploy/executeDeploy.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAA6D;AAI7D,qCAAuF;AAEvF,4BAA4B;AAG5B;;GAEG;AACH,uBAA8B,aAA4B,EAC5B,YAAkB,EAClB,MAAc;IAExC,OAAO,CAAO,IAAuB,EAA8B,EAAE;QACjE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAClC,MAAM,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,WAAW,EAAC,GAAG,IAAI,CAAC;QACrD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC;QAEnC,0BAAM,CAAC,IAAI,CAAC,0CAA0C,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEnF,MAAM,gBAAgB,GAAG,MAAM,yBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,EAC5E,aAAa,EAAE,EAAE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QAEjD,eAAe;QACf,gBAAgB,CAAC,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACrD,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAC5C,gBAAgB,EAChB,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,EAC9B,WAAW,EACX,WAAW,EACX,WAAW,CAAC,CAAC;QAEjB,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,0CAAiC,CAC7E,EAAC,YAAY,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC,CAAC;QAExC,OAAO,2BAAO,CAAC;IACnB,CAAC,CAAA,CAAC;AACN,CAAC;AA5BD,sCA4BC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger, Success } from \"@atomist/automation-client\";\nimport { ArtifactStore } from \"../../../spi/artifact/ArtifactStore\";\nimport { ExecuteGoalResult } from \"../goals/ExecuteGoalResult\";\nimport { Goal } from \"../goals/Goal\";\nimport { checkOutArtifact, setEndpointGoalOnSuccessfulDeploy, Target } from \"./deploy\";\n\nimport * as _ from \"lodash\";\nimport { ExecuteGoalWithLog, RunWithLogContext } from \"../goals/support/reportGoalError\";\n\n/**\n * Execute deploy with the supplied deployer and target\n */\nexport function executeDeploy(artifactStore: ArtifactStore,\n                              endpointGoal: Goal,\n                              target: Target): ExecuteGoalWithLog {\n\n    return async (rwlc: RunWithLogContext): Promise<ExecuteGoalResult> => {\n        const commit = rwlc.status.commit;\n        const {credentials, id, context, progressLog} = rwlc;\n        const atomistTeam = context.teamId;\n\n        logger.info(\"Deploying project %s:%s with target [%j]\", id.owner, id.repo, target);\n\n        const artifactCheckout = await checkOutArtifact(_.get(commit, \"image.imageName\"),\n            artifactStore, id, credentials, progressLog);\n\n        // questionable\n        artifactCheckout.id.branch = commit.pushes[0].branch;\n        const deployments = await target.deployer.deploy(\n            artifactCheckout,\n            target.targeter(id, id.branch),\n            progressLog,\n            credentials,\n            atomistTeam);\n\n        await Promise.all(deployments.map(deployment => setEndpointGoalOnSuccessfulDeploy(\n            {endpointGoal, rwlc, deployment})));\n\n        return Success;\n    };\n}\n"]}