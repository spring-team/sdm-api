{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/npmBuilder.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/build/local/npm/npmBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteRepoRef } from \"@atomist/automation-client/operations/common/RepoId\";\nimport { GitProject } from \"@atomist/automation-client/project/git/GitProject\";\nimport { Project } from \"@atomist/automation-client/project/Project\";\nimport { AppInfo } from \"../../../../../spi/deploy/Deployment\";\nimport {\n    asSpawnCommand,\n    spawnAndWatch,\n    SpawnCommand,\n} from \"../../../../../util/misc/spawned\";\nimport { ProjectLoader } from \"../../../../repo/ProjectLoader\";\nimport { ExecuteGoalResult } from \"../../../goals/ExecuteGoalResult\";\nimport { RunWithLogContext } from \"../../../goals/support/reportGoalError\";\nimport { branchFromCommit } from \"../../executeBuild\";\nimport { readSdmVersion } from \"../projectVersioner\";\nimport { SpawnBuilder, SpawnBuilderOptions } from \"../SpawnBuilder\";\nimport { NpmLogInterpreter } from \"./npmLogInterpreter\";\n\n/**\n * Options to use when running node commands like npm run compile that require dev dependencies to be installed\n */\nexport const DevelopmentEnvOptions = {\n    env: {\n        ...process.env,\n        NODE_ENV: \"development\",\n    },\n};\n\nexport const Install: SpawnCommand = asSpawnCommand(\"npm ci\", DevelopmentEnvOptions);\n\nexport function nodeBuilder(projectLoader: ProjectLoader, ...commands: string[]) {\n    return new SpawnBuilder({\n        projectLoader,\n        options: npmBuilderOptions(commands.map(cmd => asSpawnCommand(cmd, DevelopmentEnvOptions))),\n    });\n}\n\nfunction npmBuilderOptions(commands: SpawnCommand[]): SpawnBuilderOptions {\n    return {\n        name: \"NpmBuilder\",\n        commands,\n        errorFinder: (code, signal, l) => {\n            return l.log.startsWith(\"[error]\") || l.log.includes(\"ERR!\");\n        },\n        logInterpreter: NpmLogInterpreter,\n        async projectToAppInfo(p: Project): Promise<AppInfo> {\n            const packageJson = await p.findFile(\"package.json\");\n            const content = await packageJson.getContent();\n            const pkg = JSON.parse(content);\n            return { id: p.id as RemoteRepoRef, name: pkg.name, version: pkg.version };\n        },\n    };\n}\n\nexport function npmBuilderOptionsFromFile(commandFile: string): SpawnBuilderOptions {\n    return {\n        name: \"NpmBuilder\",\n        commandFile,\n        errorFinder: (code, signal, l) => {\n            return l.log.startsWith(\"[error]\") || l.log.includes(\"ERR!\");\n        },\n        logInterpreter: NpmLogInterpreter,\n        async projectToAppInfo(p: Project): Promise<AppInfo> {\n            const packageJson = await p.findFile(\"package.json\");\n            const content = await packageJson.getContent();\n            const pkg = JSON.parse(content);\n            return { id: p.id as RemoteRepoRef, name: pkg.name, version: pkg.version };\n        },\n    };\n}\n\nexport const NpmPreparations = [npmInstallPreparation, npmVersionPreparation, npmCompilePreparation];\n\nexport async function npmInstallPreparation(p: GitProject, rwlc: RunWithLogContext): Promise<ExecuteGoalResult> {\n    const hasPackageLock = p.fileExistsSync(\"package-lock.json\");\n    return spawnAndWatch({\n        command: \"npm\",\n        args: [hasPackageLock ? \"ci\" : \"install\"],\n    }, {\n            cwd: p.baseDir,\n            ...DevelopmentEnvOptions,\n        }, rwlc.progressLog,\n        {\n            errorFinder: code => code != null,\n        });\n}\n\nexport async function npmVersionPreparation(p: GitProject, rwlc: RunWithLogContext): Promise<ExecuteGoalResult> {\n    const commit = rwlc.status.commit;\n    const version = await readSdmVersion(\n        commit.repo.owner,\n        commit.repo.name,\n        commit.repo.org.provider.providerId,\n        commit.sha,\n        branchFromCommit(commit),\n        rwlc.context);\n    return spawnAndWatch({\n            command: \"npm\",\n            args: [\"--no-git-tag-version\", \"version\", version],\n        },\n        {\n            cwd: p.baseDir,\n        },\n        rwlc.progressLog,\n        {\n            errorFinder: code => code !== 0,\n        });\n}\n\nexport async function npmCompilePreparation(p: GitProject, rwlc: RunWithLogContext): Promise<ExecuteGoalResult> {\n    return spawnAndWatch({\n        command: \"npm\",\n        args: [\"run\", \"compile\"],\n    }, {\n            cwd: p.baseDir,\n            ...DevelopmentEnvOptions,\n        }, rwlc.progressLog,\n        {\n            errorFinder: code => code != null,\n        });\n}\n"]}