"use strict";/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var cov_kua2qjnr6=function(){var path="/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/common/commonGoals.ts",hash="bfc386b3657156324d0e0df248d0eb7ff490dba6",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/delivery/goals/common/commonGoals.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:24},end:{line:18,column:51}},"2":{start:{line:19,column:15},end:{line:19,column:33}},"3":{start:{line:20,column:16},end:{line:20,column:35}},"4":{start:{line:21,column:0},end:{line:26,column:3}},"5":{start:{line:27,column:0},end:{line:34,column:3}},"6":{start:{line:35,column:0},end:{line:42,column:3}},"7":{start:{line:47,column:0},end:{line:53,column:3}},"8":{start:{line:54,column:0},end:{line:60,column:3}},"9":{start:{line:65,column:0},end:{line:73,column:3}},"10":{start:{line:74,column:0},end:{line:83,column:24}},"11":{start:{line:84,column:0},end:{line:93,column:22}},"12":{start:{line:94,column:0},end:{line:102,column:47}},"13":{start:{line:105,column:0},end:{line:111,column:22}},"14":{start:{line:112,column:0},end:{line:119,column:25}},"15":{start:{line:120,column:0},end:{line:126,column:3}},"16":{start:{line:131,column:0},end:{line:138,column:34}},"17":{start:{line:139,column:0},end:{line:146,column:32}},"18":{start:{line:147,column:0},end:{line:153,column:54}},"19":{start:{line:154,column:0},end:{line:160,column:3}},"20":{start:{line:165,column:0},end:{line:171,column:37}},"21":{start:{line:172,column:0},end:{line:177,column:3}},"22":{start:{line:178,column:0},end:{line:184,column:3}},"23":{start:{line:185,column:0},end:{line:190,column:3}},"24":{start:{line:191,column:0},end:{line:196,column:39}},"25":{start:{line:198,column:0},end:{line:204,column:32}},"26":{start:{line:205,column:0},end:{line:211,column:3}},"27":{start:{line:212,column:0},end:{line:212,column:73}},"28":{start:{line:213,column:0},end:{line:213,column:69}},"29":{start:{line:214,column:0},end:{line:214,column:69}},"30":{start:{line:215,column:0},end:{line:215,column:79}},"31":{start:{line:216,column:0},end:{line:216,column:75}},"32":{start:{line:217,column:0},end:{line:217,column:51}},"33":{start:{line:218,column:0},end:{line:218,column:49}},"34":{start:{line:219,column:0},end:{line:219,column:36}},"35":{start:{line:225,column:0},end:{line:225,column:72}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_kua2qjnr6.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const gitHubContext_1=(cov_kua2qjnr6.s[1]++,require("../gitHubContext"));const Goal_1=(cov_kua2qjnr6.s[2]++,require("../Goal"));const Goals_1=(cov_kua2qjnr6.s[3]++,require("../Goals"));cov_kua2qjnr6.s[4]++;exports.FingerprintGoal=new Goal_1.Goal({uniqueName:"Fingerprint",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"0.1-fingerprint",completedDescription:"Fingerprinted"});cov_kua2qjnr6.s[5]++;exports.AutofixGoal=new Goal_1.Goal({uniqueName:"Autofix",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"0.2-autofix",workingDescription:"Running autofixes...",completedDescription:"Autofixed",failedDescription:"Fixes made: Don't proceed"});cov_kua2qjnr6.s[6]++;exports.ReviewGoal=new Goal_1.Goal({uniqueName:"Review",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-review",workingDescription:"Running code reviews...",completedDescription:"Code review passed",waitingForApprovalDescription:"Manual approval needed"});/**
 * Goal that runs PushReactionRegistrations
 * @type {Goal}
 */cov_kua2qjnr6.s[7]++;exports.PushReactionGoal=new Goal_1.Goal({uniqueName:"CodeReaction",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1.5-react",workingDescription:"Running code reactions...",completedDescription:"Code reactions passed"});cov_kua2qjnr6.s[8]++;exports.VersionGoal=new Goal_1.Goal({uniqueName:"Version",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"0.1-version",workingDescription:"Calculating project version...",completedDescription:"Versioned"});/**
 * Just build, without any checks
 * @type {Goal}
 */cov_kua2qjnr6.s[9]++;exports.JustBuildGoal=new Goal_1.Goal({uniqueName:"JustBuild",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2-just-build ",displayName:"build",workingDescription:"Building...",completedDescription:"Build successful",failedDescription:"Build failed"});cov_kua2qjnr6.s[10]++;exports.BuildGoal=new Goal_1.GoalWithPrecondition({uniqueName:"Build",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2-build",displayName:"build",workingDescription:"Building...",completedDescription:"Build successful",failedDescription:"Build failed",isolated:true},exports.AutofixGoal);cov_kua2qjnr6.s[11]++;exports.DockerBuildGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DockerBuild",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"3-docker",displayName:"docker build",workingDescription:"Running Docker build...",completedDescription:"Docker build successful",failedDescription:"Failed to build Docker image",isolated:true},exports.BuildGoal);cov_kua2qjnr6.s[12]++;exports.TagGoal=new Goal_1.GoalWithPrecondition({uniqueName:"Tag",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"4-tag",displayName:"tag",workingDescription:"Tagging...",completedDescription:"Tagged",failedDescription:"Failed to create Tag"},exports.DockerBuildGoal,exports.BuildGoal);// This one is actually satisfied in an ImageLinked event,
// which happens to be a result of the build.
cov_kua2qjnr6.s[13]++;exports.ArtifactGoal=new Goal_1.GoalWithPrecondition({uniqueName:"Artifact",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2.5-artifact",displayName:"store artifact",completedDescription:"Stored artifact"},exports.BuildGoal);cov_kua2qjnr6.s[14]++;exports.StagingDeploymentGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DeployToTest",environment:gitHubContext_1.StagingEnvironment,orderedName:"3-deploy",displayName:"deploy to Test",completedDescription:"Deployed to Test",failedDescription:"Test deployment failure"},exports.ArtifactGoal);cov_kua2qjnr6.s[15]++;exports.StagingUndeploymentGoal=new Goal_1.Goal({uniqueName:"UndeployFromTest",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"2-staging-undeploy",displayName:"undeploy from test",completedDescription:"not deployed in test"});// this one won't be set up to trigger on its precondition;
// rather, the deploy goal also sets this one, currently.
// Setting the precondition lets FailDownstream know that this
// one is never gonna succeed if the deploy failed.
cov_kua2qjnr6.s[16]++;exports.StagingEndpointGoal=new Goal_1.GoalWithPrecondition({uniqueName:"FindTestEndpoint",environment:gitHubContext_1.StagingEnvironment,orderedName:"4-endpoint",displayName:"locate service endpoint in Test",completedDescription:"Here is the service endpoint in Test",failedDescription:"Couldn't locate service endpoint in Test"},exports.StagingDeploymentGoal);cov_kua2qjnr6.s[17]++;exports.StagingVerifiedGoal=new Goal_1.GoalWithPrecondition({uniqueName:"VerifyTest",environment:gitHubContext_1.StagingEnvironment,orderedName:"5-verifyEndpoint",displayName:"verify Test deployment",completedDescription:"Verified endpoint in Test",waitingForApprovalDescription:"Test endpoint verified! Approve for production deploy."},exports.StagingEndpointGoal);cov_kua2qjnr6.s[18]++;exports.ProductionDeploymentGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DeployToProduction",environment:gitHubContext_1.ProductionEnvironment,orderedName:"3-prod-deploy",displayName:"deploy to Prod",completedDescription:"Deployed to Prod"},exports.ArtifactGoal,exports.StagingVerifiedGoal);cov_kua2qjnr6.s[19]++;exports.ProductionUndeploymentGoal=new Goal_1.Goal({uniqueName:"UndeployFromProduction",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"3-prod-undeploy",displayName:"undeploy from Prod",completedDescription:"not deployed in Prod"});// this one won't be set up to trigger on its precondition;
// rather, the deploy goal also sets this one, currently.
// Setting the precondition lets FailDownstream know that this
// one is never gonna succeed if the deploy failed.
cov_kua2qjnr6.s[20]++;exports.ProductionEndpointGoal=new Goal_1.GoalWithPrecondition({uniqueName:"FindProductionEndpoint",environment:gitHubContext_1.ProductionEnvironment,orderedName:"4-endpoint",displayName:"locate service endpoint in Prod",completedDescription:"Here is the service endpoint in Prod"},exports.ProductionDeploymentGoal);cov_kua2qjnr6.s[21]++;exports.LocalDeploymentGoal=new Goal_1.Goal({uniqueName:"DeployHere",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-deploy-locally",completedDescription:"Deployed locally"});cov_kua2qjnr6.s[22]++;exports.LocalUndeploymentGoal=new Goal_1.Goal({uniqueName:"UndeployHere",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"1-undeploy-locally",failedDescription:"Failed at local undeploy",completedDescription:"not deployed locally"});cov_kua2qjnr6.s[23]++;exports.DeleteRepositoryGoal=new Goal_1.Goal({uniqueName:"DeleteRepository",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"8-delete-repo",completedDescription:"Offered to delete repository"});cov_kua2qjnr6.s[24]++;exports.DeleteAfterUndeploysGoal=new Goal_1.GoalWithPrecondition({uniqueName:"DeleteRepositoryAfterUndeployed",environment:gitHubContext_1.ProjectDisposalEnvironment,orderedName:"8-delete-repo",completedDescription:"Repository deleted"},exports.ProductionUndeploymentGoal);// not an enforced precondition, but it's real enough to graph
cov_kua2qjnr6.s[25]++;exports.LocalEndpointGoal=new Goal_1.GoalWithPrecondition({uniqueName:"FindLocalEndpoint",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"2-endpoint",displayName:"locate local service endpoint",completedDescription:"Here is the local service endpoint"},exports.LocalDeploymentGoal);cov_kua2qjnr6.s[26]++;exports.NoGoal=new Goal_1.Goal({uniqueName:"Nevermind",environment:gitHubContext_1.IndependentOfEnvironment,orderedName:"1-immaterial",displayName:"immaterial",completedDescription:"No material changes"});cov_kua2qjnr6.s[27]++;exports.StagingDeploymentContext=exports.StagingDeploymentGoal.context;cov_kua2qjnr6.s[28]++;exports.StagingEndpointContext=exports.StagingEndpointGoal.context;cov_kua2qjnr6.s[29]++;exports.StagingVerifiedContext=exports.StagingVerifiedGoal.context;cov_kua2qjnr6.s[30]++;exports.ProductionDeploymentContext=exports.ProductionDeploymentGoal.context;cov_kua2qjnr6.s[31]++;exports.ProductionEndpointContext=exports.ProductionEndpointGoal.context;cov_kua2qjnr6.s[32]++;exports.ReviewContext=exports.ReviewGoal.context;cov_kua2qjnr6.s[33]++;exports.BuildContext=exports.BuildGoal.context;cov_kua2qjnr6.s[34]++;exports.ProductionMauve="#cf5097";/**
 * Special Goals object to be returned if changes are immaterial.
 * The identity of this object is important.
 * @type {Goals}
 */cov_kua2qjnr6.s[35]++;exports.NoGoals=new Goals_1.Goals("No action needed",exports.NoGoal);//# sourceMappingURL=data:application/json;charset=utf-8;base64,