{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/commonPushTests.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/pushtest/commonPushTests.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,8FAA6F;AAC7F,uFAAkF;AAClF,uDAA4D;AAC5D,6CAA0F;AAE7E,QAAA,eAAe,GAAa,mBAAQ,CAAC,wBAAwB,EAAE,CAAM,CAAC,EAAC,EAAE;IAClF,OAAA,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa;QAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAA;EAAA,CAAC,CAAC;AAE5G;;;;;;GAMG;AACU,QAAA,WAAW,GAAa,mBAAQ,CAAC,mBAAmB,EAAE,CAAM,CAAC,EAAC,EAAE,gDACzE,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA,GAAA,CAAC,CAAC;AAEhD;;;;GAIG;AACU,QAAA,OAAO,GAAa,mBAAQ,CAAC,UAAU,EAAE,CAAM,CAAC,EAAC,EAAE,gDAAC,OAAA,IAAI,CAAA,GAAA,CAAC,CAAC;AAEvE;;;;;GAKG;AACU,QAAA,YAAY,GAAa,mBAAQ,CAAC,gBAAgB,EAAE,CAAM,CAAC,EAAC,EAAE;AACvE,mFAAmF;AACnF,OAAA,+BAAe,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,mBAAY,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAA,GAAA,CAC7D,CAAC;AAEF;;;;GAIG;AACH,iBAAwB,IAAY;IAChC,OAAO,4BAAiB,CAAC,WAAW,IAAI,IAAI,EACxC,CAAM,CAAC,EAAC,EAAE,gDAAC,OAAA,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA,GAAA,CAAC,CAAC;AAC9C,CAAC;AAHD,0BAGC;AAED;;;;;GAKG;AACH,2BAAkC,IAAY,EAAE,OAAe;IAC3D,OAAO,4BAAiB,CAAC,WAAW,IAAI,gBAAgB,OAAO,CAAC,MAAM,GAAG,EACrE,CAAM,CAAC,EAAC,EAAE;QACN,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,CAAC,EAAE;YACJ,OAAO,KAAK,CAAC;SAChB;QACD,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACrC,OAAO,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,CAAA,CAAC,CAAC;AACX,CAAC;AAVD,8CAUC;AAED;;;;GAIG;AACH,8BAAqC,SAAiB;IAClD,OAAO,4BAAiB,CAAC,wBAAwB,SAAS,IAAI,EAC1D,CAAM,CAAC,EAAC,EAAE,gDAAC,OAAA,yBAAU,CAAC,CAAC,EAAE,QAAQ,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA,GAAA,CAAC,CAAC;AACnE,CAAC;AAHD,oDAGC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isGitHubRepoRef } from \"@atomist/automation-client/operations/common/GitHubRepoRef\";\nimport { fileExists } from \"@atomist/automation-client/project/util/projectUtils\";\nimport { isPublicRepo } from \"../../../../util/github/ghub\";\nimport { PredicatePushTest, predicatePushTest, PushTest, pushTest } from \"../../PushTest\";\n\nexport const ToDefaultBranch: PushTest = pushTest(\"Push to default branch\", async p =>\n    p.push.branch === p.push.repo.defaultBranch ||\n    ((!p.push.repo.defaultBranch || p.push.repo.defaultBranch.length === 0) && p.push.branch === \"master\"));\n\n/**\n * Is this a push originated by Atomist? Note that we can't look at the committer,\n * as if a user invoked a command handler, their credentials will be used\n * @param {PushListenerInvocation} p\n * @return {boolean}\n * @constructor\n */\nexport const FromAtomist: PushTest = pushTest(\"Push from Atomist\", async p =>\n    p.push.after.message.includes(\"[atomist]\"));\n\n/**\n * Match on any push\n * @param {PushListenerInvocation} p\n * @constructor\n */\nexport const AnyPush: PushTest = pushTest(\"Any push\", async p => true);\n\n/**\n * Match only pushes on a public repo\n * @param {PushListenerInvocation} p\n * @return {Promise<boolean>}\n * @constructor\n */\nexport const ToPublicRepo: PushTest = pushTest(\"To public repo\", async p =>\n    // Ask GitHub if the repo is public as we do not have this information in our model\n    isGitHubRepoRef(p.id) && isPublicRepo(p.credentials, p.id),\n);\n\n/**\n * Return a PushTest testing for the existence of the given file\n * @param {string} path\n * @return {PushTest}\n */\nexport function hasFile(path: string): PredicatePushTest {\n    return predicatePushTest(`HasFile(${path}})`,\n        async p => !!(await p.getFile(path)));\n}\n\n/**\n * Return a PushTest testing for the existence of the given file containing the pattern\n * @param {string} path\n * @param pattern regex to look for\n * @return {PushTest}\n */\nexport function hasFileContaining(path: string, pattern: RegExp): PredicatePushTest {\n    return predicatePushTest(`HasFile(${path}} containing ${pattern.source})`,\n        async p => {\n            const f = await p.getFile(path);\n            if (!f) {\n                return false;\n            }\n            const content = await f.getContent();\n            return pattern.test(content);\n        });\n}\n\n/**\n * Is there at least one file with the given extension?\n * @param {string} extension\n * @return {PredicatePushTest}\n */\nexport function hasFileWithExtension(extension: string): PredicatePushTest {\n    return predicatePushTest(`HasFileWithExtension(${extension}})`,\n        async p => fileExists(p, `**/*.${extension}`, () => true));\n}\n"]}