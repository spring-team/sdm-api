{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/decisionTree.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/blueprint/dsl/decisionTree.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAIH,uEAAoE;AACpE,wFAAoF;AAEpF;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,eAAyB,GAAG,cAA0B;IAClD,OAAO,IAAI,WAAW,CAAI,cAAc,CAAC,CAAC;AAC9C,CAAC;AAFD,sBAEC;AAED;IAEI,YAA6B,cAA0B;QAA1B,mBAAc,GAAd,cAAc,CAAY;IAAG,CAAC;IAE3D;;;;;OAKG;IACI,IAAI,CAAC,CAAmB;QAC3B,CAAC,CAAC,IAAI,CAAC,CAAC;QACR,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO,CAAC,IAAY;QACvB,MAAM,aAAa,GAAG,4BAAY,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;QAC3D,OAAO,IAAI,SAAS,CAAI,aAAa,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;CACJ;AAnBD,kCAmBC;AAED;;GAEG;AACH;IAEI,YAA6B,aAAuB,EAAmB,IAAY;QAAtD,kBAAa,GAAb,aAAa,CAAU;QAAmB,SAAI,GAAJ,IAAI,CAAQ;IAAG,CAAC;IAEvF;;;;;OAKG;IACI,OAAO,CAAC,CAAmB;QAC9B,CAAC,CAAC,IAAI,CAAC,CAAC;QACR,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,KAAQ;QACf,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,GAAS,EAAE,gDAAC,OAAA,KAAK,CAAA,GAAA;SAC7B,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAC,GAAG,YAAmC;QAC9C,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAI,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACxD,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,CAAM,GAAG,EAAC,EAAE;gBACjB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACvD,OAAO,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACrD,CAAC,CAAA;SACJ,CAAC;IACN,CAAC;CACJ;AA3CD,8BA2CC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PushMapping } from \"../../common/listener/PushMapping\";\nimport { PushTest } from \"../../common/listener/PushTest\";\nimport { PushRules } from \"../../common/listener/support/PushRules\";\nimport { allSatisfied } from \"../../common/listener/support/pushtest/pushTestUtils\";\n\n/**\n * Simple DSL to create a decision tree.\n * Trees and subtrees can compute variables as interim values for future use.\n * Example usage, showing computed state:\n *\n * ```\n * let count = 0;  // Initialize a counter we'll use later\n * const pm: PushMapping<Goals> = given<Goals>(TruePushTest, ...) // Use any push tests\n *    .init(() => count = 0) // Init to set state\n *    .itMeans(\"no frogs coming\")\n *    .then(\n *        given<Goals>(TruePushTest, ...).itMeans(\"case1\")\n *           .compute(() => count++)   // Increment the counter for this branch\n *           .then(\n *              // Compute terminal rules\n *              whenPushSatisfies(count > 0, FalsePushTest).itMeans(\"nope\").setGoals(NoGoals),\n *              whenPushSatisfies(TruePushTest).itMeans(\"yes\").setGoals(HttpServiceGoals),\n *           ),\n *       );\n * ```\n * @param givenPushTests PushTests\n * @return interim DSL structure\n */\nexport function given<V>(...givenPushTests: PushTest[]) {\n    return new TreeContext<V>(givenPushTests);\n}\n\nexport class TreeContext<V> {\n\n    constructor(private readonly givenPushTests: PushTest[]) {}\n\n    /**\n     * Perform any computation necessary to initialize this branch:\n     * for example, setting variables in scope\n     * @param {(t: this) => any} f\n     * @return {any}\n     */\n    public init(f: (t: this) => any): any {\n        f(this);\n        return this;\n    }\n\n    public itMeans(name: string): GivenTree<V> {\n        const givenPushTest = allSatisfied(...this.givenPushTests);\n        return new GivenTree<V>(givenPushTest, name);\n    }\n}\n\n/**\n * Tree. Can compute variables\n */\nexport class GivenTree<V> {\n\n    constructor(private readonly givenPushTest: PushTest, private readonly name: string) {}\n\n    /**\n     * Perform computation before continuing.\n     * Typically used to set values that will be used in predicate expressions.\n     * @param {(t: this) => any} f\n     * @return {any}\n     */\n    public compute(f: (t: this) => any): any {\n        f(this);\n        return this;\n    }\n\n    /**\n     * Set the resolution value of this tree\n     * @param {V} value\n     * @return {PushMapping<V>}\n     */\n    public set(value: V): PushMapping<V> {\n        return {\n            name: this.name,\n            mapping: async () => value,\n        };\n    }\n\n    /**\n     * Enter a subtree of a number of mappings. Can be use\n     * to nest trees to arbitrary depth.\n     * @param {PushMapping<V>} pushMappings\n     * @return {PushMapping<V>}\n     */\n    public then(...pushMappings: Array<PushMapping<V>>): PushMapping<V> {\n        const rules = new PushRules<V>(this.name, pushMappings);\n        return {\n            name: this.name,\n            mapping: async pli => {\n                const eligible = await this.givenPushTest.mapping(pli);\n                return eligible ? rules.mapping(pli) : undefined;\n            },\n        };\n    }\n}\n"]}