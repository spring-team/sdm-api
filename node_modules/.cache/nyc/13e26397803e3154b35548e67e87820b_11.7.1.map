{"version":3,"file":"/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PushRules.ts","sources":["/Users/rodjohnson/sforzando-dev/idea-projects/my-flow/src/common/listener/support/PushRules.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;AAEH,kEAAoD;AAIpD;;GAEG;AACH;IAII;;;;;;OAMG;IACH,YAA4B,IAAY,EAAE,UAAiC,EAAE;QAAjD,SAAI,GAAJ,IAAI,CAAQ;QATjC,YAAO,GAA0B,EAAE,CAAC;QAUvC,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACtD;QACD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,SAAyC;QACnD,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAClE,CAAC;IAEM,GAAG,CAAC,KAA4B;QACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAEY,YAAY,CAAC,EAA0B;;YAChD,MAAM,OAAO,GAAQ,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO;iBAC9C,GAAG,CAAC,CAAM,EAAE,EAAC,EAAE;gBACZ,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBACxC,0BAAM,CAAC,KAAK,CAAC,+CAA+C,EAAE,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC9E,OAAO,KAAK,CAAC;YACjB,CAAC,CAAA,CAAC,CAAC,CAAC;YACR,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,WAAW,GAAG,CAAC,CAAC,IAAI,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtE,SAAS,CAAC,CAAC;gBACX,OAAO,CAAC;YAEZ,0BAAM,CAAC,IAAI,CAAC,4CAA4C,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACnF,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;CACJ;AA/CD,8BA+CC","sourcesContent":["/*\n * Copyright Â© 2018 Atomist, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logger } from \"@atomist/automation-client\";\nimport { PushListenerInvocation } from \"../PushListener\";\nimport { PushMapping } from \"../PushMapping\";\n\n/**\n * Use to execute a rule set for any push to resolve to an object.\n */\nexport class PushRules<V> implements PushMapping<V> {\n\n    public choices: Array<PushMapping<V>> = [];\n\n    /**\n     * Return all possible values\n     * @param {string} name\n     * @param {Array<PushMapping<V>>} choices Array of choices.\n     * Passing an empty array will result in an instance that always maps to undefined,\n     * and is not an error.\n     */\n    constructor(public readonly name: string, choices: Array<PushMapping<V>> = []) {\n        if (!name) {\n            throw new Error(\"PushRule name must be specified\");\n        }\n        this.add(choices);\n    }\n\n    /**\n     * Return a PushRules with a subset of the rules of this one\n     * @param {(p: PushMapping<V>) => boolean} predicate\n     * @return {PushRules<V>}\n     */\n    public filter(predicate: (p: PushMapping<V>) => boolean): PushRules<V> {\n        return new PushRules(\"name-\", this.choices.filter(predicate));\n    }\n\n    public add(rules: Array<PushMapping<V>>) {\n        this.choices = this.choices.concat(rules);\n    }\n\n    public async valueForPush(pi: PushListenerInvocation): Promise<V> {\n        const results: V[] = await Promise.all(this.choices\n            .map(async pc => {\n                const found = await pc.valueForPush(pi);\n                logger.debug(\"Eligible PushRule named %s returned choice %j\", pc.name, found);\n                return found;\n            }));\n        const nonNull = results.find(p => !!p);\n        const indexOfNull = results.indexOf(null);\n        const value = indexOfNull > -1 && indexOfNull < results.indexOf(nonNull) ?\n            undefined :\n            nonNull;\n\n        logger.info(\"PushRules [%s]: Value for push on %j is %j\", this.name, pi.id, value);\n        return value;\n    }\n}\n"]}