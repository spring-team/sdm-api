"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const TreeNode_1 = require("../TreeNode");
const visitor_1 = require("../visitor");
/**
 * Define properties allowing navigation down the tree.
 * Terminal properties have their value directly exposed.
 * There are 2 properties for non-terminals: scalar, and array with a following "s"
 * @param {TreeNode} root
 */
function defineDynamicProperties(root) {
    const propertyAdder = (n) => {
        (n.$children || []).forEach(kid => {
            addChildProperty(n, kid.$name, kid);
        });
        return true;
    };
    visitor_1.visit(root, propertyAdder);
}
exports.defineDynamicProperties = defineDynamicProperties;
function addChildProperty(n, key, value) {
    const valueToUse = TreeNode_1.isTerminal(value) ? value.$value : value;
    if (!n[pluralName(key)]) {
        n[pluralName(key)] = [];
    }
    n[pluralName(key)].push(valueToUse);
    // logger.debug("Adding property %s to node name %s", key, n.$name);
    if (!n[key]) {
        Object.defineProperty(n, key, {
            get() {
                return valueToUse;
            },
        });
    }
}
function pluralName(key) {
    return key + "s";
}
/**
 * Fill in the values of non-terminals in this tree, using the last terminal found underneath it
 * @param {TreeNode} root
 * @param {string} content
 */
function fillInEmptyNonTerminalValues(root, content) {
    const valueFiller = (n) => {
        if (!n.$value && n.$children) {
            const lt = lastTerminal(n);
            if (lt) {
                const lastIndex = lt.$offset + lt.$value.length;
                const value = content.substr(n.$offset, lastIndex - n.$offset);
                // console.log(`Setting value on ${n.$name} to [${value}]`);
                n.$value = value;
            }
        }
        return true;
    };
    visitor_1.visit(root, valueFiller);
}
exports.fillInEmptyNonTerminalValues = fillInEmptyNonTerminalValues;
/**
 * Find the last terminal under this node
 * @param {TreeNode} tn
 * @return {TreeNode}
 */
function lastTerminal(tn) {
    if (!tn.$children || tn.$children.length === 0) {
        return undefined;
    }
    const last = _.last(tn.$children);
    return TreeNode_1.isTerminal(last) ?
        last :
        lastTerminal(last);
}
exports.lastTerminal = lastTerminal;
//# sourceMappingURL=enrichment.js.map