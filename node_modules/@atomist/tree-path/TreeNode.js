"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isTerminal(tn) {
    return tn.$value && !(tn.$children && tn.$children.length > 0);
}
exports.isTerminal = isTerminal;
/**
 * Replacer to safely stringify nodes, avoiding circularity errors
 * @params keep: Property names to include. Allows us to include
 * node-specific data. By default includes all array elements and
 * name, children, value and offset.
 * @constructor
 */
function treeNodeReplacer(...keep) {
    return (key, value) => {
        if (key.match(/[0-9]+/) || ["", "$name", "$children", "$value", "$offset"].concat(keep).includes(key)) {
            return value;
        }
        return undefined;
    };
}
exports.treeNodeReplacer = treeNodeReplacer;
/**
 * Default replacer to use to safely stringify tree nodes
 * @type {(key: string, value: any) => any}
 */
exports.DefaultTreeNodeReplacer = treeNodeReplacer();
//# sourceMappingURL=TreeNode.js.map