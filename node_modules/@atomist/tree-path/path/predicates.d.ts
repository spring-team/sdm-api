import { TreeNode } from "../TreeNode";
import { ExpressionEngine } from "./expressionEngine";
import { PathExpression, Predicate } from "./pathExpression";
export declare class AttributeEqualityPredicate implements Predicate {
    readonly name: string;
    readonly value: string;
    constructor(name: string, value: string);
    evaluate(nodeToTest: TreeNode): boolean;
    toString(): string;
}
/**
 * Position within results. Indexing starts from 1
 */
export declare class PositionPredicate implements Predicate {
    readonly index: number;
    constructor(index: number);
    evaluate(nodeToTest: TreeNode, returnedNodes: TreeNode[]): boolean;
    toString(): string;
}
export declare class NestedPathExpressionPredicate implements Predicate {
    pathExpression: PathExpression;
    constructor(pathExpression: PathExpression);
    evaluate(nodeToTest: TreeNode, returnedNodes: TreeNode[], ee: ExpressionEngine, functionRegistry: object): boolean;
    toString(): string;
}
export declare class OrPredicate implements Predicate {
    readonly a: Predicate;
    readonly b: Predicate;
    constructor(a: Predicate, b: Predicate);
    evaluate(nodeToTest: TreeNode, returnedNodes: TreeNode[], ee: ExpressionEngine, functionRegistry: object): boolean;
    toString(): string;
}
