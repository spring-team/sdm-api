"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const treeUtils_1 = require("../internal/treeUtils");
exports.ChildAxisSpecifier = {
    type: "child",
    follow(tn) {
        return tn.$children || [];
    },
};
exports.DescendantAxisSpecifier = {
    type: "descendant",
    follow(tn) {
        return allDescendants(tn);
    },
};
exports.DescendantOrSelfAxisSpecifier = {
    type: "descendant-or-self",
    follow(tn) {
        return allDescendants(tn).concat(tn);
    },
};
exports.SelfAxisSpecifier = {
    type: "self",
    follow(tn) {
        return [tn];
    },
};
function allDescendants(tn) {
    if (!tn.$children) {
        return [];
    }
    return (tn.$children || []).concat(_.flatMap(tn.$children.map(allDescendants)));
}
exports.allDescendants = allDescendants;
exports.AncestorAxisSpecifier = {
    type: "ancestor",
    follow(tn, root) {
        const ancestorsAndThis = treeUtils_1.pathDownTo(tn, root);
        return !!ancestorsAndThis ? _.dropRight(ancestorsAndThis, 1) : [];
    },
};
exports.AncestorOrSelfAxisSpecifier = {
    type: "ancestor-or-self",
    follow(tn, root) {
        const ancestorsAndThis = treeUtils_1.pathDownTo(tn, root);
        return !!ancestorsAndThis ? ancestorsAndThis : [];
    },
};
exports.ParentAxisSpecifier = {
    type: "parent",
    follow(tn, root) {
        const parent = treeUtils_1.parentOf(tn, root);
        return !!parent ? [parent] : [];
    },
};
exports.FollowingSiblingAxisSpecifier = {
    type: "following-sibling",
    follow(tn, root) {
        const parent = treeUtils_1.parentOf(tn, root);
        if (!parent) {
            return [];
        }
        const kids = parent.$children;
        const index = kids.indexOf(tn);
        return (index >= 0 && kids.length > index + 1) ?
            [kids[index + 1]] :
            [];
    },
};
exports.PrecedingSiblingAxisSpecifier = {
    type: "preceding-sibling",
    follow(tn, root) {
        const parent = treeUtils_1.parentOf(tn, root);
        if (!parent) {
            return [];
        }
        const kids = parent.$children;
        const index = kids.indexOf(tn);
        return (index > 0) ?
            [kids[index - 1]] :
            [];
    },
};
//# sourceMappingURL=axisSpecifiers.js.map