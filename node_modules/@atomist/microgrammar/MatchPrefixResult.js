"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MatchFailureReport = /** @class */ (function () {
    function MatchFailureReport($matcherId, $offset, capturedStructure, cause) {
        this.$matcherId = $matcherId;
        this.$offset = $offset;
        this.cause = cause;
    }
    Object.defineProperty(MatchFailureReport.prototype, "description", {
        get: function () {
            return "Match failed on " + this.$matcherId + ": " + this.cause;
        },
        enumerable: true,
        configurable: true
    });
    return MatchFailureReport;
}());
exports.MatchFailureReport = MatchFailureReport;
/**
 * Holds a PatternMatch in the event of success.
 * If this contains a context, then the parent matcher can use that to populate its own;
 * otherwise, it can use the value of the match
 */
var SuccessfulMatch = /** @class */ (function () {
    function SuccessfulMatch(match, capturedStructure) {
        this.match = match;
        this.capturedStructure = capturedStructure;
        if (match === undefined) {
            throw new Error("You can't be successful with an undefined match");
        }
    }
    Object.defineProperty(SuccessfulMatch.prototype, "$offset", {
        get: function () { return this.match.$offset; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuccessfulMatch.prototype, "$matcherId", {
        get: function () { return this.match.$matcherId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuccessfulMatch.prototype, "$matched", {
        get: function () {
            return this.match.$matched;
        } // convenience
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuccessfulMatch.prototype, "$value", {
        get: function () { return this.match.$value; } // convenience
        ,
        enumerable: true,
        configurable: true
    });
    return SuccessfulMatch;
}());
exports.SuccessfulMatch = SuccessfulMatch;
function matchPrefixSuccess(match, context) {
    return new SuccessfulMatch(match, context);
}
exports.matchPrefixSuccess = matchPrefixSuccess;
function isSuccessfulMatch(mpr) {
    return mpr && mpr.match !== undefined;
}
exports.isSuccessfulMatch = isSuccessfulMatch;
//# sourceMappingURL=MatchPrefixResult.js.map