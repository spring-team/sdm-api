import { InputStateListener } from "../InputState";
/**
 * Superclass for InputStateListener implementations that consume a single character at a time.
 * Stateful.
 */
export declare abstract class CharwiseInputStateListener implements InputStateListener {
    read(s: string): this;
    abstract clone(): InputStateListener;
    /**
     * Consume this input character, updating state as necessar
     * @param char character to consume.
     */
    abstract consume(char: string): void;
}
/**
 * Convenient superclass for InputStateListeners that are state machines
 */
export declare abstract class AbstractStateMachine<S> extends CharwiseInputStateListener {
    state: S;
    protected constructor(state: S);
    abstract clone(): InputStateListener;
    abstract consume(char: string): void;
}
