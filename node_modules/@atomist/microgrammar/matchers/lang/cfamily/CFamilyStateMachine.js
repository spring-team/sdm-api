"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LangStateMachine_1 = require("../LangStateMachine");
var States_1 = require("./States");
/**
 * State machine for recognizing C family strings and comments.
 * Directly usable for Java, C and C++
 */
var CFamilyStateMachine = /** @class */ (function (_super) {
    __extends(CFamilyStateMachine, _super);
    function CFamilyStateMachine(state) {
        if (state === void 0) { state = States_1.Normal; }
        return _super.call(this, state) || this;
    }
    CFamilyStateMachine.prototype.clone = function () {
        return new CFamilyStateMachine(this.state);
    };
    CFamilyStateMachine.prototype.consume = function (ch) {
        this.previousState = this.state;
        switch (this.state) {
            case States_1.SlashSlashComment:
                if (ch === "\n") {
                    this.state = States_1.Normal;
                }
                break;
            case States_1.SlashStarComment:
                if (ch === "/" && this.previousChar === "*") {
                    this.state = States_1.Normal;
                }
                break;
            case States_1.Normal:
                switch (ch) {
                    case '"':
                        this.state = States_1.DoubleString;
                        break;
                    case "/":
                        if (this.previousChar === "/") {
                            this.state = States_1.SlashSlashComment;
                        }
                        break;
                    case "*":
                        if (this.previousChar === "/") {
                            this.state = States_1.SlashStarComment;
                        }
                        break;
                    default:
                }
                break;
            case States_1.DoubleString:
                if (ch === '"' && this.previousChar !== "\\") {
                    this.state = States_1.Normal;
                }
                break;
        }
        this.previousChar = ch;
    };
    return CFamilyStateMachine;
}(LangStateMachine_1.LangStateMachine));
exports.CFamilyStateMachine = CFamilyStateMachine;
//# sourceMappingURL=CFamilyStateMachine.js.map