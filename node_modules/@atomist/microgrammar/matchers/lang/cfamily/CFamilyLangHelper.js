"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CFamilyStateMachine_1 = require("./CFamilyStateMachine");
var States_1 = require("./States");
var CFamilyLangHelper = /** @class */ (function () {
    function CFamilyLangHelper() {
    }
    /**
     * Strip C/C++ comments
     * @param source
     */
    CFamilyLangHelper.prototype.stripComments = function (source) {
        var stripped = "";
        var sm = new CFamilyStateMachine_1.CFamilyStateMachine();
        for (var _i = 0, source_1 = source; _i < source_1.length; _i++) {
            var ch = source_1[_i];
            sm.consume(ch);
            switch (sm.state) {
                case States_1.SlashStarComment:
                case States_1.SlashSlashComment:
                    if (sm.state !== sm.previousState) {
                        // Get rid of the first /, which was written to the string
                        stripped = stripped.substring(0, stripped.length - 1);
                    }
                    break;
                case States_1.Normal:
                    if (!(ch === "/" && sm.previousState.comment)) {
                        stripped += ch;
                    }
                    break;
                default:
                    stripped += ch;
            }
        }
        return stripped;
    };
    CFamilyLangHelper.prototype.stripWhitespace = function (source) {
        var stripped = "";
        var chunk = "";
        var sm = new CFamilyStateMachine_1.CFamilyStateMachine();
        for (var _i = 0, source_2 = source; _i < source_2.length; _i++) {
            var s = source_2[_i];
            sm.consume(s);
            switch (sm.state) {
                case States_1.DoubleString:
                    // If we've just entered a string, add the stripped chunk that preceded it
                    if (sm.previousState !== States_1.DoubleString) {
                        stripped += this.strip(chunk);
                        chunk = "";
                    }
                    // Take all characters from string without stripping whitespace
                    stripped += s;
                    break;
                default:
                    // Add to a chunk that we'll later strip
                    chunk += s;
            }
        }
        stripped += this.strip(chunk);
        return stripped;
    };
    CFamilyLangHelper.prototype.canonicalize = function (src) {
        return this.stripWhitespace(this.stripComments(src));
    };
    CFamilyLangHelper.prototype.strip = function (src) {
        var stripped = src.replace(/[\s]+/g, " ");
        // Get rid of syntactically unnecessary whitespace
        stripped = stripped.replace(/([{}.@;])\s/g, "$1");
        stripped = stripped.replace(/\s([{}.@;])/g, "$1");
        stripped = stripped.trim();
        return stripped;
    };
    return CFamilyLangHelper;
}());
exports.CFamilyLangHelper = CFamilyLangHelper;
//# sourceMappingURL=CFamilyLangHelper.js.map