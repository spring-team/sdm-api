"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractStateMachine_1 = require("../../../support/AbstractStateMachine");
var CFamilyStateMachine_1 = require("./CFamilyStateMachine");
var States_1 = require("./States");
/**
 * Track depth of curlies and parentheses in C family languages
 */
var NestingDepthStateMachine = /** @class */ (function (_super) {
    __extends(NestingDepthStateMachine, _super);
    function NestingDepthStateMachine(kind, factory, state, depth) {
        if (kind === void 0) { kind = "block"; }
        if (factory === void 0) { factory = function () { return new CFamilyStateMachine_1.CFamilyStateMachine(); }; }
        if (state === void 0) { state = States_1.Normal; }
        if (depth === void 0) { depth = 0; }
        var _this = _super.call(this, state) || this;
        _this.kind = kind;
        _this.factory = factory;
        _this.depth = depth;
        _this.stateMachine = _this.factory();
        switch (kind) {
            case "block":
                _a = ["{", "}"], _this.push = _a[0], _this.pop = _a[1];
                break;
            case "parens":
                _b = ["(", ")"], _this.push = _b[0], _this.pop = _b[1];
                break;
        }
        return _this;
        var _a, _b;
    }
    NestingDepthStateMachine.prototype.clone = function () {
        return new NestingDepthStateMachine(this.kind, this.factory, this.state, this.depth);
    };
    NestingDepthStateMachine.prototype.consume = function (char) {
        this.stateMachine.consume(char);
        this.state = this.stateMachine.state;
        if (this.state.normal()) {
            switch (char) {
                case this.push:
                    this.depth++;
                    break;
                case this.pop:
                    this.depth--;
                    break;
                default:
            }
        }
    };
    return NestingDepthStateMachine;
}(AbstractStateMachine_1.AbstractStateMachine));
exports.NestingDepthStateMachine = NestingDepthStateMachine;
//# sourceMappingURL=NestingDepthStateMachine.js.map