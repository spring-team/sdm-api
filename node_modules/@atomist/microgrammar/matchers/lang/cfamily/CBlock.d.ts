import { InputState } from "../../../InputState";
import { MatchingLogic } from "../../../Matchers";
import { MatchPrefixResult } from "../../../MatchPrefixResult";
import { Concat } from "../../Concat";
import { LangStateMachine } from "../LangStateMachine";
/**
 * The rest of a C family block, going to a matching depth of +1 curlies or braces.
 * Does not read final curly
 */
export declare class CBlock implements MatchingLogic {
    private stateMachineFactory;
    private kind;
    private inner;
    $id: "C.BlockBody";
    private push;
    private pop;
    constructor(stateMachineFactory: () => LangStateMachine, kind: "block" | "parens", inner?: MatchingLogic);
    matchPrefix(is: InputState, thisMatchContext: any, parseContext: any): MatchPrefixResult;
}
/**
 * Match a block with balanced curlies
 * @type {Term}
 */
export declare function block(stateMachineFactory: () => LangStateMachine): Concat;
export declare function blockContaining(m: Concat, stateMachineFactory?: () => LangStateMachine): Concat;
/**
 * Match a parenthesized expression including ()
 * @type {Concat}
 */
export declare function parenthesizedExpression(stateMachineFactory?: () => LangStateMachine): Concat;
