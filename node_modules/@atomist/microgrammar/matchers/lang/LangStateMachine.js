"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractStateMachine_1 = require("../../support/AbstractStateMachine");
/**
 * Convenient superclass for parsing programming language source
 */
var LangStateMachine = /** @class */ (function (_super) {
    __extends(LangStateMachine, _super);
    function LangStateMachine(state) {
        var _this = _super.call(this, state) || this;
        _this.previousState = state;
        return _this;
    }
    return LangStateMachine;
}(AbstractStateMachine_1.AbstractStateMachine));
exports.LangStateMachine = LangStateMachine;
/**
 * Represents a state in a LangStateMachine
 */
var LangState = /** @class */ (function () {
    /**
     * Create a new state
     * @param name name of the state. Merely informative.
     * @param comment is this a comment state? A language
     * can have multiple kinds of comments, such as /* and // comments
     * @param stringLiteral are we in a string literal?
     * A language can have multiple kinds of string literals, like
     * Scala " and """ strings
     */
    function LangState(name, comment, stringLiteral) {
        this.name = name;
        this.comment = comment;
        this.stringLiteral = stringLiteral;
    }
    LangState.prototype.normal = function () {
        return !(this.comment || this.stringLiteral);
    };
    return LangState;
}());
exports.LangState = LangState;
//# sourceMappingURL=LangStateMachine.js.map