"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MatchPrefixResult_1 = require("../MatchPrefixResult");
var PatternMatch_1 = require("../PatternMatch");
var Concat_1 = require("./Concat");
/**
 * Flatten this match, pulling up its only property with the name given to
 * this matcher.
 * @param o matcher
 * @return {FlatteningMatcher}
 */
function flatten(o) {
    return new FlatteningMatcher(Concat_1.toMatchingLogic(o));
}
exports.flatten = flatten;
var FlatteningMatcher = /** @class */ (function () {
    function FlatteningMatcher(delegate) {
        this.delegate = delegate;
    }
    FlatteningMatcher.prototype.matchPrefix = function (is, thisMatchContext, parseContext) {
        var r = this.delegate.matchPrefix(is, thisMatchContext, parseContext);
        if (MatchPrefixResult_1.isSuccessfulMatch(r)) {
            if (PatternMatch_1.isTreePatternMatch(r.match)) {
                var propNames = Object.getOwnPropertyNames(r.match.submatches());
                if (propNames.length !== 1) {
                    throw new Error("Cannot flatten a structure with more than one property: Found [" + propNames.join(",") + "]");
                }
                var onlyPropertyName = propNames[0];
                var relevantSubMatch = r.match.$valueMatches[onlyPropertyName];
                // TODO how do we update this?
                var match = new PatternMatch_1.TerminalPatternMatch(r.$matcherId, r.$matched, r.$offset, relevantSubMatch.$value);
                return MatchPrefixResult_1.matchPrefixSuccess(match);
            }
            else {
                return r;
            }
        }
        return r;
    };
    return FlatteningMatcher;
}());
//# sourceMappingURL=Functions.js.map