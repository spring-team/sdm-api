import { Concat } from "../matchers/Concat";
import { FromStringOptions } from "../FromStringOptions";
/**
 * Convenient function to create a microgrammar from a spec within another grammar
 * @param spec string spec
 * @param components
 * @param options
 * @returns {Concat}
 */
export declare function fromString(spec: string, components?: object, options?: FromStringOptions): Concat;
/**
 * Parses microgrammars expressed as strings.
 */
export declare class MicrogrammarSpecParser {
    private anonFieldCount;
    fromString(spec: string, components: object, options: FromStringOptions): Concat;
    /**
     * Given a spec, replace all the DiscardToken instances with a named,
     * but unbound, matcher spec
     * @param spec spec to preprocess before parsing
     * @param optionsToUse options
     * @returns {string}
     */
    private preprocess(spec, optionsToUse);
    private definitionSpecsFromMicrogrammarSpec(match, consumeWhiteSpaceBetweenTokens);
    private populateSpecifiedElements(elements, definitionSpecs);
    private inferUnspecifiedElements(definitionSpecs);
    private definitionsFromSpecs(id, definitionSpecs);
    private matcherForLiteral(literal, consumeWhiteSpaceBetweenTokens);
    private addAnonymousToDefinitions(definitions, matcher);
}
