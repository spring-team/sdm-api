"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StringInputStream_1 = require("../spi/StringInputStream");
var DefaultInputState_1 = require("./DefaultInputState");
var InputStateManager_1 = require("./InputStateManager");
/**
 * Return an input state from a string
 * @param s string
 * @param l listeners observing input characters as they are read
 * @param offset default 0. If this is specified it enables us to pretend that we are
 * beginning at a given offset. This allows us to preserve offsets when matching within a match.
 * @returns {InputState}
 */
function inputStateFromString(s, l, offset) {
    if (offset === void 0) { offset = 0; }
    return inputStateFromStream(new StringInputStream_1.StringInputStream(s, offset), l, offset);
}
exports.inputStateFromString = inputStateFromString;
/**
 * Return an input state from a stream
 * @param str input stream
 * @param l listeners observing input characters as they are read
 * @param offset default 0. If this is specified it enables us to pretend that we are
 * beginning at a given offset. This allows us to preserve offsets when matching within a match.
 * @returns {InputState}
 */
function inputStateFromStream(str, l, offset) {
    if (offset === void 0) { offset = 0; }
    return new DefaultInputState_1.DefaultInputState(new InputStateManager_1.InputStateManager(str), offset, l);
}
exports.inputStateFromStream = inputStateFromStream;
//# sourceMappingURL=InputStateFactory.js.map