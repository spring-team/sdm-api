import { PatternMatch } from "./PatternMatch";
/**
 * Result of attempting to match a pattern: MatchFailureReport or SuccessfulMatch.
 */
export interface MatchPrefixResult {
    /**
     * Offset of the match within the input, from 0
     */
    readonly $offset: number;
    /**
     * Id of the matcher that attempted the match
     */
    readonly $matcherId: string;
}
export declare class MatchFailureReport implements MatchPrefixResult {
    readonly $matcherId: string;
    readonly $offset: number;
    private readonly cause;
    constructor($matcherId: string, $offset: number, capturedStructure?: {}, cause?: string | MatchFailureReport);
    readonly description: string;
}
/**
 * Holds a PatternMatch in the event of success.
 * If this contains a context, then the parent matcher can use that to populate its own;
 * otherwise, it can use the value of the match
 */
export declare class SuccessfulMatch implements MatchPrefixResult {
    readonly match: PatternMatch;
    readonly capturedStructure: {};
    constructor(match: PatternMatch, capturedStructure?: {});
    readonly $offset: number;
    readonly $matcherId: string;
    readonly $matched: string;
    readonly $value: any;
}
export declare function matchPrefixSuccess(match: PatternMatch, context?: {}): MatchPrefixResult;
export declare function isSuccessfulMatch(mpr: MatchPrefixResult): mpr is SuccessfulMatch;
