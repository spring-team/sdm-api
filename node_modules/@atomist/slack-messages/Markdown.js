"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
/**
 * Try to handle adjacent HTML and Markdown elements that cannot be
 * adjacent in Slack markup.  Used a the function in replace.
 *
 * @param match the full match
 * @param url the URL
 * @param space trailing space, if it exists
 * @return properly padded replacement string
 */
function trailingSpace(match, url, space, offset, full) {
    var pad = (offset + match.length === full.length) ? "" : " ";
    return (space) ? url + space : url + pad;
}
/**
 * Replace named Markdown links with parenthesized links.
 *
 * @param text string which may have named Markdown links
 * @return string with explicit links
 */
function convertNamedLinks(text) {
    var namedLinksRegExp = /^\[(.+?)\]:\s*(https?:\/\/\S+).*\n/mg;
    var matches;
    var links = {};
    // tslint:disable-next-line:no-conditional-assignment
    while (matches = namedLinksRegExp.exec(text)) {
        var name_1 = matches[1];
        var url = matches[2];
        links[name_1] = url;
    }
    var linked = text;
    _.forEach(links, function (u, n) {
        var nameRegExp = new RegExp("\\[(.+?)\\]\\[" + n + "\\]|\\[" + n + "\\]\\[\\]", "g");
        linked = linked.replace(nameRegExp, function (m, ln) {
            var linkName = (ln) ? ln : n;
            return "[" + linkName + "](" + u + ")";
        });
    });
    return linked.replace(namedLinksRegExp, "");
}
exports.convertNamedLinks = convertNamedLinks;
/**
 * Replace <img> tags with just the image URL.
 *
 * @param text string which may have img tags
 * @return string with img tags replaced
 */
function convertInlineImages(text) {
    var regex = /(?:&lt;|<)img\s[\S\s]*?\bsrc="(\S+?)"[\S\s]*?(?:&gt;|>)(\s?)/g;
    return text.replace(regex, trailingSpace);
}
exports.convertInlineImages = convertInlineImages;
/**
 * Replace Markdown image links with just the image URL.
 *
 * @param text string with Markdown
 * @return string with image URLs
 */
function convertImageLinks(text) {
    return text.replace(/!\[.*?\]\((.+?)\)(\s?)/g, trailingSpace);
}
exports.convertImageLinks = convertImageLinks;
/**
 * Replace Markdown links with Slack markup links.
 *
 * @param text string with Markdown
 * @return string with Slack markup
 */
function convertLinks(text) {
    return text.replace(/\[(.+?)\]\((.+?)\)/g, "<$2|$1>");
}
exports.convertLinks = convertLinks;
/**
 * Replace Markdown bold, italic, and unordered lists with their Slack
 * markup equivalent.
 *
 * @param text string with Markdown
 * @return string with Slack markup
 */
function convertFormat(text) {
    return text.replace(/^(\s*)[-*](\s+)/mg, "$1â€¢$2")
        .replace(/(\*|_)\1(\S|\S.*?\S)\1\1(?!\1)/g, "<bdmkd>$2<bdmkd>")
        .replace(/(\*|_)(?!\1)(\S|\S.*?\S)\1(?!\1)/g, "<itmkd>$2<itmkd>")
        .replace(/<bdmkd>/g, "*")
        .replace(/<itmkd>/g, "_");
}
exports.convertFormat = convertFormat;
/**
 * Convert sections of text from GitHub-flavored Markdown to Slack
 * message markup.  This function should not be passed inline code or
 * code blocks.  The ordering of the functions called is significant.
 *
 * @param text string containing Markdown
 * @return string converted to Slack markup
 */
function convertMarkdown(text) {
    try {
        return convertLinks(convertImageLinks(convertInlineImages(convertNamedLinks(convertFormat(text)))));
    }
    catch (e) {
        var err = e;
        console.error("replace failed:" + err.name + ":" + err.message + ":" + err.stack);
        return text;
    }
}
/**
 * Convert GitHub-flavored Markdown to Slack message markup.  This is
 * not a complete implementation of a Markdown parser, but it does its
 * level best.
 *
 * @param text string containing markdown
 * @return string with Slack markup
 */
function githubToSlack(text) {
    var splitRegex = /(```[\S\s]*?```(?!`)|`.*?`)/mg;
    var hunks = text.split(splitRegex);
    for (var i = 0; i < hunks.length; i += 2) {
        hunks[i] = convertMarkdown(hunks[i]);
    }
    return hunks.join("");
}
exports.githubToSlack = githubToSlack;
//# sourceMappingURL=Markdown.js.map