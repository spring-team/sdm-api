import { Attachment, MessageMimeType, SlackMessage } from "./SlackMessages";
export declare const ErrorColor = "#D94649";
export declare const SuccessColor = "#45B254";
export declare const WarningColor = "#FFCC00";
export interface RugCoordinate {
    readonly name: string;
    readonly group: string;
    readonly artifact: string;
}
export declare type InstructionKind = "generate" | "edit" | "execute" | "respond" | "command";
export interface Instruction<T extends InstructionKind> {
    readonly name: string | RugCoordinate;
    readonly parameters?: {};
    readonly kind: T;
}
export interface PresentableGenerate extends Instruction<"generate"> {
    project?: string;
}
export interface PresentableEdit extends Instruction<"edit"> {
    project?: string;
}
export declare class Identifiable<T extends InstructionKind> {
    instruction: Instruction<T> | PresentableGenerate | PresentableEdit;
    parameterName?: string;
    id?: string;
}
export declare type MessageKind = "response" | "directed";
export interface Message<T extends MessageKind> {
    kind: T;
}
export declare class UserAddress {
    username: string;
    constructor(username: string);
}
export declare class ChannelAddress {
    channelName: string;
    constructor(channelName: string);
}
export declare type MessageAddress = UserAddress | ChannelAddress;
/**
 * A Rug message parent class for response and direct messages.
 */
export declare abstract class LocallyRenderedMessage<T extends MessageKind> implements Message<T> {
    kind: T;
    contentType: MessageMimeType;
    body: string;
    instructions: Array<Identifiable<any>>;
}
/**
 * Represents the response to the bot from a command.
 */
export declare class ResponseMessage extends LocallyRenderedMessage<"response"> {
    kind: "response";
    constructor(body: string, contentType?: MessageMimeType);
}
/**
 * Message unrelated to extant communications with the bot.
 */
export declare class DirectedMessage extends LocallyRenderedMessage<"directed"> {
    kind: "directed";
    usernames: string[];
    channelNames: string[];
    constructor(body: string, address: MessageAddress, contentType?: MessageMimeType);
    addAddress(address: MessageAddress): this;
    addAction(instruction: Identifiable<any>): this;
}
/**
 * Create a standard Slack error message.  The attachment should
 * contain at least a non-empty fallback property.  The text property
 * will be augmented with information about getting help.  If the text
 * property is not provided, the fallback is used as a base for the
 * fallback.  Title icons and message will be added if they are not
 * present.
 *
 * @param attachment  message content
 * @param correlationId correlation ID for transaction that failed,
 *                      which will appear in the footer if it is not already set
 * @return a Slack error message using attachments which will need to be `render`ed
 */
export declare function errorMessage(attachment: Attachment, correlationId?: string): SlackMessage;
/**
 * Create a standard Slack success message.  The attachment should
 * contain at least a non-empty fallback property.  If the text
 * property is not provided, the fallback is used.  Title icons and
 * message will be added if they are not present.
 *
 * @param attachment  message content
 * @return a Slack success message using attachments which will need to be `render`ed
 */
export declare function successMessage(attachment: Attachment): SlackMessage;
/**
 * Create a standard Slack warning message.  The attachment should
 * contain at least a non-empty fallback property.  If the text
 * property is not provided, the fallback is used.  Title icons and
 * message will be added if they are not present.
 *
 * @param attachment  message content
 * @return a Slack warning message using attachments which will need to be `render`ed
 */
export declare function warningMessage(attachment: Attachment): SlackMessage;
/**
 * Create a Rug error ResponseMessage.  If rendering fails, a text
 * response message of attachment.fallback is returned.
 *
 * @param msg text of Slack message
 * @param correlationId correlation ID of transaction that failed
 * @return Rug error ResponseMessage
 */
export declare function errorResponse(attachment: Attachment, correlationId?: string): ResponseMessage;
/**
 * Create a Rug success ResponseMessage.  If rendering fails, a text
 * response message of attachment.fallback is returned.
 *
 * @param msg text of Slack message
 * @return Rug success ResponseMessage
 */
export declare function successResponse(attachment: Attachment): ResponseMessage;
/**
 * Create a Rug warning ResponseMessage.  If rendering fails, a text
 * response message of attachment.fallback is returned.
 *
 * @param msg text of Slack message
 * @return Rug warning ResponseMessage
 */
export declare function warningResponse(attachment: Attachment): ResponseMessage;
export declare const renderError: (msg: string, correlationId?: string | undefined) => ResponseMessage;
export declare const renderSuccess: (msg: string) => ResponseMessage;
