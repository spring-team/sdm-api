"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ApolloGraphClient_1 = require("../../../graph/ApolloGraphClient");
const MessageClientSupport_1 = require("../../../spi/message/MessageClientSupport");
const namespace = require("../../util/cls");
const AbstractRequestProcessor_1 = require("../AbstractRequestProcessor");
/**
 * RequestProcessor implementation used by the Express infrastructure to process
 * inbound events via HTTP REST apis.
 */
class ExpressRequestProcessor extends AbstractRequestProcessor_1.AbstractRequestProcessor {
    constructor(token, automations, listeners = [], options) {
        super(automations, listeners);
        this.token = token;
        this.automations = automations;
        this.listeners = listeners;
        this.options = options;
        this.messages = [];
    }
    sendStatusMessage(payload, ctx) {
        return Promise.resolve();
    }
    createGraphClient(event, context) {
        const teamId = namespace.get().teamId;
        return new ApolloGraphClient_1.ApolloGraphClient(`${this.options.endpoint.graphql}/${teamId}`, { Authorization: `token ${this.token}` });
    }
    createMessageClient(event, context) {
        return new ExpressMessageClient(this.messages);
    }
}
exports.ExpressRequestProcessor = ExpressRequestProcessor;
class ExpressMessageClient extends MessageClientSupport_1.MessageClientSupport {
    constructor(messages) {
        super();
        this.messages = messages;
    }
    doSend(msg, destinations, options) {
        this.messages.push(msg);
        return Promise.resolve();
    }
}
//# sourceMappingURL=ExpressRequestProcessor.js.map