import { ExpressCustomizer } from "../../../configuration";
import { AutomationEventListener } from "../../../server/AutomationEventListener";
import { AutomationServer } from "../../../server/AutomationServer";
/**
 * Registers an endpoint for every automation and exposes
 * metadataFromInstance at root. Responsible for marshalling into the appropriate structure
 */
export declare class ExpressServer {
    private automations;
    private listeners;
    private options;
    constructor(automations: AutomationServer, listeners: AutomationEventListener[], options: ExpressServerOptions);
    private exposeCommandHandlerInvocationRoute(exp, url, cors, handle);
    private exposeEventHandlerInvocationRoute(exp, url, cors, handle);
    private setupAuthentication();
    private adminRoute;
    private authenticate;
}
export interface ExpressServerOptions {
    port: number;
    host?: string;
    customizers?: ExpressCustomizer[];
    auth?: {
        basic: {
            enabled?: boolean;
            username?: string;
            password?: string;
        };
        bearer: {
            enabled?: boolean;
            org?: string;
            adminOrg?: string;
        };
        token: {
            enabled?: boolean;
            verify?: (token: string) => Promise<boolean>;
        };
    };
    endpoint: {
        graphql: string;
    };
}
