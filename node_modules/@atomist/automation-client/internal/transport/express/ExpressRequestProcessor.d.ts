import { AutomationContextAware, HandlerContext } from "../../../HandlerContext";
import { AutomationEventListener } from "../../../server/AutomationEventListener";
import { AutomationServer } from "../../../server/AutomationServer";
import { GraphClient } from "../../../spi/graph/GraphClient";
import { MessageClient } from "../../../spi/message/MessageClient";
import { AbstractRequestProcessor } from "../AbstractRequestProcessor";
import { CommandIncoming, EventIncoming } from "../RequestProcessor";
import { ExpressServerOptions } from "./ExpressServer";
/**
 * RequestProcessor implementation used by the Express infrastructure to process
 * inbound events via HTTP REST apis.
 */
export declare class ExpressRequestProcessor extends AbstractRequestProcessor {
    private token;
    protected automations: AutomationServer;
    protected listeners: AutomationEventListener[];
    private options;
    private messages;
    constructor(token: string, automations: AutomationServer, listeners: AutomationEventListener[], options: ExpressServerOptions);
    protected sendStatusMessage(payload: any, ctx: HandlerContext & AutomationContextAware): Promise<any>;
    protected createGraphClient(event: EventIncoming | CommandIncoming, context: AutomationContextAware): GraphClient;
    protected createMessageClient(event: EventIncoming | CommandIncoming, context: AutomationContextAware): MessageClient;
}
