"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringify = require("json-stringify-safe");
const NodeCache = require("node-cache");
const ApolloGraphClient_1 = require("../../../graph/ApolloGraphClient");
const logger_1 = require("../../util/logger");
const RequestProcessor_1 = require("../RequestProcessor");
/**
 * Factory for creating GraphClient instances for incoming commands and events.
 *
 * Uses a cache to store GraphClient instances for 5 mins after which new instances will be given out.
 */
class GraphClientFactory {
    constructor(registration, options) {
        this.registration = registration;
        this.options = options;
        this.graphClients = new NodeCache({ stdTTL: 1 * 60, checkperiod: 1 * 30, useClones: false });
    }
    createGraphClient(event) {
        let teamId;
        if (RequestProcessor_1.isCommandIncoming(event)) {
            teamId = event.team.id;
        }
        else if (RequestProcessor_1.isEventIncoming(event)) {
            teamId = event.extensions.team_id;
        }
        if (this.graphClients.get(teamId)) {
            logger_1.logger.debug("Re-using cached graph client for team '%s'", teamId);
            return this.graphClients.get(teamId);
        }
        else if (this.registration) {
            logger_1.logger.debug("Creating new graph client for team '%s'", teamId);
            const graphClient = new ApolloGraphClient_1.ApolloGraphClient(`${this.options.graphUrl}/${teamId}`, { Authorization: `Bearer ${this.registration.jwt}` });
            this.graphClients.set(teamId, graphClient);
            return graphClient;
        }
        logger_1.logger.debug("Unable to create graph client for team '%s' and registration '$s'", teamId, stringify(this.registration));
        return null;
    }
}
exports.GraphClientFactory = GraphClientFactory;
//# sourceMappingURL=GraphClientFactory.js.map