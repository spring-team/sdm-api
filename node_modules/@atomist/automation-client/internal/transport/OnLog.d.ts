import { EventFired, HandleEvent } from "../../HandleEvent";
import { HandlerContext } from "../../HandlerContext";
import { HandlerResult } from "../../HandlerResult";
import { EventHandlerMetadata } from "../../metadata/automationMetadata";
export interface Subscription {
    AtomistLog?: AtomistLog[] | null;
}
export interface AtomistLog {
    level?: string | null;
    timestamp?: number | null;
    message?: string | null;
    correlation_context?: CorrelationContext | null;
}
export interface CorrelationContext {
    correlation_id?: string | null;
    automation?: Automation | null;
}
export interface Automation {
    name?: string | null;
    version?: string | null;
}
export declare const OnLogName = "OnLog";
/**
 * Subscribe to AtomistLog events from the API.
 * Note: This event handler will get registered when this is enabled in the automation client configuration
 */
export declare class OnLog implements HandleEvent<Subscription>, EventHandlerMetadata {
    private eman;
    private version;
    private logHandlers;
    name: string;
    description: string;
    subscriptionName: string;
    subscription: string;
    constructor(eman: string, version: string, logHandlers?: LogHandler[]);
    handle(e: EventFired<Subscription>, ctx: HandlerContext): Promise<HandlerResult>;
}
/**
 * Maker that gets registered to subscribe to log events
 * @param {string} name
 * @param {string} version
 * @param {LogHandler[]} logHandlers
 * @returns {() => OnLog}
 */
export declare function onLogMaker(name: string, version: string, logHandlers: LogHandler[]): () => OnLog;
export declare type LogHandler = (log: AtomistLog, ctx: HandlerContext) => Promise<void>;
