import { EventFired } from "../../HandleEvent";
import { AutomationContextAware } from "../../HandlerContext";
import { HandlerContext } from "../../HandlerContext";
import { HandlerResult } from "../../HandlerResult";
import { AutomationEventListener } from "../../server/AutomationEventListener";
import { AutomationServer } from "../../server/AutomationServer";
import { GraphClient } from "../../spi/graph/GraphClient";
import { MessageClient, SlackMessageClient } from "../../spi/message/MessageClient";
import { CommandInvocation } from "../invoker/Payload";
import { CommandIncoming, EventIncoming, RequestProcessor } from "./RequestProcessor";
export declare abstract class AbstractRequestProcessor implements RequestProcessor {
    protected automations: AutomationServer;
    protected listeners: AutomationEventListener[];
    constructor(automations: AutomationServer, listeners?: AutomationEventListener[]);
    processCommand(command: CommandIncoming, callback?: (result: Promise<HandlerResult>) => void): void;
    processEvent(event: EventIncoming, callback?: (results: Promise<HandlerResult[]>) => void): void;
    sendCommandStatus(success: boolean, code: number, request: CommandIncoming, ctx: HandlerContext & AutomationContextAware): Promise<any>;
    sendEventStatus(success: boolean, request: EventFired<any>, event: EventIncoming, ctx: HandlerContext & AutomationContextAware): Promise<any>;
    protected invokeCommand(ci: CommandInvocation, ctx: HandlerContext & AutomationContextAware, command: CommandIncoming, callback: (result: Promise<HandlerResult>) => void): void;
    protected invokeEvent(ef: EventFired<any>, ctx: HandlerContext & AutomationContextAware, event: EventIncoming, callback: (results: Promise<HandlerResult[]>) => void): void;
    protected createAndWrapMessageClient(event: EventIncoming | CommandIncoming, context: HandlerContext & AutomationContextAware): MessageClient & SlackMessageClient;
    protected setupNamespace(request: any, automations: AutomationServer, invocationId?: string, ts?: number): {
        correlationId: any;
        teamId: any;
        teamName: any;
        operation: any;
        name: string;
        version: string;
        invocationId: string;
        ts: number;
    };
    protected clearNamespace(): void;
    protected abstract sendStatusMessage(payload: any, ctx: HandlerContext & AutomationContextAware): Promise<any>;
    protected abstract createGraphClient(event: EventIncoming | CommandIncoming, context: HandlerContext & AutomationContextAware): GraphClient;
    protected abstract createMessageClient(event: EventIncoming | CommandIncoming, context: AutomationContextAware): MessageClient;
    private handleCommandError(err, command, ci, ctx, callback);
    private handleEventError(err, event, ef, ctx, callback);
}
export declare function defaultResult(context: AutomationContextAware): HandlerResult;
export declare function defaultErrorResult(context: AutomationContextAware): HandlerResult;
