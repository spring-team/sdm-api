"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid/v4");
function hideString(value) {
    if (!value) {
        return value;
    }
    let newValue = "";
    for (let i = 0; i < value.length; i++) {
        if (i === 0) {
            newValue = value.charAt(0);
        }
        else if (i < value.length - 1) {
            newValue += "*";
        }
        else {
            newValue += value.slice(-1);
        }
    }
    return newValue;
}
exports.hideString = hideString;
function guid() {
    return uuid();
}
exports.guid = guid;
function findLine(str, idx) {
    const first = str.substring(0, idx);
    const last = str.substring(idx);
    const firstNewLine = first.lastIndexOf("\n");
    let secondNewLine = last.indexOf("\n");
    if (secondNewLine === -1) {
        secondNewLine = last.length;
    }
    return str.substring(firstNewLine + 1, idx + secondNewLine);
}
exports.findLine = findLine;
function toStringArray(strings) {
    if (strings) {
        if (Array.isArray(strings)) {
            return strings;
        }
        else {
            return [strings];
        }
    }
    else {
        return [];
    }
}
exports.toStringArray = toStringArray;
function obfuscateJson(key, value) {
    if (/token|password|jwt|url|secret|authorization/i.test(key)) {
        return hideString(value);
    }
    else if (key === "commands") {
        return undefined;
    }
    else if (key === "events") {
        return undefined;
    }
    else if (key === "ingesters") {
        return undefined;
    }
    else if (key === "listeners") {
        return undefined;
    }
    else if (key === "customizers") {
        return undefined;
    }
    else if (key === "postProcessors") {
        return undefined;
    }
    return value;
}
exports.obfuscateJson = obfuscateJson;
//# sourceMappingURL=string.js.map