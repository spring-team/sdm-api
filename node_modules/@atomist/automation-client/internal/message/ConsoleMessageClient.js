"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SlackMessages_1 = require("@atomist/slack-messages/SlackMessages");
const MessageClient_1 = require("../../spi/message/MessageClient");
const MessageClientSupport_1 = require("../../spi/message/MessageClientSupport");
const logger_1 = require("../util/logger");
/**
 * Clearly display messages with channels and recipients (if DMs) on the console.
 */
class ConsoleMessageClient extends MessageClientSupport_1.MessageClientSupport {
    doSend(msg, destinations, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let s = "";
            if (MessageClient_1.isSlackMessage(msg)) {
                s += `@atomist: ${SlackMessages_1.render(msg, true)}`;
            }
            else {
                s += `@atomist: ${msg}`;
            }
            logger_1.logger.info(s);
        });
    }
}
exports.ConsoleMessageClient = ConsoleMessageClient;
exports.consoleMessageClient = new MessageClientSupport_1.DefaultSlackMessageClient(new ConsoleMessageClient(), null);
//# sourceMappingURL=ConsoleMessageClient.js.map