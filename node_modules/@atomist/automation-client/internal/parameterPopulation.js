"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const automationMetadata_1 = require("../metadata/automationMetadata");
/**
 * Populate the parameters of the command handler instance,
 * performing type coercion if necessary
 * @param instanceToPopulate parameters instance (may be handler instance itself)
 * @param hm handler metadata
 * @param args string args
 */
function populateParameters(instanceToPopulate, hm, args) {
    args.forEach(arg => {
        if (arg.value !== undefined) {
            const parameter = hm.parameters.find(p => p.name === arg.name);
            if (parameter) {
                _.update(instanceToPopulate, parameter.name, () => computeValue(parameter, arg.value));
            }
        }
    });
}
exports.populateParameters = populateParameters;
function populateValues(instanceToPopulate, am, configuration) {
    (am.values || []).forEach(v => {
        const configValue = _.get(configuration, v.path);
        if (!configValue && v.required) {
            throw new Error(`Required @Value '${v.path}' in '${instanceToPopulate.constructor.name}' is not available in configuration`);
        }
        else {
            _.update(instanceToPopulate, v.name, () => computeValue({ name: v.name, type: v.type }, configValue));
        }
    });
}
exports.populateValues = populateValues;
function computeValue(parameter, value) {
    // Convert type if necessary
    switch (parameter.type) {
        case "string":
        case undefined:
            // It's a string. Keep the value the same
            break;
        case automationMetadata_1.FreeChoices:
            // It's a string array. Keep the value the same
            break;
        case "boolean":
            if (typeof value !== "boolean") {
                value = value === "true" || value === "yes" || value === "1";
            }
            break;
        case "number":
            if (typeof value === "string") {
                value = parseInt(value, 10);
            }
            else {
                throw new Error(`Parameter '${parameter.name}' has array value, but is numeric`);
            }
            break;
        default:
            // It's a Chooser
            const chooser = parameter.type;
            if (chooser.pickOne) {
                if (typeof value !== "string") {
                    throw new Error(`Parameter '${parameter.name}' has array value, but should be string`);
                }
            }
            else {
                if (typeof value.value === "string") {
                    throw new Error(`Parameter '${parameter.name}' has string value, but should be array`);
                }
            }
            break;
    }
    return value;
}
//# sourceMappingURL=parameterPopulation.js.map