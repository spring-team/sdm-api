#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringify = require("json-stringify-safe");
const logger_1 = require("../internal/util/logger");
process.env.SUPPRESS_NO_CONFIG_WARNING = "true";
logger_1.LoggingConfig.format = "cli";
const yargs = require("yargs");
const automationClient_1 = require("../automationClient");
const configuration_1 = require("../configuration");
const ConsoleMessageClient_1 = require("../internal/message/ConsoleMessageClient");
const string_1 = require("../internal/util/string");
if (yargs.argv.request) {
    try {
        const request = JSON.parse(yargs.argv.request);
        configuration_1.loadConfiguration()
            .then(configuration => {
            const node = automationClient_1.automationClient(configuration);
            configuration.commands.forEach(c => {
                node.withCommandHandler(c);
            });
            invokeOnConsole(node.automationServer, request, createHandlerContext(configuration));
        });
    }
    catch (e) {
        console.error(`Error: ${e.message}`);
        process.exit(1);
    }
}
else {
    console.log("Error: Missing command request");
    process.exit(1);
}
function createHandlerContext(config) {
    return {
        teamId: config.teamIds[0],
        correlationId: string_1.guid(),
        messageClient: ConsoleMessageClient_1.consoleMessageClient,
    };
}
function invokeOnConsole(automationServer, ci, ctx) {
    // Set up the parameter, mappend parameters and secrets
    const handler = automationServer.automations.commands.find(c => c.name === ci.name);
    const invocation = {
        name: ci.name,
        args: ci.args ? ci.args.filter(a => handler.parameters.some(p => p.name === a.name)) : undefined,
        mappedParameters: ci.args ? ci.args.filter(a => handler.mapped_parameters.some(p => p.name === a.name)) : undefined,
        secrets: ci.args ? ci.args.filter(a => handler.secrets.some(p => p.name === a.name))
            .map(a => {
            const s = handler.secrets.find(p => p.name === a.name);
            return { uri: s.uri, value: a.value };
        }) : undefined,
    };
    try {
        automationServer.validateCommandInvocation(invocation);
    }
    catch (e) {
        console.log("Error: Invalid parameters: %s", e.message);
        process.exit(1);
    }
    try {
        automationServer.invokeCommand(invocation, ctx)
            .then(r => {
            console.log(`Command succeeded: ${stringify(r, null, 2)}`);
            process.exit(0);
        })
            .catch(err => {
            console.log(`Error: Command failed: ${stringify(err, null, 2)}`);
            process.exit(1);
        });
    }
    catch (e) {
        console.log("Unhandled Error: Command failed: %s", e.message);
        process.exit(11);
    }
}
//# sourceMappingURL=run.js.map