import { Configuration } from "../configuration";
import { EventFired } from "../HandleEvent";
import { AutomationContextAware, HandlerContext } from "../HandlerContext";
import { HandlerResult } from "../HandlerResult";
import { CommandInvocation } from "../internal/invoker/Payload";
import { RequestProcessor } from "../internal/transport/RequestProcessor";
import { AutomationEventListenerSupport } from "../server/AutomationEventListener";
import { Destination, MessageOptions } from "../spi/message/MessageClient";
export declare class StatsdAutomationEventListener extends AutomationEventListenerSupport {
    private configuration;
    private statsd;
    private timer;
    private registrationName;
    constructor(configuration: Configuration);
    registrationSuccessful(handler: RequestProcessor): void;
    contextCreated(ctx: HandlerContext): void;
    commandSuccessful(payload: CommandInvocation, ctx: HandlerContext, result: HandlerResult): Promise<any>;
    commandFailed(payload: CommandInvocation, ctx: HandlerContext, err: any): Promise<any>;
    eventSuccessful(payload: EventFired<any>, ctx: HandlerContext, result: HandlerResult[]): Promise<any>;
    eventFailed(payload: EventFired<any>, ctx: HandlerContext, err: any): Promise<any>;
    messageSent(message: any, destinations: Destination | Destination[], options: MessageOptions, ctx: HandlerContext & AutomationContextAware): void;
    /** Do-nothing callback */
    private callback(err);
    private increment(stat, tags?);
    private event(title, text?, tags?);
    private timing(stat, ctx, tags?);
    private initStatsd();
    private teamDetail(ctx);
    private submitHeapStats();
}
