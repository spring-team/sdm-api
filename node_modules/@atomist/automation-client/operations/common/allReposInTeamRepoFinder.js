"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const GitHubRepoRef_1 = require("./GitHubRepoRef");
const localRepoFinder_1 = require("./localRepoFinder");
// Hard-coded limit in GraphQL queries. Not sure why we can't pass this
const PageSize = 100;
/**
 * Use a GraphQL query to find all repos for the current team,
 * or look locally if appropriate, in current working directory
 *
 * DEPRECATED: there's a better one in @atomist/sdm
 *
 * @param cwd directory to look in if this is local
 * @constructor
 */
function allReposInTeam(cwd) {
    return (context) => {
        if (cwd) {
            return localRepoFinder_1.twoTierDirectoryRepoFinder(cwd)(context);
        }
        return queryForPage(context, 0);
    };
}
exports.allReposInTeam = allReposInTeam;
const RepoQuery = `
query Repos($teamId: ID!, $offset: Int!) {
    ChatTeam(id: $teamId) {
        orgs {
            repo(first: 100, offset: $offset) {
                owner
                name
            }
        }
    }
}
`;
/**
 * Recursively query for repos from the present offset
 * @param {HandlerContext} context
 * @param {number} offset
 * @return {Promise<RepoRef[]>}
 */
function queryForPage(context, offset) {
    return context.graphClient.executeQuery(RepoQuery, { teamId: context.teamId, offset })
        .then(result => {
        return _.flatMap(result.ChatTeam[0].orgs, org => org.repo.map(r => new GitHubRepoRef_1.GitHubRepoRef(r.owner, r.name)));
    })
        .then((repos) => {
        return (repos.length < PageSize) ?
            repos :
            queryForPage(context, offset + PageSize)
                .then(moreRepos => repos.concat(moreRepos));
    });
}
//# sourceMappingURL=allReposInTeamRepoFinder.js.map