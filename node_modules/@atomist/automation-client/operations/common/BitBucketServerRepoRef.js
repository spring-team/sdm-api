"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ActionResult_1 = require("../../action/ActionResult");
const logger_1 = require("../../internal/util/logger");
const AbstractRemoteRepoRef_1 = require("./AbstractRemoteRepoRef");
const axios_1 = require("axios");
const base64_1 = require("../../internal/util/base64");
const BasicAuthCredentials_1 = require("./BasicAuthCredentials");
const RepoId_1 = require("./RepoId");
/*
 * TODO: move code down from sdm, it's better
 */
class BitBucketServerRepoRef extends AbstractRemoteRepoRef_1.AbstractRepoRef {
    constructor(remoteBase, owner, repo, isProject = true, sha = "master", path) {
        super(RepoId_1.ProviderType.bitbucket, remoteBase, owner, repo, sha, path);
        this.isProject = isProject;
        this.apiBase = `https://${remoteBase}/rest/api/1.0/`;
        this.ownerType = isProject ? "projects" : "users";
    }
    createRemote(creds, description, visibility) {
        const url = `${this.apiBase}${this.apiBasePathComponent}`;
        logger_1.logger.debug(`Making request to '${url}' to create repo`);
        return axios_1.default.post(url, {
            name: this.repo,
            scmId: "git",
            forkable: "true",
        }, headers(creds))
            .then(axiosResponse => {
            return {
                target: this,
                success: true,
                axiosResponse,
            };
        })
            .catch(error => {
            logger_1.logger.error("Error attempting to create repository %j: %s", this, error);
            return Promise.reject(error);
        });
    }
    deleteRemote(creds) {
        const url = `${this.apiBase}${this.apiPathComponent}`;
        logger_1.logger.debug(`Making request to '${url}' to delete repo`);
        return axios_1.default.delete(url, headers(creds))
            .then(axiosResponse => {
            return {
                target: this,
                success: true,
                axiosResponse,
            };
        })
            .catch(err => {
            logger_1.logger.error(`Error attempting to delete repository: ${err}`);
            return Promise.reject(err);
        });
    }
    setUserConfig(credentials, project) {
        return Promise.resolve(ActionResult_1.successOn(this));
    }
    raisePullRequest(credentials, title, body, head, base) {
        const url = `${this.apiBase}${this.apiPathComponent}/pull-requests`;
        logger_1.logger.debug(`Making request to '${url}' to raise PR`);
        return axios_1.default.post(url, {
            title,
            description: body,
            fromRef: {
                id: head,
            },
            toRef: {
                id: base,
            },
        }, headers(credentials))
            .then(axiosResponse => {
            return {
                target: this,
                success: true,
                axiosResponse,
            };
        })
            .catch(err => {
            logger_1.logger.error(`Error attempting to raise PR: ${err}`);
            return Promise.reject(err);
        });
    }
    get url() {
        let url = `projects/${this.owner}/repos/`;
        if (!this.isProject) {
            url = `users/${this.owner}/repos/`;
        }
        return `https://${this.remoteBase}/${url}/${this.repo}`;
    }
    get pathComponent() {
        let owernUrlComponent = this.owner;
        if (!this.isProject) {
            owernUrlComponent = `~${this.owner}`;
        }
        return `scm/${owernUrlComponent}/${this.repo}`;
    }
    get apiBasePathComponent() {
        let apiPath = `projects/${this.owner}/repos/`;
        if (!this.isProject) {
            apiPath = `projects/~${this.owner}/repos/`;
        }
        return apiPath;
    }
    get apiPathComponent() {
        return this.apiBasePathComponent + this.repo;
    }
}
exports.BitBucketServerRepoRef = BitBucketServerRepoRef;
function headers(creds) {
    if (!BasicAuthCredentials_1.isBasicAuthCredentials(creds)) {
        throw new Error("Only Basic auth supported: Had " + JSON.stringify(creds));
    }
    const upwd = `${creds.username}:${creds.password}`;
    const encoded = base64_1.encode(upwd);
    return {
        headers: {
            Authorization: `Basic ${encoded}`,
        },
    };
}
//# sourceMappingURL=BitBucketServerRepoRef.js.map