"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../../../decorators");
const gitHubPatterns_1 = require("./gitHubPatterns");
/**
 * Parameters common to anything that works with a single source repo,
 * such as a seed driven generator
 */
class SourceRepoParameters {
    constructor() {
        this.sha = "master";
    }
}
__decorate([
    decorators_1.Parameter({
        pattern: gitHubPatterns_1.GitHubNameRegExp.pattern,
        displayName: "Seed Repository Owner",
        description: "owner, i.e., user or organization, of seed repository",
        validInput: gitHubPatterns_1.GitHubNameRegExp.validInput,
        minLength: 1,
        maxLength: 100,
        required: false,
        displayable: true,
    }),
    __metadata("design:type", String)
], SourceRepoParameters.prototype, "owner", void 0);
__decorate([
    decorators_1.Parameter({
        pattern: gitHubPatterns_1.GitHubNameRegExp.pattern,
        displayName: "Seed Repository Name",
        description: "name of the seed repository",
        validInput: gitHubPatterns_1.GitHubNameRegExp.validInput,
        minLength: 1,
        maxLength: 100,
        required: false,
        displayable: true,
    }),
    __metadata("design:type", String)
], SourceRepoParameters.prototype, "repo", void 0);
__decorate([
    decorators_1.Parameter({
        pattern: gitHubPatterns_1.GitBranchRegExp.pattern,
        displayName: "Seed Branch",
        description: "seed repository branch to clone for new project",
        validInput: gitHubPatterns_1.GitBranchRegExp.validInput,
        minLength: 1,
        maxLength: 256,
        required: false,
        displayable: true,
    }),
    __metadata("design:type", String)
], SourceRepoParameters.prototype, "sha", void 0);
exports.SourceRepoParameters = SourceRepoParameters;
//# sourceMappingURL=SourceRepoParameters.js.map