import { EventFired } from "../HandleEvent";
import { HandlerContext } from "../HandlerContext";
import { HandlerResult } from "../HandlerResult";
import { CommandInvocation } from "../internal/invoker/Payload";
import { CommandIncoming, EventIncoming, RequestProcessor } from "../internal/transport/RequestProcessor";
import { Destination, MessageOptions } from "../spi/message/MessageClient";
export interface AutomationEventListener {
    registrationSuccessful(handler: RequestProcessor): void;
    contextCreated(context: HandlerContext): void;
    commandIncoming(payload: CommandIncoming): void;
    commandStarting(payload: CommandInvocation, ctx: HandlerContext): void;
    commandSuccessful(payload: CommandInvocation, ctx: HandlerContext, result: HandlerResult): Promise<any>;
    commandFailed(payload: CommandInvocation, ctx: HandlerContext, err: any): Promise<any>;
    eventIncoming(payload: EventIncoming): void;
    eventStarting(payload: EventFired<any>, ctx: HandlerContext): void;
    eventSuccessful(payload: EventFired<any>, ctx: HandlerContext, result: HandlerResult[]): Promise<any>;
    eventFailed(payload: EventFired<any>, ctx: HandlerContext, err: any): Promise<any>;
    messageSent(message: any, destinations: Destination | Destination[], options: MessageOptions, ctx: HandlerContext): void;
}
export declare class AutomationEventListenerSupport implements AutomationEventListener {
    registrationSuccessful(handler: RequestProcessor): void;
    contextCreated(context: HandlerContext): void;
    commandIncoming(payload: CommandIncoming): void;
    commandStarting(payload: CommandInvocation, ctx: HandlerContext): void;
    commandSuccessful(payload: CommandInvocation, ctx: HandlerContext, result: HandlerResult): Promise<any>;
    commandFailed(payload: CommandInvocation, ctx: HandlerContext, err: any): Promise<any>;
    eventIncoming(payload: EventIncoming): void;
    eventStarting(payload: EventFired<any>, ctx: HandlerContext): void;
    eventSuccessful(payload: EventFired<any>, ctx: HandlerContext, result: HandlerResult[]): Promise<any>;
    eventFailed(payload: EventFired<any>, ctx: HandlerContext, err: any): Promise<any>;
    messageSent(message: any, destinations: Destination | Destination[], options: MessageOptions, ctx: HandlerContext): void;
}
