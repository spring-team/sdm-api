import { AutomationServerOptions } from "../configuration";
import { HandleCommand } from "../HandleCommand";
import { EventFired, HandleEvent } from "../HandleEvent";
import { HandlerContext } from "../HandlerContext";
import { HandlerResult } from "../HandlerResult";
import { CommandInvocation } from "../internal/invoker/Payload";
import { Automations } from "../internal/metadata/metadata";
import { CommandHandlerMetadata, EventHandlerMetadata } from "../metadata/automationMetadata";
import { SecretResolver } from "../spi/env/SecretResolver";
import { Maker } from "../util/constructionUtils";
import { AbstractAutomationServer } from "./AbstractAutomationServer";
/**
 * Simple automation server that offers building style
 * configuration
 */
export declare class BuildableAutomationServer extends AbstractAutomationServer {
    opts: AutomationServerOptions;
    private fallbackSecretResolver;
    private graphClient;
    private commandHandlers;
    private eventHandlers;
    private ingesters;
    constructor(opts: AutomationServerOptions, fallbackSecretResolver?: SecretResolver);
    registerCommandHandler(chm: Maker<HandleCommand>): this;
    fromCommandHandler<P>(hc: HandleCommand<P>): this;
    registerEventHandler(maker: Maker<HandleEvent<any>>): this;
    registerIngester(ingester: any): this;
    protected invokeCommandHandler(invocation: CommandInvocation, metadata: CommandHandlerMetadata, ctx: HandlerContext): Promise<HandlerResult>;
    protected invokeEventHandler(e: EventFired<any>, metadata: EventHandlerMetadata, ctx: HandlerContext): Promise<HandlerResult>;
    /**
     * Populate handler parameters
     */
    private invokeCommandHandlerWithFreshParametersInstance<P>(h, md, params, invocation, ctx);
    private invokeFreshEventHandlerInstance(h, metadata, e, ctx);
    private enrichContext(ctx);
    private populateMappedParameters(h, metadata, invocation);
    private populateSecrets(h, metadata, invocationSecrets);
    readonly automations: Automations;
}
