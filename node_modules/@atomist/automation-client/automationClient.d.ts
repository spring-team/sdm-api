import { Configuration } from "./configuration";
import { HandleCommand } from "./HandleCommand";
import { HandleEvent } from "./HandleEvent";
import { Ingester } from "./ingesters";
import { ExpressServer } from "./internal/transport/express/ExpressServer";
import { WebSocketClient } from "./internal/transport/websocket/WebSocketClient";
import { WebSocketRequestProcessor } from "./internal/transport/websocket/WebSocketRequestProcessor";
import { AutomationServer } from "./server/AutomationServer";
import { BuildableAutomationServer } from "./server/BuildableAutomationServer";
import { Maker } from "./util/constructionUtils";
export declare class AutomationClient {
    configuration: Configuration;
    automations: BuildableAutomationServer;
    webSocketClient: WebSocketClient;
    httpServer: ExpressServer;
    wsHandler: WebSocketRequestProcessor;
    private defaultListeners;
    constructor(configuration: Configuration);
    readonly automationServer: AutomationServer;
    withCommandHandler(chm: Maker<HandleCommand>): AutomationClient;
    withEventHandler(event: Maker<HandleEvent<any>>): AutomationClient;
    withIngester(ingester: Ingester | string): AutomationClient;
    run(): Promise<any>;
    private setupWebSocketClusterRequestHandler(webSocketOptions);
    private setupWebSocketRequestHandler(webSocketOptions);
    private setupApplicationEvents();
    private runWs(handler, options);
    private runHttp();
}
export declare function automationClient(configuration: Configuration): AutomationClient;
